(substitution
 (subs_TCC1 0
  (subs_TCC1-1 nil 3804712624 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (subs termination
    "substitution.subs(substitution.sigma_basic, substitution.t1)"
    "nil")))
 (subs_TCC2 0
  (subs_TCC2-1 nil 3804712624 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (subs termination
    "substitution.subs(substitution.sigma_basic, substitution.t2)"
    "nil")))
 (subs_TCC3 0
  (subs_TCC3-1 nil 3804712624 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (subs termination
    "substitution.subs(substitution.sigma_basic, substitution.arg)"
    "nil")))
 (subs_TCC4 0
  (subs_TCC4-1 nil 3804712624 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (subs termination
    "substitution.subs(substitution.sigma_basic, substitution.arg)"
    "nil")))
 (subs_TCC5 0
  (subs_TCC5-1 nil 3805034157 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (subs termination "substitution.subs(substitution.tail)" "nil")))
 (subs_TCC6 0
  (subs_TCC6-1 nil 3805815347 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (subs subtype "substitution.args"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (subs_TCC7 0
  (subs_TCC7-1 nil 3805815347 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (subs termination
    "substitution.subs(substitution.sigma)(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(substitution.args))"
    "nil")))
 (subs_TCC8 0
  (subs_TCC8-1 nil 3805815347 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil))
   nil
   (subs subtype "substitution.args"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (subs_TCC9 0
  (subs_TCC10-1 nil 3825514291
   ("" (skeep)
    (("" (lemma "finite_subset[term]")
      (("" (inst? -1)
        (("" (inst -1 "image(subs(sigma), fin_set_t)")
          (("" (prop)
            (("" (hide 2)
              (("" (expand "subset?" 1)
                (("" (skolem 1 "t1")
                  (("" (prop)
                    (("" (expand "member" -1)
                      (("" (skeep) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_image application-judgement "finite_set[R]"
     function_image_aux nil)
    (subset? const-decl "bool" sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (subs subtype
    "{t | EXISTS s: booleans.AND(sets[term[constant, variable, f_symbol, ac_symbol]].member(substitution.s, substitution.fin_set_t), substitution.t = substitution.subs(substitution.sigma)(substitution.s))}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (supset_dom_TCC1 0
  (supset_dom_TCC1-1 nil 3823268210 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (supset_dom subtype "substitution.sigma"
    "(list_adt[basic_sub].cons?)")))
 (supset_dom_TCC2 0
  (supset_dom_TCC2-1 nil 3823268210 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (supset_dom termination
    "substitution.supset_dom(list_adt[basic_sub].cdr(substitution.sigma))"
    "nil")))
 (supset_dom_TCC3 0
  (supset_dom_TCC3-1 nil 3823268210 ("" (subtype-tcc) nil nil) nil nil
   (supset_dom subtype "substitution.sigma"
    "(list_adt[basic_sub].cons?)")))
 (supset_dom_correct 0
  (supset_dom_correct-1 nil 3823268392
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1)
            (("2" (expand "subs" 1)
              (("2" (inst -1 "X")
                (("2" (assert)
                  (("2" (prop)
                    (("1" (hide 1)
                      (("1" (expand "supset_dom" 1)
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (expand "subs" -1)
                      (("2" (replace -1 1)
                        (("2" (hide -1)
                          (("2" (expand "subs" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("2"
                                  (hide 1)
                                  (("2"
                                    (expand "supset_dom" 1)
                                    (("2"
                                      (expand "member" 1)
                                      (("2"
                                        (expand "add" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   shostak))
 (dom_TCC1 0
  (dom_TCC1-1 nil 3823268323
   ("" (skeep)
    ((""
      (name-replace "dom"
       "{X | subs(sigma)(X) /= variable[constant, variable, f_symbol, ac_symbol](X)}")
      (("" (case "subset?(dom, supset_dom(sigma))")
        (("1" (lemma "finite_subset[variable]")
          (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (expand "subset?" 1)
            (("2" (skeep)
              (("2" (expand "dom")
                (("2" (expand "member" -1)
                  (("2" (lemma "supset_dom_correct")
                    (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (/= const-decl "boolean" notequal nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (member const-decl "bool" sets nil)
    (supset_dom_correct formula-decl nil substitution nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil))
   nil
   (dom subtype
    "{X | substitution.subs(substitution.sigma)(substitution.X) /= term_adt[constant, variable, f_symbol, ac_symbol].variable(substitution.X)}"
    "finite_set[variable]")))
 (supset_dom_correct2 0
  (supset_dom_correct2-1 nil 3823270009
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skeep)
        (("" (expand "dom" -1)
          (("" (expand "member" -1)
            (("" (lemma "supset_dom_correct")
              (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (supset_dom_correct formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil))
   shostak))
 (img_TCC1 0
  (img_TCC1-1 nil 3823268323
   ("" (skeep)
    (("" (lemma "dom_TCC1")
      (("" (inst -1 "sigma")
        (("" (lemma "is_finite_surj[variable]")
          (("" (inst? -1)
            (("" (assert)
              ((""
                (case "EXISTS(f:[({X |
              subs(sigma)(X) /=
               variable[constant, variable, f_symbol, ac_symbol](X)}) -> ({t |
              EXISTS X:
                member[variable](X, dom(sigma)) AND subs(sigma)(X) = t})]): surjective?(f)")
                (("1" (skolem -1 "f2")
                  (("1" (skeep)
                    (("1" (lemma "is_finite_surj[term]")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (inst 1 "N" "o(f2, f)")
                              (("1"
                                (hide -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "composition_surjective[below[N], {X |
                    subs(sigma)(X) /=
                     variable[constant, variable, f_symbol, ac_symbol]
                         (X)}, {t |
                    EXISTS X:
                      member[variable](X, dom(sigma)) AND
                       subs(sigma)(X) = t}]")
                                    (("1" (inst? -1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (hide -1 -2)
                    (("2" (inst 1 "subs(sigma)")
                      (("1" (expand "surjective?" 1)
                        (("1" (skolem 1 ("t"))
                          (("1" (typepred "t")
                            (("1" (hide -1)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "X")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (expand "dom" -1)
                                    (("2"
                                      (expand "member" -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst 1 "x1")
                          (("2" (typepred "x1")
                            (("2" (expand "dom" 1)
                              (("2"
                                (expand "member" 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dom_TCC1 subtype-tcc nil substitution nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (O const-decl "T3" function_props nil)
    (< const-decl "bool" reals nil)
    (composition_surjective judgement-tcc nil function_props nil)
    (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (surjective? const-decl "bool" functions nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (/= const-decl "boolean" notequal nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (img subtype
    "{t | EXISTS X: booleans.AND(sets[variable].member(substitution.X, substitution.dom(substitution.sigma)), substitution.subs(substitution.sigma)(substitution.X) = substitution.t)}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (subs_const 0
  (subs_const-1 nil 3805817833
   ("" (induct "sigma") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (const adt-constructor-decl "[constant -> (const?)]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_unit 0
  (subs_unit-1 nil 3805817862
   ("" (induct "sigma") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_pair 0
  (subs_pair-1 nil 3805818035
   ("" (induct "sigma") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_app 0
  (subs_app-1 nil 3807643979
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1)
            (("2" (inst? -1)
              (("2" (replace -1 1)
                (("2" (expand "subs" 1 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_ac 0
  (subs_ac-1 nil 3805815755
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1 1)
            (("2" (inst? -1)
              (("2" (replace -1 1)
                (("2" (hide -1)
                  (("2" (expand "subs" 1 1)
                    (("2" (expand "subs" 1 3) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_var 0
  (subs_var-1 nil 3826486141
   ("" (skeep)
    (("" (case "const?(t)")
      (("1" (lemma "term_const_eta")
        (("1" (inst? -1)
          (("1" (replace -1 -3 :dir rl)
            (("1" (hide -1)
              (("1" (rewrite "subs_const") (("1" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "unit?(t)")
        (("1" (case "t = unit")
          (("1" (replace -1) (("1" (rewrite "subs_unit") nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (case "pair?(t)")
          (("1" (lemma "term_pair_eta")
            (("1" (inst? -1)
              (("1" (replace -1 -3 :dir rl)
                (("1" (hide -1)
                  (("1" (rewrite "subs_pair") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "app?(t)")
            (("1" (lemma "term_app_eta")
              (("1" (inst -1 "t")
                (("1" (replace -1 -3 :dir rl)
                  (("1" (rewrite "subs_app") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "ac_app?(t)")
              (("1" (lemma "term_ac_app_eta")
                (("1" (inst? -1)
                  (("1" (replace -1 -3 :dir rl)
                    (("1" (rewrite "subs_ac") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (term_const_eta formula-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_unit formula-decl nil substitution nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (subs_pair2 0
  (subs_pair2-1 nil 3832099572
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" -2)
            (("2" (inst -1 "t")
              (("2" (grind)
                (("2" (expand "subs" -1 1)
                  (("2" (grind)
                    (("2" (lemma "subs_var")
                      (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_var formula-decl nil substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subs_ac2 0
  (subs_ac2-1 nil 3832432317
   ("" (skeep)
    (("" (lemma "term_opt")
      (("" (inst? -1)
        (("" (assert)
          (("" (prop)
            (("1" (replace -2)
              (("1" (rewrite "subs_const") (("1" (grind) nil nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (rewrite "subs_unit") (("2" (grind) nil nil)) nil))
              nil)
             ("3" (replace -2 -3)
              (("3" (rewrite "subs_pair") (("3" (grind) nil nil)) nil))
              nil)
             ("4" (replace -2)
              (("4" (rewrite "subs_app") (("4" (grind) nil nil)) nil))
              nil)
             ("5" (replace -2 -3)
              (("5" (rewrite "subs_ac")
                (("5" (replace -2 1)
                  (("5" (rewrite "subs_ac")
                    (("5" (replace -2 :dir rl) (("5" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_opt formula-decl nil term_properties nil)
    (func? const-decl "bool" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (sym const-decl "string" term_properties nil)
    (same_func? const-decl "bool" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (subs_unit formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_ac3 0
  (subs_ac3-1 nil 3849788446
   ("" (skeep) (("" (lemma "subs_ac2") (("" (grind) nil nil)) nil))
    nil)
   ((subs_ac2 formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (func? const-decl "bool" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sym const-decl "string" term_properties nil)
    (same_func? const-decl "bool" term_properties nil))
   shostak))
 (subs_func 0
  (subs_func-1 nil 3832601176
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (replace -2 -4)
                  (("1" (rewrite "subs_const") (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (replace -1 -3)
                  (("2" (rewrite "subs_unit") (("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (replace -2 -4)
                  (("3" (rewrite "subs_pair") (("3" (grind) nil nil))
                    nil))
                  nil)
                 ("4" (replace -2 -4)
                  (("4" (rewrite "subs_app")
                    (("4" (hide -2)
                      (("4" (hide -2)
                        (("4" (lemma "term_app_eta")
                          (("4" (inst? -1)
                            (("4" (replace -1 1 :dir rl)
                              (("4"
                                (rewrite "subs_app")
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma "subs_ac2")
                  (("5" (inst? -1)
                    (("5" (assert)
                      (("5" (replace -2)
                        (("5" (rewrite "subs_ac")
                          (("5" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_ac2 formula-decl nil substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (term_app_eta formula-decl nil term_adt nil)
    (sym const-decl "string" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (subs_const formula-decl nil substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (term_opt formula-decl nil term_properties nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (same_func? const-decl "bool" term_properties nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (func? const-decl "bool" term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_ord 0
  (subs_ord-1 nil 3837025236
   ("" (skeep)
    (("" (lemma "term_opt")
      (("" (inst?)
        (("" (assert)
          (("" (split -1)
            (("1" (flatten)
              (("1" (replace -2 -3)
                (("1" (rewrite "subs_const") (("1" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten) (("2" (grind) nil nil)) nil)
             ("3" (replace -1)
              (("3" (rewrite "subs_unit") (("3" (grind) nil nil)) nil))
              nil)
             ("4" (flatten)
              (("4" (replace -2 -3)
                (("4" (rewrite "subs_pair") (("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("5" (flatten)
              (("5" (replace -2 -3)
                (("5" (rewrite "subs_app") (("5" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("6" (flatten)
              (("6" (replace -2 -3)
                (("6" (rewrite "subs_ac") (("6" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_opt formula-decl nil term_properties nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (ord const-decl "upto(5)" term_adt nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (subs_const formula-decl nil substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_num_arg_ge1 0
  (subs_num_arg_ge1-1 nil 3842185884
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "num_arg" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (prop)
                  (("1" (lemma "term_pair_eta")
                    (("1" (inst -1 "t")
                      (("1" (replace -1 :dir rl)
                        (("1" (rewrite "subs_pair")
                          (("1" (expand "num_arg" 1)
                            (("1" (hide-all-but 1)
                              (("1"
                                (lemma "num_arg_ge1")
                                (("1"
                                  (inst -1 "f" "subs(sigma)(term1(t))")
                                  (("1"
                                    (lemma "num_arg_ge1")
                                    (("1"
                                      (inst
                                       -1
                                       "f"
                                       "subs(sigma)(term2(t))")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (lemma "term_ac_app_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 2 :dir rl)
                            (("1" (rewrite "subs_ac")
                              (("1"
                                (expand "num_arg" 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -5 "ac_arg(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (string type-eq-decl nil strings nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_select 0
  (subs_select-1 nil 3827516185
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (inst 1 "num_arg(f, t)")
                  (("1" (prop)
                    (("1" (hide-all-but 1)
                      (("1" (expand "nice_ind?" 1)
                        (("1" (rewrite "num_arg_ge1") nil nil)) nil))
                      nil)
                     ("2" (replace -2 1)
                      (("2" (rewrite "subs_const")
                        (("2" (expand "select" 1)
                          (("2" (rewrite "subs_const") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "member(V(t), dom(sigma))")
                  (("1" (case "member(subs(sigma)(t), img(sigma))")
                    (("1" (hide -5 1)
                      (("1" (lemma "subterm_fin_set")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (inst 1 "subs(sigma)(t)")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "select_subterms")
                                  (("1" (inst? -1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -4 2 3)
                      (("2" (expand "member")
                        (("2" (expand "img" 1)
                          (("2" (expand "dom" -1)
                            (("2" (flatten)
                              (("2"
                                (inst 1 "V(t)")
                                (("2"
                                  (expand "subs" 1 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "member" 1)
                                      (("2"
                                        (expand "dom" 1)
                                        (("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "member" 1)
                    (("2" (expand "dom" 1)
                      (("2" (flatten)
                        (("2" (inst 1 "num_arg(f, t)")
                          (("2" (prop)
                            (("1" (expand "nice_ind?" 1)
                              (("1" (rewrite "num_arg_ge1") nil nil))
                              nil)
                             ("2" (expand "subs" -1)
                              (("2"
                                (replace -3 -1 :dir rl)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (expand "select" 1 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "select" 1 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst 1 "num_arg(f, t)")
                  (("3" (prop)
                    (("1" (hide-all-but 1)
                      (("1" (expand "nice_ind?" 1)
                        (("1" (rewrite "num_arg_ge1") nil nil)) nil))
                      nil)
                     ("2" (replace -1 1)
                      (("2" (rewrite "subs_unit")
                        (("2" (expand "select" 1)
                          (("2" (rewrite "subs_unit") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 2)
                  (("4" (rewrite "subs_pair")
                    (("4" (expand "select" 2 1)
                      (("4" (lift-if)
                        (("4" (prop)
                          (("1" (inst -4 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "f" "n" "sigma")
                                (("1"
                                  (prop)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 2 "i")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide -2 -3 2)
                                          (("1"
                                            (expand "num_arg" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nice_ind?" 1)
                                                (("1"
                                                  (expand
                                                   "nice_ind?"
                                                   -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -5 1)
                                          (("2"
                                            (rewrite "subs_pair")
                                            (("2"
                                              (expand "select" 1 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -2 1)
                                                    (("2"
                                                      (expand
                                                       "select"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "nice_ind?"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2"
                            (name-replace "n1"
                             "n - num_arg(f, subs(sigma)(term1(t)))")
                            (("2" (inst -3 "term2(t)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "f" "n1" "sigma")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst
                                         3
                                         "i + num_arg(f, term1(t))")
                                        (("1"
                                          (prop)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (replace -4 1)
                                            (("2"
                                              (rewrite "subs_pair")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "select" 1 1)
                                                  (("2"
                                                    (expand "n1" -2)
                                                    (("2"
                                                      (replace -2 1)
                                                      (("2"
                                                        (expand
                                                         "select"
                                                         1
                                                         2)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "n1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst 1 "num_arg(f, t)")
                  (("5" (prop)
                    (("1" (hide-all-but 1)
                      (("1" (expand "nice_ind?" 1)
                        (("1" (rewrite "num_arg_ge1") nil nil)) nil))
                      nil)
                     ("2" (replace -2 1)
                      (("2" (expand "num_arg" 1)
                        (("2" (rewrite "subs_app")
                          (("2" (expand "select" 1)
                            (("2" (rewrite "subs_app") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 2)
                  (("6" (rewrite "subs_ac")
                    (("6" (expand "select" 2)
                      (("6" (lift-if)
                        (("6" (prop)
                          (("1" (replace -1)
                            (("1" (inst -4 "ac_arg(t)")
                              (("1"
                                (prop)
                                (("1"
                                  (inst -1 "f" "n" "sigma")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 2 "i")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide -2 2)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (replace -5 1)
                                            (("2"
                                              (rewrite "subs_ac")
                                              (("2"
                                                (expand "select" 1 1)
                                                (("2"
                                                  (expand "select" 1 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 3 "num_arg(f, t)")
                            (("2" (prop)
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (expand "nice_ind?" 1)
                                  (("1"
                                    (rewrite "num_arg_ge1")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2 1)
                                (("2"
                                  (expand "num_arg" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "select" 1 2)
                                      (("2"
                                        (rewrite "subs_ac")
                                        (("2"
                                          (expand "select" 1 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (select_subterms formula-decl nil term_properties nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (subs_const formula-decl nil substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (term_opt formula-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (select def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_len 0
  (subs_len-1 nil 3807636360
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (subs def-decl "args" substitution nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_append 0
  (subs_append-1 nil 3807719446
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "subs" 1 1)
              (("2" (expand "subs" 1 3)
                (("2" (expand "append" 1 2)
                  (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_append2 0
  (subs_append2-1 nil 3827502580
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1)
            (("2" (expand "subs" 1 1)
              (("2" (expand "subs" 1 3)
                (("2" (inst? -1)
                  (("2" (replace -1 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subs_map 0
  (subs_map-1 nil 3807733475
   ("" (induct "args") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_cons 0
  (subs_cons-1 nil 3849638030
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subs" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "subs" 2 4)
                  (("2" (assert)
                    (("2" (expand "subs" 2 3)
                      (("2" (decompose-equality 2)
                        (("1" (expand "subs" 1 1)
                          (("1" (expand "subs" 1 3)
                            (("1" (expand "subs" 1 4)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst -1 "cdr(args1)")
                          (("2" (prop)
                            (("1" (inst?) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_get_term_from_args 0
  (subs_get_term_from_args-1 nil 3805815348
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "get_term_from_args" 1 1)
        (("1" (expand "subs" 1 2)
          (("1" (rewrite "subs_unit") (("1" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("t" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_term_from_args" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (case "null?(tail)")
                  (("1" (expand "subs" 1 2)
                    (("1" (expand "subs" 1 3)
                      (("1" (assert)
                        (("1" (expand "get_term_from_args" 1)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (expand "length" 1 1)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2 2) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (lemma "subs_pair")
                  (("2" (inst? -1)
                    (("2" (replace -1 2)
                      (("2" (hide -1)
                        (("2" (expand "subs" 2 3)
                          (("2" (expand "get_term_from_args" 2 2)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -2 1)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "subs" -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_pair formula-decl nil substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (subs_unit formula-decl nil substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (subs def-decl "args" substitution nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_get_ac_from_args 0
  (subs_get_ac_from_args-1 nil 3805818725
   ("" (skeep)
    (("" (expand "get_ac_from_args" 1 1)
      (("" (rewrite "subs_ac")
        (("" (expand "get_ac_from_args")
          (("" (lemma "subs_get_term_from_args")
            (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((get_ac_from_args const-decl "term" term_properties nil)
    (subs_get_term_from_args formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_ac formula-decl nil substitution nil))
   SHOSTAK))
 (subs_args_nth_TCC1 0
  (subs_args_nth_TCC1-1 nil 3807635947
   ("" (skeep) (("" (rewrite "subs_len") nil nil)) nil)
   ((subs_len formula-decl nil substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil))
   nil
   (subs_args_nth subtype "substitution.i"
    "below[length[term[constant, variable, f_symbol, ac_symbol]](subs(sigma)(args))]")))
 (subs_args_nth 0
  (subs_args_nth-1 nil 3807635947
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "subs" 2 1)
                  (("2" (expand "nth" 2 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (inst? -1) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "subs_len") nil nil)) nil)) nil))
    nil)
   ((subs_len formula-decl nil substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (subs def-decl "args" substitution nil))
   SHOSTAK))
 (subs_remove 0
  (subs_remove-1 nil 3807718457
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1 1)
            (("2" (expand "remove" 1 1)
              (("2" (lift-if)
                (("2" (assert)
                  (("2" (prop)
                    (("1" (expand "remove" 1) (("1" (assert) nil nil))
                      nil)
                     ("2" (expand "remove" 2 2)
                      (("2" (assert)
                        (("2" (expand "subs" 2 3)
                          (("2" (inst -1 "i-1" "sigma")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (args_subs_ac 0
  (args_subs_ac-1 nil 3807641380
   ("" (induct "t")
    (("1" (skolem 1 "a")
      (("1" (skeep)
        (("1" (rewrite "subs_const")
          (("1" (rewrite "get_args_not_pair_ac")
            (("1" (expand "map" 1 2)
              (("1" (expand "map" 1 2)
                (("1" (rewrite "subs_const")
                  (("1" (expand "map" 1)
                    (("1" (expand "map" 1)
                      (("1" (rewrite "get_args_not_pair_ac")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "X")
      (("2" (skeep)
        (("2" (name-replace "t1" "subs(sigma)(variable(X))")
          (("2" (lemma "get_args_not_pair_ac")
            (("2" (inst -1 "f" "variable(X)")
              (("2" (assert)
                (("2" (prop)
                  (("1" (replace -1 1)
                    (("1" (expand "map" 1 2)
                      (("1" (expand "map" 1 2)
                        (("1" (reveal -2)
                          (("1" (replace -1 1)
                            (("1" (expand "map")
                              (("1"
                                (expand "map" 1)
                                (("1"
                                  (expand "flatten")
                                  (("1"
                                    (expand "flatten")
                                    (("1"
                                      (rewrite "append_null")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (rewrite "subs_unit")
        (("3" (rewrite "get_args_not_pair_ac")
          (("1" (expand "map" 1 2)
            (("1" (expand "map" 1 2)
              (("1" (rewrite "subs_unit")
                (("1" (expand "map" 1)
                  (("1" (expand "map" 1)
                    (("1" (expand "flatten") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (rewrite "subs_pair")
            (("4" (rewrite "get_args_pair")
              (("4" (rewrite "get_args_pair")
                (("4" (inst? -1)
                  (("4" (inst? -2)
                    (("4" (assert)
                      (("4" (rewrite "subs_map")
                        (("4" (rewrite "subs_map")
                          (("4" (rewrite "subs_map")
                            (("4" (rewrite "subs_append")
                              (("4"
                                (rewrite "map_append2")
                                (("4"
                                  (rewrite "flatten_append")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("g" "arg"))
      (("5" (prop)
        (("5" (hide -1)
          (("5" (skeep)
            (("5" (rewrite "get_args_not_pair_ac")
              (("1" (rewrite "get_args_not_pair_ac")
                (("1" (expand "map" 1 2)
                  (("1" (expand "map" 1 2)
                    (("1" (expand "map" 1 1)
                      (("1" (expand "map" 1)
                        (("1" (rewrite "subs_app")
                          (("1" (rewrite "get_args_not_pair_ac")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (rewrite "subs_app") (("2" (grind) nil nil)) nil)
               ("3" (rewrite "subs_app") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("g" "arg"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (case "g = f")
            (("1" (replace -1 1)
              (("1" (hide -1)
                (("1" (rewrite "get_args_ac")
                  (("1" (rewrite "subs_ac")
                    (("1" (rewrite "get_args_ac")
                      (("1" (inst? -1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "get_args_not_pair_ac")
              (("1" (rewrite "get_args_not_pair_ac")
                (("1" (expand "map" 2 2)
                  (("1" (expand "map" 2 2)
                    (("1" (expand "map" 2 1)
                      (("1" (expand "map" 2)
                        (("1" (rewrite "subs_ac")
                          (("1" (rewrite "get_args_not_pair_ac")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (rewrite "subs_ac") (("2" (grind) nil nil)) nil)
               ("3" (rewrite "subs_ac") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (get_args_ac formula-decl nil term_properties nil)
    (subs_ac formula-decl nil substitution nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (get_args_pair formula-decl nil term_properties nil)
    (subs_append formula-decl nil substitution nil)
    (flatten_append formula-decl nil list_theory nil)
    (map_append2 formula-decl nil map_theory nil)
    (subs def-decl "args" substitution nil)
    (subs_map formula-decl nil substitution nil)
    (subs_pair formula-decl nil substitution nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (subs_unit formula-decl nil substitution nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (append_null formula-decl nil list_props nil)
    (subs_const formula-decl nil substitution nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (const adt-constructor-decl "[constant -> (const?)]" term_adt nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (flatten def-decl "list[T]" list_theory nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (mem_get_args_subs 0
  (mem_get_args_subs-1 nil 3827583585
   ("" (skeep)
    (("" (expand "get_args" -1)
      (("" (lemma "map_member3[nat, term]")
        (("" (inst? -1)
          (("" (replace -1 -2)
            (("" (hide -1)
              (("" (skeep)
                (("" (lemma "nth_from_min2max2[nat]")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (replace -1 -2)
                        (("" (hide -1)
                          (("" (lemma "subs_select")
                            (("" (inst? -1)
                              ((""
                                (prop)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (replace -2 -3)
                                    (("1"
                                      (inst? 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "get_args" 1)
                                          (("1"
                                            (lemma
                                             "map_member3[nat, term]")
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst 1 "i-1")
                                                    (("1"
                                                      (rewrite
                                                       "nth_from_min2max2")
                                                      (("1"
                                                        (rewrite
                                                         "from_min2max_len")
                                                        (("1"
                                                          (expand
                                                           "nice_ind?"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nice_ind?"
                                                         -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "nice_ind?"
                                                       -1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "from_min2max_len")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 1)
                                  (("2"
                                    (replace -2 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((string type-eq-decl nil strings nil)
    (select def-decl "term" term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (from_min2max_len formula-decl nil list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subs_select formula-decl nil substitution nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (map_member3 formula-decl nil map_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (subs_get_args1 0
  (subs_get_args1-1 nil 3807695140
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "select" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (hide 1)
                      (("1" (expand "num_arg" -2)
                        (("1" (assert)
                          (("1" (lemma "num_arg_ge1")
                            (("1" (inst? -1)
                              (("1"
                                (lemma "num_arg_ge1")
                                (("1"
                                  (inst -1 "f" "term2(t)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (prop)
                      (("2" (lemma "subs_ac")
                        (("2" (lemma "term_ac_app_eta")
                          (("2" (inst -1 "t")
                            (("2" (replace -1 1 rl)
                              (("2"
                                (rewrite "subs_ac")
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (lemma "get_args_ac")
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (reveal -5)
                                                (("2"
                                                  (inst -1 "ac_arg(t)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "num_arg"
                                                           -4)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (get_args_ac formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (select def-decl "term" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (subs_perm_get_args_ge1 0
  (subs_perm_get_args_ge1-1 nil 3807696136
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "select" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (expand "delete" 1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "term_pair_eta")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (rewrite "subs_pair")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (rewrite "get_args_pair")
                                              (("1"
                                                (lemma "perm?_append")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "subs_get_args1")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "perm?_ref")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "perm?_ref")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (rewrite "subs_pair")
                                    (("2"
                                      (rewrite "get_args_pair")
                                      (("2"
                                        (lemma "append_assoc[term]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (replace -1 2 rl)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma "term_pair_eta")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (replace -1 2 rl)
                                                    (("2"
                                                      (rewrite
                                                       "subs_pair")
                                                      (("2"
                                                        (replace -1 2)
                                                        (("2"
                                                          (rewrite
                                                           "get_args_pair")
                                                          (("2"
                                                            (lemma
                                                             "perm?_append")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (rewrite
                                                                     "perm?_ref")
                                                                    (("2"
                                                                      (reveal
                                                                       -5)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "term1(t)")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "i"
                                                                             "sigma")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "num_arg_ge1")
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "delete" 2 1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "subs_get_args1")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 1 rl t)
                                          (("1"
                                            (lemma "term_pair_eta")
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (rewrite "subs_pair")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (rewrite
                                                       "get_args_pair")
                                                      (("1"
                                                        (lemma
                                                         "perm?_append2")
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (rewrite
                                                                 "perm?_ref")
                                                                (("1"
                                                                  (rewrite
                                                                   "perm?_ref")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma "term_pair_eta")
                                    (("2"
                                      (inst -1 "t")
                                      (("2"
                                        (rewrite "subs_pair")
                                        (("2"
                                          (replace -1 2 rl)
                                          (("2"
                                            (rewrite "subs_pair")
                                            (("2"
                                              (replace -1 2 nil t)
                                              (("2"
                                                (rewrite
                                                 "get_args_pair")
                                                (("2"
                                                  (rewrite
                                                   "get_args_pair")
                                                  (("2"
                                                    (lemma
                                                     "perm?_append3")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "get_args(f)(subs(sigma)(term1(t)))"
                                                       "_"
                                                       "_"
                                                       "get_args(f)(subs(sigma)(term2(t)))")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 3)
                                                            (("2"
                                                              (reveal
                                                               -5)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "term2(t)")
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (lemma
                                                                           "num_arg_ge1")
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (expand "delete" 1)
                          (("1" (assert)
                            (("1" (rewrite "subs_ac")
                              (("1"
                                (case "f = ac_sym(t)")
                                (("1"
                                  (replace -1 1 rl t)
                                  (("1"
                                    (rewrite "get_args_ac")
                                    (("1"
                                      (lemma "term_ac_app_eta")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (rewrite "subs_ac")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (replace -3 1)
                                                (("1"
                                                  (rewrite
                                                   "get_args_ac"
                                                   1)
                                                  (("1"
                                                    (reveal -3)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "ac_arg(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "num_arg"
                                                               -4)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_arg_ge1 formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append_assoc formula-decl nil list_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (get_args_pair formula-decl nil term_properties nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (perm?_ref formula-decl nil equality nil)
    (perm?_append formula-decl nil equality nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append3 formula-decl nil equality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (perm?_append2 formula-decl nil equality nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (get_args_ac formula-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" equality nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (mem_get_args_subs4 0
  (mem_get_args_subs4-2 "" 3846517822
   ("" (skeep)
    (("" (rewrite "args_subs_ac" 1)
      (("" (rewrite "mem_flatten_map2")
        (("" (inst 1 "subs(sigma)(ti)")
          (("" (assert)
            (("" (rewrite "map_member4") (("" (inst 1 "ti") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((args_subs_ac formula-decl nil substitution nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (map_member4 formula-decl nil map_theory nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (mem_flatten_map2 formula-decl nil map_theory nil))
   shostak)
  (mem_get_args_subs4-1 nil 3846517719
   ("" (skeep)
    (("" (rewrite "args_subs_ac")
      (("" (rewrite "mem_flatten_map2")
        (("" (inst 1 "subs(sigma)(ti)")
          (("" (assert) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subs_equal? 0
  (subs_equal?-1 nil 3807636584
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "equal?" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (replace -2 1 nil rl)
                    (("1" (rewrite "subs_const")
                      (("1" (lemma "term_const_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 1)
                            (("1" (replace -1 1 rl)
                              (("1"
                                (rewrite "subs_const")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -2 2)
                    (("2" (lemma "term_variable_eta")
                      (("2" (inst? -1)
                        (("2" (replace -1 2)
                          (("2" (replace -1 2 rl)
                            (("2" (rewrite "equal?_ref") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -2 3)
                    (("3" (rewrite "subs_unit")
                      (("3" (case "t = unit")
                        (("1" (replace -1 3)
                          (("1" (rewrite "subs_unit")
                            (("1" (rewrite "equal?_ref") nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "term_pair_eta")
                    (("4" (inst-cp -1 "t")
                      (("4" (inst -1 "s")
                        (("4" (replace -1 4 rl t)
                          (("4" (replace -1 4 rl t)
                            (("4" (rewrite "subs_pair")
                              (("4"
                                (rewrite "subs_pair")
                                (("4"
                                  (expand "equal?" 4)
                                  (("4"
                                    (prop)
                                    (("1"
                                      (reveal -4)
                                      (("1"
                                        (inst -1 "term1(t)")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal -4)
                                      (("2"
                                        (inst -1 "term2(t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 1 2 3 4)
                    (("5" (lemma "term_app_eta")
                      (("5" (inst -1 "t")
                        (("5" (replace -1 1 rl)
                          (("5" (hide -1)
                            (("5" (rewrite "subs_app")
                              (("5"
                                (lemma "term_app_eta")
                                (("5"
                                  (inst -1 "s")
                                  (("5"
                                    (replace -1 1 rl)
                                    (("5"
                                      (rewrite "subs_app")
                                      (("5"
                                        (expand "equal?" 1)
                                        (("5"
                                          (assert)
                                          (("5"
                                            (reveal -3)
                                            (("5"
                                              (inst -1 "arg(t)")
                                              (("5"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "arg(s)"
                                                   "sigma")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (use
                                                       "equal?_num_arg2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_app?(t)")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (name-replace "g" "ac_sym(t)")
                          (("1" (case "num_arg(g, t) = num_arg(g, s)")
                            (("1" (hide 1 2 3 4 5)
                              (("1"
                                (skeep)
                                (("1"
                                  (lemma "term_ac_app_eta")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (hide -6 -7 -8 -9)
                                      (("1"
                                        (replace -5 -1 rl)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma "term_ac_app_eta")
                                              (("1"
                                                (inst -1 "t")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (rewrite "subs_ac")
                                                    (("1"
                                                      (rewrite
                                                       "subs_ac")
                                                      (("1"
                                                        (reveal -7)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (case
                                                               "equal?(t, s)")
                                                              (("1"
                                                                (lemma
                                                                 "perm_args_ac")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "ac_app(g, subs(sigma)(ac_arg(s)))"
                                                                   "g"
                                                                   "_")
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "are_ac?"
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             "args_subs_ac")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "subs_ac")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "ac_arg(t)"
                                                                                   "g"
                                                                                   "sigma")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "ac_arg(s)"
                                                                                     "g"
                                                                                     "sigma")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         1
                                                                                         rl)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (case
                                                                                             "num_arg(g, t) > 1")
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -7
                                                                                               -14)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         nil
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "subs_perm_get_args_ge1")
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "perm?(append(get_args(g)(subs(sigma)(select(g, t)(i))),
                   get_args(g)(subs(sigma)(delete(g, t)(i)))), get_args(g)(subs(sigma)(s)))")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "perm?_trans")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "get_args(g)(subs(sigma)(t))"
                                                                                                                       "_"
                                                                                                                       "_")
                                                                                                                      (("1"
                                                                                                                        (inst?
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "subs_perm_get_args_ge1")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "g"
                                                                                                                         "j"
                                                                                                                         "sigma"
                                                                                                                         "s")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "perm?_sym")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "get_args(g)(subs(sigma)(s))"
                                                                                                                               "append(get_args(g)(subs(sigma)(select(g, s)(j))),
                   get_args(g)(subs(sigma)(delete(g, s)(j))))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "perm?(append(get_args(g)(subs(sigma)(select(g, t)(i))),
                   get_args(g)(subs(sigma)(delete(g, t)(i)))), append(get_args(g)(subs(sigma)(select(g, s)(j))),
                   get_args(g)(subs(sigma)(delete(g, s)(j)))))")
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -11
                                                                                                                                       -10
                                                                                                                                       -9
                                                                                                                                       -8
                                                                                                                                       -7
                                                                                                                                       -6
                                                                                                                                       -5)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "perm?_trans")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "_"
                                                                                                                                           "_"
                                                                                                                                           "get_args(g)(subs(sigma)(s))")
                                                                                                                                          (("1"
                                                                                                                                            (inst?
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "perm?_append")
                                                                                                                                          (("2"
                                                                                                                                            (inst?
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -23)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "select(g, t)(i)")
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -10)
                                                                                                                                                        (("1"
                                                                                                                                                          (prop)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "select(g, s)(j)"
                                                                                                                                                             "sigma")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -9)
                                                                                                                                                                (("1"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "ac_perm_args2")
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (rewrite
                                                                                                                                                             "ac_select_size")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "is_ac_sym?"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (reveal
                                                                                                                                                     -23)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "delete(g, t)(i)")
                                                                                                                                                      (("2"
                                                                                                                                                        (prop)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "delete(g, s)(j)"
                                                                                                                                                           "sigma")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -9
                                                                                                                                                               -10)
                                                                                                                                                              (("1"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "ac_perm_args2")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "ac_delete_size")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "num_arg(g, t) = 1")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "subs_get_args1")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i")
                                                                                                    (("1"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -10)
                                                                                                            (("1"
                                                                                                              (reveal
                                                                                                               -17)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "subs_get_args1")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "g"
                                                                                                                         "j"
                                                                                                                         "sigma"
                                                                                                                         "s")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (reveal
                                                                                                                             -11)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -2
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -1
                                                                                                                                   -2
                                                                                                                                   -11)
                                                                                                                                  (("1"
                                                                                                                                    (reveal
                                                                                                                                     -20)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "select(g, t)(i)")
                                                                                                                                      (("1"
                                                                                                                                        (prop)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "select(g, s)(j)"
                                                                                                                                           "sigma")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -6)
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "ac_perm_args2")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (rewrite
                                                                                                                                           "ac_select_size")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "is_ac_sym?"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (reveal
                                                                                                                                                 -19)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (reveal
                                                                                                         -9
                                                                                                         -16)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "num_arg_ge1")
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "equal?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (reveal
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -8)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "i"
                                                                           "j")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "equal?_num_arg")
                              (("2"
                                (hide 2 3 4 5 6 7)
                                (("2"
                                  (inst -1 "g" "s" "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "equal?" 1)
                                      (("2"
                                        (expand "g")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (perm_args_ac formula-decl nil equality nil)
    (args_subs_ac formula-decl nil substitution nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_sym formula-decl nil equality nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (perm?_append formula-decl nil equality nil)
    (perm?_trans formula-decl nil equality nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" equality nil)
    (args type-eq-decl nil term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (are_ac? const-decl "bool" term_properties nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (equal?_num_arg formula-decl nil equality nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (equal?_num_arg2 formula-decl nil equality nil)
    (subs_app formula-decl nil substitution nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_pair formula-decl nil substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (equal?_ref formula-decl nil equality nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (term_const_eta formula-decl nil term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil))
   SHOSTAK))
 (subs_perm? 0
  (subs_perm?-2 nil 3807718806
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "perm?" -1)
              (("" (prop)
                (("1" (expand "subs" 1)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (skeep)
                  (("2" (hide 1)
                    (("2" (expand "perm?" 1)
                      (("2" (prop)
                        (("1" (hide -2 -3 1)
                          (("1" (reveal 2) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst 2 "i" "j")
                          (("1" (prop)
                            (("1" (hide -2)
                              (("1"
                                (rewrite "subs_args_nth")
                                (("1"
                                  (rewrite "subs_args_nth")
                                  (("1"
                                    (lemma "subs_equal?")
                                    (("1"
                                      (inst? -1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "subs_remove")
                              (("2"
                                (rewrite "subs_remove")
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (inst -1 "remove(args1, i)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (rewrite "remove_len")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "j")
                            (("2" (rewrite "subs_len") nil nil)) nil)
                           ("3" (rewrite "subs_len")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_remove formula-decl nil substitution nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_len formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (subs_equal? formula-decl nil substitution nil)
    (subs_args_nth formula-decl nil substitution nil)
    (subs_len formula-decl nil substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs def-decl "args" substitution nil)
    (perm? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (subs_perm?-1 nil 3807635528
   ("" (measure-induct "size(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "perm?" -1)
              (("" (prop)
                (("1" (expand "subs" 1)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (skeep)
                  (("2" (hide 1)
                    (("2" (expand "perm?" 1)
                      (("2" (prop)
                        (("1" (hide -2 -3 1)
                          (("1" (reveal 2) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst 2 "i" "j")
                          (("1" (prop)
                            (("1" (hide -2)
                              (("1"
                                (rewrite "subs_args_nth")
                                (("1"
                                  (rewrite "subs_args_nth")
                                  (("1"
                                    (lemma "subs_equal?")
                                    (("1"
                                      (inst? -1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "subs_remove")
                              (("2"
                                (rewrite "subs_remove")
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (inst -1 "remove(args1, i)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (subs_perm?_get_args 0
  (subs_perm?_get_args-1 nil 3844868626
   ("" (skeep)
    (("" (rewrite "subs_map")
      (("" (rewrite "subs_map")
        (("" (lemma "perm?_get_args_flatten")
          (("" (inst?)
            (("" (assert)
              (("" (hide 2)
                (("" (lemma "subs_perm?")
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_map formula-decl nil substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (perm?_get_args_flatten formula-decl nil equality nil)
    (subs_perm? formula-decl nil substitution nil)
    (string type-eq-decl nil strings nil)
    (subs def-decl "args" substitution nil))
   shostak))
 (subs_same_count_TCC1 0
  (subs_same_count_TCC1-1 nil 3839359766
   ("" (rewrite "equal?_equiv") nil nil)
   ((equal?_equiv formula-decl nil equality nil)) nil
   (subs_same_count subtype "equality.equal?"
    "equiv[term[constant, variable, f_symbol, ac_symbol]]")))
 (subs_same_count 0
  (subs_same_count-1 nil 3839429847
   ("" (skeep)
    (("" (lemma "perm?_equiv_same_count?")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "subs_perm?")
            (("" (inst?)
              (("" (inst -1 "args2")
                (("" (assert)
                  (("" (lemma "perm?_equiv_same_count?")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_equiv_same_count? formula-decl nil equality nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (subs def-decl "args" substitution nil)
    (subs_perm? formula-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_get_repeat_lst 0
  (subs_get_repeat_lst-1 nil 3807719739
   ("" (induct "i")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "get_repeat_lst" 1)
          (("2" (expand "subs" 1 1)
            (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (subs def-decl "args" substitution nil)
    (args type-eq-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (variable type-eq-decl nil term_properties nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (subs_get_repeat_lst_map 0
  (subs_get_repeat_lst_map-1 nil 3839431405
   ("" (induct "i") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_get_lst_mult 0
  (subs_get_lst_mult-1 nil 3807718990
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "get_lst_mult" 2 2)
                  (("2" (assert)
                    (("2" (expand "subs" 2 2)
                      (("2" (expand "subs" 2 2)
                        (("2" (expand "subs" 2 3)
                          (("2" (rewrite "subs_append")
                            (("2" (rewrite "subs_get_repeat_lst")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_get_repeat_lst formula-decl nil substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (subs_append formula-decl nil substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (subs_get_lst_mult2 0
  (subs_get_lst_mult2-1 nil 3839430706
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "map_append[args, args]")
                  (("2" (inst?)
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (expand "map" 2 3)
                          (("2" (expand "get_lst_mult" 2 2)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "subs_get_repeat_lst_map")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_append formula-decl nil more_map_props nil)
    (subs_get_repeat_lst_map formula-decl nil substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak))
 (perm?_get_args_subs 0
  (perm?_get_args_subs-1 nil 3807732580
   ("" (lemma "args_subs_ac")
    (("" (skeep)
      (("" (inst? -1)
        (("" (replace -1 1 nil t)
          (("" (lemma "args_subs_ac")
            (("" (inst? -1)
              (("" (replace -1 1 nil t)
                (("" (lemma "perm?_map_get_args")
                  (("" (rewrite "subs_map")
                    (("" (rewrite "subs_map")
                      (("" (inst? -1)
                        (("" (inst -1 "subs(sigma)(get_args(f)(s))")
                          (("" (assert)
                            (("" (expand "perm?" -1)
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_map_get_args formula-decl nil equality nil)
    (perm? const-decl "bool" equality nil)
    (subs def-decl "args" substitution nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (subs_map formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (args_subs_ac formula-decl nil substitution nil))
   SHOSTAK))
 (subs_flatten 0
  (subs_flatten-1 nil 3839431699
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1 1)
            (("2" (rewrite "subs_append")
              (("2" (expand "map" 1)
                (("2" (expand "flatten" 1 2)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_append formula-decl nil substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (flatten def-decl "list[T]" list_theory nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak))
 (vars_subs_t 0
  (vars_subs_t-1 nil 3827504369
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "subset?" 1)
              (("" (skolem 1 "X")
                (("" (prop)
                  (("" (lemma "term_opt")
                    (("" (inst? -1)
                      (("" (prop)
                        (("1" (replace -2 -3)
                          (("1" (hide-all-but -3)
                            (("1" (rewrite "subs_const")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (case "member(V(t), dom(sigma))")
                          (("1" (expand "member" 1)
                            (("1" (expand "union" 1)
                              (("1"
                                (prop)
                                (("1"
                                  (lemma "vars_finset")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst 1 "subs(sigma)(t)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "img" 1)
                                            (("1"
                                              (expand "member" 1)
                                              (("1"
                                                (inst 1 "V(t)")
                                                (("1"
                                                  (expand "member" -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "subs"
                                                       1
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member" 1)
                            (("2" (expand "dom" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "subs" -1)
                                  (("2"
                                    (replace -3 :dir rl)
                                    (("2"
                                      (replace -1 -4)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (replace -1)
                          (("3" (rewrite "subs_unit")
                            (("3" (hide-all-but -2)
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (replace -2)
                          (("4" (rewrite "subs_pair")
                            (("4" (expand "vars" -3)
                              (("4"
                                (expand "member" -3)
                                (("4"
                                  (expand "union" -3)
                                  (("4"
                                    (prop)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (reveal -3)
                                        (("1"
                                          (inst -1 "term1(t)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (expand "subset?" -1)
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand
                                                           "union")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (reveal -2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal -2)
                                      (("2"
                                        (inst -1 "term2(t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -1 "sigma")
                                            (("1"
                                              (expand "subset?" -1)
                                              (("1"
                                                (inst -1 "X")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2 -3)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (replace -2 -3)
                          (("5" (rewrite "subs_app")
                            (("5" (expand "vars" -3)
                              (("5"
                                (hide -1)
                                (("5"
                                  (reveal -3)
                                  (("5"
                                    (inst -1 "arg(t)")
                                    (("5"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (expand "subset?" -1)
                                          (("1"
                                            (inst -1 "X")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (reveal -4)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (replace -2 -3)
                          (("6" (rewrite "subs_ac")
                            (("6" (expand "vars" -3)
                              (("6"
                                (lemma "mem_union_map[term, variable]")
                                (("6"
                                  (inst? -1)
                                  (("6"
                                    (assert)
                                    (("6"
                                      (hide -4)
                                      (("6"
                                        (skolem -1 "ti_sigma")
                                        (("6"
                                          (lemma "subs_ac")
                                          (("6"
                                            (inst
                                             -1
                                             "ac_arg(t)"
                                             "ac_sym(t)"
                                             "sigma")
                                            (("6"
                                              (replace -1 -2 :dir rl)
                                              (("6"
                                                (replace -4 -2 :dir rl)
                                                (("6"
                                                  (hide -1)
                                                  (("6"
                                                    (flatten)
                                                    (("6"
                                                      (reveal -6)
                                                      (("6"
                                                        (lemma
                                                         "mem_get_args_subs")
                                                        (("6"
                                                          (inst? -1)
                                                          (("6"
                                                            (assert)
                                                            (("6"
                                                              (prop)
                                                              (("1"
                                                                (skolem
                                                                 -1
                                                                 "ti")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "get_args"
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "map_member3[nat, term]")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "nth_from_min2max2")
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "ti")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "sigma")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3
                                                                                         -5)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subset?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "X")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "union")
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "vars"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "mem_union_map[term, variable]")
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "ti")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "get_args")
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "map_member3[nat, term]")
                                                                                                                            (("1"
                                                                                                                              (inst?
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "n")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "nth_from_min2max2")
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "ac_select_size")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "is_ac_sym?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -5)
                                                                  (("2"
                                                                    (lemma
                                                                     "subterm_fin_set")
                                                                    (("2"
                                                                      (inst?
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skolem
                                                                           -1
                                                                           "s")
                                                                          (("2"
                                                                            (lemma
                                                                             "vars_subterm")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "X"
                                                                                 "ti_sigma"
                                                                                 "s")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "vars_finset")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "X")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "union"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 1
                                                                                                 "s")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (map_member3 formula-decl nil map_theory nil)
    (ac_select_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (length def-decl "nat" list_props nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (vars_subterm formula-decl nil term_properties nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (mem_get_args_subs formula-decl nil substitution nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (vars_finset formula-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (term_opt formula-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (basic_sub_no_effect 0
  (basic_sub_no_effect-1 nil 3831933581
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (expand "subs" 2)
          (("6" (inst? -1)
            (("6" (assert)
              (("6" (lemma "vars_ac2")
                (("6" (inst? -1) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil term_properties nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak))
 (basic_sub_elim_var 0
  (basic_sub_elim_var-1 nil 3835541890
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subs" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -3) (("1" (grind) nil nil)) nil)
                 ("2" (hide -3) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but -2) (("3" (grind) nil nil)) nil)
                 ("4" (expand "vars" -2)
                  (("4" (expand ("member" "union") -2)
                    (("4" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "vars" -2)
                  (("5" (inst -3 "arg(t)") (("5" (grind) nil nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 2 3 4 5)
                    (("1" (rewrite "vars_ac2")
                      (("1" (inst -3 "ac_arg(t)")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil term_properties nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (basic_sub_not_elim_var 0
  (basic_sub_not_elim_var-1 nil 3835542233
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "subs" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil)
                   ("4" (expand "vars" -2)
                    (("4" (expand ("member" "union") -2)
                      (("4" (prop)
                        (("1" (reveal -1)
                          (("1" (inst -1 "term1(t)")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "term2(t)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 1 2 3 4)
                    (("5" (reveal -1)
                      (("5" (expand "vars" -3)
                        (("5" (inst -1 "arg(t)")
                          (("5" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_app?(t)")
                    (("1" (hide 1 2 3 4 5)
                      (("1" (rewrite "vars_ac2")
                        (("1" (reveal -1)
                          (("1" (inst -1 "ac_arg(t)")
                            (("1" (lemma "term_ac_app_eta")
                              (("1"
                                (inst?)
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2 3 :dir rl)
                                        (("1"
                                          (rewrite "vars_ac2")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 7 8 9 -1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (Union const-decl "set" sets nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars_ac2 formula-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dom_basic_sub 0
  (dom_basic_sub-1 nil 3823280262
   ("" (skeep)
    (("" (expand "dom" 1)
      (("" (rewrite "subset_antisymmetric")
        (("1" (hide 2)
          (("1" (expand "subset?" 1)
            (("1" (skeep)
              (("1" (expand "member" -1)
                (("1" (expand "subs" -1)
                  (("1" (expand "subs" -1) (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?" 1)
          (("2" (skeep) (("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subs const-decl "term" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil))
   shostak))
 (dom_null 0
  (dom_null-1 nil 3825713351
   ("" (lemma "subset_antisymmetric[variable]")
    (("" (inst? -1)
      (("" (assert)
        (("" (hide 2)
          (("" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (dom_append 0
  (dom_append-1 nil 3827502281
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skolem 1 "X")
        (("" (prop)
          (("" (expand "dom" -1)
            (("" (expand "member" -1)
              (("" (flatten)
                (("" (expand "subs" 1)
                  (("" (rewrite "subs_append2")
                    (("" (expand "member" 2)
                      (("" (expand "union" 2)
                        (("" (flatten)
                          (("" (expand "member" 3)
                            (("" (expand "dom" 3)
                              ((""
                                (flatten)
                                ((""
                                  (expand "subs" -1)
                                  ((""
                                    (replace -1 1)
                                    (("" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (union const-decl "set" sets nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_append2 formula-decl nil substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil))
   shostak))
 (img_basic_sub 0
  (img_basic_sub-1 nil 3823280584
   ("" (skeep)
    (("" (rewrite "subset_antisymmetric")
      (("1" (grind) nil nil)
       ("2" (hide 2)
        (("2" (case "t = variable(X)")
          (("1" (grind) nil nil)
           ("2" (expand "subset?" 2)
            (("2" (skeep)
              (("2" (case "x = t")
                (("1" (replace -1 2)
                  (("1" (expand "member" 2)
                    (("1" (expand "img" 2)
                      (("1" (inst 2 "X")
                        (("1" (prop)
                          (("1" (expand "dom" 1)
                            (("1" (expand "member" 1)
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt
     nil))
   shostak))
 (img_null 0
  (img_null-1 nil 3825713276
   ("" (lemma "subset_antisymmetric[term]")
    (("" (inst? -1)
      (("" (assert)
        (("" (hide 2)
          (("" (prop)
            (("1" (expand "subset?" 1)
              (("1" (skeep)
                (("1" (expand "img" -1)
                  (("1" (expand "member" -1 1)
                    (("1" (skeep)
                      (("1" (lemma "dom_null") (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (dom_null formula-decl nil substitution nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (subs_no_effect_t 0
  (subs_no_effect_t-1 nil 3827593353
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (replace -2 1)
                  (("1" (rewrite "subs_const") nil nil)) nil)
                 ("2" (expand "disjoint?" -4)
                  (("2" (expand "empty?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "intersection" 1)
                        (("2" (expand "member" 1 1)
                          (("2" (prop)
                            (("1" (expand "member" 1)
                              (("1"
                                (expand "dom" 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "subs" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "vars" 1)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1 1)
                  (("3" (rewrite "subs_unit") nil nil)) nil)
                 ("4" (replace -2 1)
                  (("4" (replace -2 -4)
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "vars" -4)
                        (("4" (inst-cp -3 "term1(t)")
                          (("4" (prop)
                            (("1" (inst -1 "sigma")
                              (("1"
                                (prop)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (inst -4 "term2(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -1 "sigma")
                                        (("1"
                                          (prop)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 -2 -3 2)
                                            (("2"
                                              (expand "disjoint?" 1)
                                              (("2"
                                                (expand "empty?" 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "disjoint?"
                                                     -2)
                                                    (("2"
                                                      (expand
                                                       "empty?"
                                                       -2)
                                                      (("2"
                                                        (inst -2 "x")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 -2 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 1)
                  (("5" (replace -2 -4)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "vars" -4)
                        (("5" (inst -3 "arg(t)")
                          (("5" (prop)
                            (("1" (inst -1 "sigma")
                              (("1" (assert) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 1)
                  (("6" (rewrite "subs_ac")
                    (("6" (inst -3 "ac_arg(t)")
                      (("6" (prop)
                        (("1" (inst? -1)
                          (("1" (prop)
                            (("1" (replace -1 1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "vars_ac")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (typepred "ac_arg(t)")
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "disjoint?" 1)
                                        (("2"
                                          (expand "empty?" 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "disjoint?" -5)
                                              (("2"
                                                (expand "empty?" -5)
                                                (("2"
                                                  (inst -5 "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       -2)
                                                      (("2"
                                                        (expand
                                                         "intersection"
                                                         -2)
                                                        (("2"
                                                          (expand
                                                           "intersection"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             1
                                                             1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "vars_ac2")
                                                                    (("2"
                                                                      (inst?
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union const-decl "set" sets nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil term_properties nil)
    (vars_ac formula-decl nil term_properties nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_unit formula-decl nil substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs const-decl "term" substitution nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (subs_const formula-decl nil substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (term_opt formula-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_no_effect_args 0
  (subs_no_effect_args-1 nil 3849638234
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subs" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "subs_no_effect_t")
                  (("2" (inst -1 "sigma" "car(args)")
                    (("2" (prop)
                      (("1" (replace -1)
                        (("1" (inst -2 "cdr(args)")
                          (("1" (prop)
                            (("1" (inst -1 "sigma")
                              (("1"
                                (prop)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (decompose-equality 2)
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "disjoint?" 1)
                                  (("2"
                                    (expand "empty?" 1)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand
                                         ("member" "intersection")
                                         -1)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "disjoint?" -4)
                                            (("2"
                                              (expand "empty?" -4)
                                              (("2"
                                                (inst -4 "x")
                                                (("2"
                                                  (expand
                                                   ("member"
                                                    "intersection")
                                                   3)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "disjoint?" 1)
                        (("2" (expand "empty?" 1)
                          (("2" (skeep)
                            (("2" (expand ("member" "intersection") -1)
                              (("2"
                                (prop)
                                (("2"
                                  (expand "disjoint?" -4)
                                  (("2"
                                    (expand "empty?" -4)
                                    (("2"
                                      (inst -4 "x")
                                      (("2"
                                        (expand
                                         ("member" "intersection")
                                         3)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_no_effect_t formula-decl nil substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs const-decl "term" substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (subs def-decl "args" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (apply_sub_elim_var_t 0
  (apply_sub_elim_var_t-1 nil 3827590809
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (replace -2 -5)
                  (("1" (rewrite "subs_const")
                    (("1" (hide-all-but -5) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 -5)
                  (("2" (hide -1 -2 -3)
                    (("2" (case "member(V(t), dom(sigma))")
                      (("1" (lemma "vars_finset")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (inst 1 "subs(sigma)(t)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (reveal -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (expand "img" 1)
                                          (("1"
                                            (inst 1 "V(t)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "subs" 1 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "member" 1)
                        (("2" (expand "dom" 1)
                          (("2" (flatten)
                            (("2" (expand "subs" -1)
                              (("2"
                                (replace -1 -3)
                                (("2"
                                  (expand "vars" -3)
                                  (("2"
                                    (hide 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1 -4)
                  (("3" (rewrite "subs_unit")
                    (("3" (hide-all-but -4) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 -5)
                  (("4" (rewrite "subs_pair")
                    (("4" (expand "vars" -5)
                      (("4" (expand "member" -5)
                        (("4" (hide -1)
                          (("4" (expand "union" -4)
                            (("4" (prop)
                              (("1"
                                (inst -3 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "X" "sigma")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide -1)
                  (("5" (replace -1 -4)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "vars" -4)
                        (("5" (inst -2 "arg(t)")
                          (("5" (prop)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (hide -1)
                  (("6" (replace -1 -4)
                    (("6" (rewrite "subs_ac")
                      (("6" (expand "vars" -4)
                        (("6" (hide -2)
                          (("6" (lemma "mem_union_map[term, variable]")
                            (("6" (inst? -1)
                              (("6"
                                (assert)
                                (("6"
                                  (hide -4)
                                  (("6"
                                    (skolem -1 "ti_sigma")
                                    (("6"
                                      (flatten)
                                      (("6"
                                        (lemma "mem_get_args_subs")
                                        (("6"
                                          (lemma "subs_ac")
                                          (("6"
                                            (inst? -1)
                                            (("6"
                                              (replace -1 -3 :dir rl)
                                              (("6"
                                                (hide -1)
                                                (("6"
                                                  (inst? -1)
                                                  (("6"
                                                    (assert)
                                                    (("6"
                                                      (prop)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         "ti")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -4)
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (reveal
                                                                 -7)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "ti")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst?
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "get_args"
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "map_member3[nat, term]")
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "ac_select_size")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "is_ac_sym?"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "subterm_fin_set")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skolem
                                                               -1
                                                               "s")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (lemma
                                                                   "vars_finset")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "s")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "vars_subterm")
                                                                            (("2"
                                                                              (inst?
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "ti_sigma")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (map_member3 formula-decl nil map_theory nil)
    (vars_subterm formula-decl nil term_properties nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (mem_get_args_subs formula-decl nil substitution nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (vars_finset formula-decl nil term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (subs_const formula-decl nil substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (term_opt formula-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (vars_img_append 0
  (vars_img_append-1 nil 3827503291
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skolem 1 "X")
        (("" (prop)
          (("" (lemma "vars_finset")
            (("" (inst? -1)
              (("" (assert)
                (("" (hide -2)
                  (("" (skeep)
                    (("" (expand "member" -1)
                      (("" (expand "img" -1)
                        (("" (skolem -1 "Y")
                          (("" (flatten)
                            (("" (expand "subs" -2)
                              ((""
                                (rewrite "subs_append2")
                                ((""
                                  (name-replace
                                   "s"
                                   "subs(sigma)(variable(Y))")
                                  ((""
                                    (replace -2 -3 :dir rl)
                                    ((""
                                      (lemma "vars_subs_t")
                                      ((""
                                        (inst? -1)
                                        ((""
                                          (expand "subset?" -1)
                                          ((""
                                            (inst -1 "X")
                                            ((""
                                              (prop)
                                              ((""
                                                (expand "member" -1)
                                                ((""
                                                  (expand "union" -1)
                                                  ((""
                                                    (expand "member" 1)
                                                    ((""
                                                      (expand
                                                       "union"
                                                       1)
                                                      ((""
                                                        (prop)
                                                        ((""
                                                          (hide -3 -4)
                                                          ((""
                                                            (expand
                                                             "s"
                                                             -1)
                                                            ((""
                                                              (lemma
                                                               "vars_subs_t")
                                                              ((""
                                                                (inst?
                                                                 -1)
                                                                ((""
                                                                  (expand
                                                                   "subset?"
                                                                   -1)
                                                                  ((""
                                                                    (inst
                                                                     -1
                                                                     "X")
                                                                    ((""
                                                                      (prop)
                                                                      ((""
                                                                        (expand
                                                                         "union"
                                                                         -1)
                                                                        ((""
                                                                          (expand
                                                                           "member"
                                                                           -1
                                                                           1)
                                                                          ((""
                                                                            (prop)
                                                                            ((""
                                                                              (expand
                                                                               "vars"
                                                                               -1)
                                                                              ((""
                                                                                (expand
                                                                                 "member"
                                                                                 -1)
                                                                                ((""
                                                                                  (expand
                                                                                   "singleton"
                                                                                   -1)
                                                                                  ((""
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    ((""
                                                                                      (hide
                                                                                       -2)
                                                                                      ((""
                                                                                        (reveal
                                                                                         -7
                                                                                         -8)
                                                                                        ((""
                                                                                          (replace
                                                                                           -3
                                                                                           :dir
                                                                                           rl)
                                                                                          ((""
                                                                                            (case
                                                                                             "member(X, dom(sigma))")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "apply_sub_elim_var_t")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "X")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -6)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "vars_subs_t")
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "subset?"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "X")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "union"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "member"
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "dom_append")
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "X")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "union"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "dom"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subs"
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (reveal
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "apply_sub_elim_var_t")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "X"
                                                                                                                             "delta"
                                                                                                                             "variable(X)")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (append def-decl "list[T]" list_props nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vars_subs_t formula-decl nil substitution nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom_append formula-decl nil substitution nil)
    (apply_sub_elim_var_t formula-decl nil substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars_finset formula-decl nil term_properties nil))
   shostak))
 (var_dom_sub_dif_term 0
  (var_dom_sub_dif_term-1 nil 3827257935
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (expand "vars" -3)
            (("4" (rewrite "subs_pair")
              (("4" (expand "union" -3)
                (("4" (expand "member" -3 1)
                  (("4" (prop)
                    (("1" (case "subs(sigma)(t1) /= t1")
                      (("1" (hide -2 -3 -4 -5)
                        (("1" (grind)
                          (("1" (decompose-equality -1) nil nil)) nil))
                        nil)
                       ("2" (hide -5 -3)
                        (("2" (inst -2 "X" "sigma")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (case "subs(sigma)(t2) /= t2")
                      (("1" (hide -2 -3 -4 -5)
                        (("1" (grind)
                          (("1" (decompose-equality -1) nil nil)) nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "arg"))
      (("5" (prop)
        (("5" (skeep)
          (("5" (rewrite "subs_app")
            (("5" (inst -1 "X" "sigma")
              (("5" (expand "vars" -2)
                (("5" (assert)
                  (("5" (flatten)
                    (("5" (decompose-equality -3) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("f" "arg"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (rewrite "subs_ac")
            (("6" (decompose-equality)
              (("6" (inst? -2)
                (("6" (assert)
                  (("6" (lemma "vars_ac2")
                    (("6" (inst? -1) (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (vars_ac2 formula-decl nil term_properties nil)
    (subs_ac formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (subs_pair formula-decl nil substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (subs const-decl "term" substitution nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (/= const-decl "boolean" notequal nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak))
 (idempotent_disjoint_dom_img 0
  (idempotent_disjoint_dom_img-1 nil 3826486318
   ("" (skeep)
    (("" (expand "idempotent?" -1)
      (("" (expand "disjoint?" 1)
        (("" (expand "empty?" 1)
          (("" (skolem 1 "X")
            (("" (expand "member" -2)
              (("" (expand "intersection" -2)
                (("" (flatten)
                  (("" (lemma "vars_finset")
                    (("" (inst? -1)
                      (("" (assert)
                        (("" (hide -4)
                          (("" (skolem -1 "t")
                            (("" (flatten)
                              ((""
                                (expand "img" -1)
                                ((""
                                  (expand "member" -1 1)
                                  ((""
                                    (skolem -1 "Y")
                                    ((""
                                      (inst -3 "Y")
                                      ((""
                                        (flatten)
                                        ((""
                                          (replace -2 -4)
                                          ((""
                                            (hide -1 -2)
                                            ((""
                                              (lemma
                                               "var_dom_sub_dif_term")
                                              ((""
                                                (inst? -1)
                                                ((""
                                                  (inst -1 "X")
                                                  ((""
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent? const-decl "bool" substitution nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (var_dom_sub_dif_term formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (/= const-decl "boolean" notequal nil)
    (vars_finset formula-decl nil term_properties nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   shostak))
 (idempotent_disjoint_dom_img2 0
  (idempotent_disjoint_dom_img2-1 nil 3827592657
   ("" (skeep)
    (("" (expand "idempotent?" 1)
      (("" (skeep)
        (("" (case "member(X, dom(sigma))")
          (("1" (lemma "subs_no_effect_t")
            (("1" (inst -1 "sigma" "subs(sigma)(X)")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (expand "disjoint?" 1)
                    (("1" (expand "empty?" 1)
                      (("1" (skeep)
                        (("1" (expand "member" -1)
                          (("1" (expand "intersection" -1)
                            (("1" (prop)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "disjoint?" -3)
                                  (("1"
                                    (expand "empty?" -3)
                                    (("1"
                                      (inst -3 "x")
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (expand "intersection" 1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (lemma "vars_finset")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "subs(sigma)(X)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "img"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           1
                                                           1)
                                                          (("1"
                                                            (reveal -3)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "X")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "member" 1)
            (("2" (expand "dom" 1)
              (("2" (flatten)
                (("2" (replace -1 1)
                  (("2" (expand "subs" -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent? const-decl "bool" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs const-decl "term" substitution nil)
    (empty? const-decl "bool" sets nil)
    (vars_finset formula-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs_no_effect_t formula-decl nil substitution nil))
   shostak))
 (apply_sub_elim_var_t2 0
  (apply_sub_elim_var_t2-1 nil 3832791023
   ("" (skeep)
    (("" (lemma "apply_sub_elim_var_t")
      (("" (inst? -1)
        (("" (assert)
          (("" (lemma "idempotent_disjoint_dom_img")
            (("" (inst? -1)
              (("" (assert)
                (("" (expand "disjoint?" -1)
                  (("" (expand "empty?")
                    (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_elim_var_t formula-decl nil substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (empty? const-decl "bool" sets nil)
    (idempotent_disjoint_dom_img formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_singleton 0
  (subs_singleton-1 nil 3825698799
   ("" (skeep)
    (("" (grind)
      (("" (lemma "subset_antisymmetric[term]")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (prop)
                (("1" (expand "subset?" 1)
                  (("1" (skeep)
                    (("1" (expand "subs" -1)
                      (("1" (expand "member" -1)
                        (("1" (skolem -1 "s")
                          (("1" (expand "singleton" -1)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subset?" 1)
                  (("2" (skeep)
                    (("2" (expand "member" -1)
                      (("2" (expand "singleton" -1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (subs const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (img_append_subset 0
  (img_append_subset-1 nil 3832613431
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skolem 1 "t")
        (("" (prop)
          (("" (expand "member" 1)
            (("" (expand "union" 1)
              (("" (prop)
                (("" (expand "img" -1)
                  (("" (expand "member" -1 1)
                    (("" (skolem -1 "X")
                      (("" (prop)
                        (("" (expand "subs" -2)
                          (("" (rewrite "subs_append2")
                            (("" (case "member(X, dom(delta))")
                              (("1"
                                (expand "image" 1)
                                (("1"
                                  (expand "image" 1)
                                  (("1"
                                    (expand "member" 1)
                                    (("1"
                                      (inst
                                       1
                                       "subs(delta)(variable(X))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "img" 1)
                                        (("2"
                                          (inst 1 "X")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "member" 1)
                                (("2"
                                  (expand "dom" 1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "subs" -1)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (case
                                           "member(X, dom(sigma))")
                                          (("1"
                                            (hide 1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (lemma "dom_append")
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (hide 2 3)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (subs const-decl "term" substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (dom_append formula-decl nil substitution nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_append2 formula-decl nil substitution nil)
    (member const-decl "bool" sets nil))
   shostak))
 (idempotent_append 0
  (idempotent_append-1 nil 3835970041
   ("" (skeep)
    (("" (lemma "idempotent_disjoint_dom_img2")
      (("" (inst -1 "append(sigma, delta)")
        (("" (assert)
          (("" (hide 2)
            (("" (expand "disjoint?" 1)
              (("" (expand "empty?" 1)
                (("" (skolem 1 "X")
                  (("" (expand "member" -1)
                    (("" (expand "intersection" -1)
                      (("" (prop)
                        (("" (rewrite "vars_finset")
                          (("" (skolem -2 "t")
                            (("" (prop)
                              ((""
                                (expand "member" -2)
                                ((""
                                  (expand "img" -2)
                                  ((""
                                    (skolem -2 "Y")
                                    ((""
                                      (prop)
                                      ((""
                                        (expand "subs" -3)
                                        ((""
                                          (case
                                           "member(Y, dom(delta))")
                                          (("1"
                                            (rewrite "subs_append2")
                                            (("1"
                                              (name-replace
                                               "t_delta"
                                               "subs(delta)(variable(Y))")
                                              (("1"
                                                (case
                                                 "member(t_delta, img(delta))")
                                                (("1"
                                                  (replace
                                                   -5
                                                   -6
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (lemma
                                                     "vars_subs_t")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "subset?"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "X")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -4
                                                                    -10))
                                                                  (("1"
                                                                    (lemma
                                                                     "dom_append")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "X")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -1)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (hide
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -10)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "idempotent_disjoint_dom_img")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "disjoint?"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?"
                                                                                     -4)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "X")
                                                                                      (("2"
                                                                                        (expand
                                                                                         ("member"
                                                                                          "intersection")
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "dom_append")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (expand
                                                                       "subset?"
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "X")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -4
                                                                             -5
                                                                             -6)
                                                                            (("2"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -1)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "apply_sub_elim_var_t")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -7))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "idempotent_disjoint_dom_img")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    -3
                                                                                    -7))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "idempotent_disjoint_dom_img")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "disjoint?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "empty?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "X")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 ("member"
                                                                                                  "intersection")
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "vars_finset")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "t_delta")
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "t_delta" 1)
                                                  (("2"
                                                    (expand "member" 1)
                                                    (("2"
                                                      (expand "img" 1)
                                                      (("2"
                                                        (inst 1 "Y")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "subs"
                                                             1
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "dom_append")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "subset?" -1)
                                                (("2"
                                                  (inst -1 "Y")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("2"
                                                          (rewrite
                                                           "subs_append2")
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "dom"
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "subs"
                                                                   -2)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (lemma
                                                                         "dom_append")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "X")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "union")
                                                                                   -1)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "idempotent_disjoint_dom_img")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "disjoint?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "X")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   ("member"
                                                                                                    "intersection")
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "vars_finset")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "t")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "img"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "Y")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "subs"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "disjoint?"
                                                                                       -8)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         -8)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -8
                                                                                           "X")
                                                                                          (("2"
                                                                                            (expand
                                                                                             ("member"
                                                                                              "intersection")
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "vars_finset")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "t")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       ("member"
                                                                                                        "img")
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "Y")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_disjoint_dom_img2 formula-decl nil substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (vars_finset formula-decl nil term_properties nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil)
    (apply_sub_elim_var_t formula-decl nil substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil substitution nil)
    (idempotent? const-decl "bool" substitution nil)
    (dom_append formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (idempotent_subs_subs_t 0
  (idempotent_subs_subs_t-1 nil 3838415575
   ("" (skeep)
    (("" (lemma "subs_no_effect_t")
      (("" (inst -1 "sigma" "subs(sigma)(t)")
        (("" (assert)
          (("" (expand "disjoint?" 1)
            (("" (expand "empty?" 1)
              (("" (lemma "apply_sub_elim_var_t2")
                (("" (inst?)
                  (("" (skeep)
                    (("" (inst -1 "x")
                      (("" (expand ("member" "intersection") -2)
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_no_effect_t formula-decl nil substitution nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (apply_sub_elim_var_t2 formula-decl nil substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_divide_not_var 0
  (subs_divide_not_var-1 nil 3835542607
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subs" 1)
            (("" (expand "subs" 1)
              (("" (lift-if)
                (("" (assert)
                  (("" (prop)
                    (("" (case "var?(subs(cdr(sigma))(X))")
                      (("1" (hide -2)
                        (("1" (expand "subs" -1)
                          (("1"
                            (name-replace "t"
                             "subs(cdr(sigma))(variable(X))")
                            (("1" (lemma "term_variable_eta")
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "subs" 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst
                                             3
                                             "null"
                                             "cdr(sigma)"
                                             "car(sigma)"
                                             "V(t)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "append" 3)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (reveal -2)
                                                    (("2"
                                                      (expand "subs" 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (inst -1 "cdr(sigma)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst
                                     4
                                     "cons(car(sigma), delta)"
                                     "delta2"
                                     "sigma_basic"
                                     "Y")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "append" 4)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (decompose-equality 4)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (basic_sub_info 0
  (basic_sub_info-1 nil 3837871004
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "sigma" "cons((X, t), null)")
        (("" (flatten)
          (("" (case "dom(sigma) = singleton(X)")
            (("1" (assert)
              (("1" (case "img(sigma) = singleton(t)")
                (("1" (assert)
                  (("1" (lemma "idempotent_disjoint_dom_img2")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "disjoint?" 1)
                          (("1" (expand "empty?" 1)
                            (("1" (skolem 1 "Y")
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (expand "member" -1)
                                    (("1"
                                      (expand "intersection" -1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (rewrite "vars_singleton")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (rewrite "subset_antisymmetric")
                    (("1" (hide 2)
                      (("1" (expand "subset?" 1)
                        (("1" (expand "sigma") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "sigma" 1)
                      (("2" (expand "subset?" 1)
                        (("2" (skolem 1 "s")
                          (("2" (prop)
                            (("2" (expand "member" 1)
                              (("2"
                                (expand "img" 1)
                                (("2"
                                  (inst 1 "X")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3)
              (("2" (rewrite "subset_antisymmetric")
                (("1" (hide 2)
                  (("1" (expand "subset?" 1)
                    (("1" (skolem 1 "Y")
                      (("1" (prop)
                        (("1" (lemma "supset_dom_correct")
                          (("1" (expand "member" -2)
                            (("1" (expand "dom" -2)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "sigma" -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subset?" 1)
                  (("2" (expand "sigma" 1) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (supset_dom_correct formula-decl nil substitution nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subs const-decl "term" substitution nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (vars_singleton formula-decl nil term_properties nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (idempotent_disjoint_dom_img2 formula-decl nil substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (set type-eq-decl nil sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (basic_sub_well_formed 0
  (basic_sub_well_formed-1 nil 3850242798
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "well_formed?" 1)
          (("" (skolem 1 "X1")
            (("" (prop)
              (("1" (expand "subs" -1) (("1" (grind) nil nil)) nil)
               ("2" (skeep)
                (("2" (expand "subs" -1)
                  (("2" (expand "subs" -1)
                    (("2" (expand "subs" -1 2)
                      (("2" (expand "subs" -1)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed? const-decl "bool" substitution nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (subterms_subs 0
  (subterms_subs-1 nil 3832495759
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subset?" 1)
            (("" (skolem 1 "s")
              (("" (prop)
                (("" (lemma "term_opt")
                  (("" (inst? -1)
                    (("" (prop)
                      (("1" (replace -2)
                        (("1" (rewrite "subs_const")
                          (("1" (expand "subterms" -4)
                            (("1" (expand "member" -4)
                              (("1"
                                (expand "singleton" -4)
                                (("1"
                                  (expand "member" 1)
                                  (("1"
                                    (expand "union" 1)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "image" 1)
                                        (("1"
                                          (expand "image" 1)
                                          (("1"
                                            (expand "member" 1)
                                            (("1"
                                              (inst 1 "t")
                                              (("1"
                                                (replace -2 1)
                                                (("1"
                                                  (rewrite
                                                   "subs_const")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "subterms" 1)
                                                (("2"
                                                  (expand
                                                   "singleton"
                                                   1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "member(V(t), dom(sigma))")
                        (("1" (expand "member" 1)
                          (("1" (expand "union" 1)
                            (("1" (prop)
                              (("1"
                                (rewrite "subterm_fin_set")
                                (("1"
                                  (inst 2 "subs(sigma)(t)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "member" 2)
                                      (("1"
                                        (expand "img" 2)
                                        (("1"
                                          (inst 2 "V(t)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "subs" 2 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "member" 1)
                          (("2" (expand "dom" 1)
                            (("2" (flatten)
                              (("2"
                                (expand "subs" -1)
                                (("2"
                                  (replace -3 :dir rl)
                                  (("2"
                                    (expand "member" 1)
                                    (("2"
                                      (expand "union" 1)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "member" 1)
                                          (("2"
                                            (expand "image" 1)
                                            (("2"
                                              (expand "image" 1)
                                              (("2"
                                                (inst 1 "t")
                                                (("1"
                                                  (replace -1 -5)
                                                  (("1"
                                                    (expand
                                                     "subterms"
                                                     -5)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         -5)
                                                        (("1"
                                                          (expand
                                                           "singleton"
                                                           -5)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "subterms" 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "singleton"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (replace -1 -3)
                        (("3" (rewrite "subs_unit")
                          (("3" (expand "subterms" -3)
                            (("3" (expand "member" -3)
                              (("3"
                                (expand "singleton" -3)
                                (("3"
                                  (replace -3)
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (expand "member" 1)
                                      (("3"
                                        (expand "union" 1)
                                        (("3"
                                          (prop)
                                          (("3"
                                            (expand "image" 1)
                                            (("3"
                                              (expand "image" 1)
                                              (("3"
                                                (expand "member" 1)
                                                (("3"
                                                  (inst 1 "unit")
                                                  (("1"
                                                    (rewrite
                                                     "subs_unit")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "subterms"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "singleton"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (replace -2)
                        (("4" (rewrite "subs_pair")
                          (("4" (expand "subterms" -4)
                            (("4" (expand "member" -4)
                              (("4"
                                (expand "union" -4)
                                (("4"
                                  (prop)
                                  (("1"
                                    (inst -4 "term1(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -1 "sigma")
                                        (("1"
                                          (expand "subset?" -1)
                                          (("1"
                                            (inst -1 "s")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "member" -1)
                                                (("1"
                                                  (expand "union" -1)
                                                  (("1"
                                                    (expand "member" 1)
                                                    (("1"
                                                      (expand
                                                       "union"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "image"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "image"
                                                               -1)
                                                              (("1"
                                                                (skolem
                                                                 -1
                                                                 "s1")
                                                                (("1"
                                                                  (typepred
                                                                   "s1")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "image"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "image"
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "s1")
                                                                            (("1"
                                                                              (expand
                                                                               "subterms"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "union"
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member"
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -4 "term2(t)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (expand "subset?" -1)
                                          (("1"
                                            (inst -1 "s")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "member" -1)
                                                (("1"
                                                  (expand "union" -1)
                                                  (("1"
                                                    (expand "member" 1)
                                                    (("1"
                                                      (expand
                                                       "union"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "image")
                                                          (("1"
                                                            (expand
                                                             "image")
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "s1")
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "s1")
                                                                    (("1"
                                                                      (typepred
                                                                       "s1")
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "subterms"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "union"
                                                                             1)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "member"
                                                                                 2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (replace -2)
                        (("5" (rewrite "subs_app")
                          (("5" (expand "subterms" -4)
                            (("5" (expand "member" -4)
                              (("5"
                                (expand "union" -4)
                                (("5"
                                  (prop)
                                  (("1"
                                    (expand "member" 1)
                                    (("1"
                                      (expand "union" 1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "image" 1)
                                          (("1"
                                            (expand "image" 1)
                                            (("1"
                                              (expand "member" 1)
                                              (("1"
                                                (inst 1 "t")
                                                (("1"
                                                  (replace -3 1)
                                                  (("1"
                                                    (rewrite
                                                     "subs_app")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -4 "arg(t)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -1 "sigma")
                                        (("1"
                                          (expand "subset?" -1)
                                          (("1"
                                            (inst -1 "s")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "member" -1)
                                                (("1"
                                                  (expand "union" -1)
                                                  (("1"
                                                    (expand "member" 1)
                                                    (("1"
                                                      (expand
                                                       "union"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "image"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "image"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "image"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -1)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "s1")
                                                                  (("1"
                                                                    (typepred
                                                                     "s1")
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "image"
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "s1")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("6" (expand "member" 1)
                        (("6" (expand "union" 1)
                          (("6" (prop)
                            (("6" (replace -2 -4)
                              (("6"
                                (rewrite "subs_ac")
                                (("6"
                                  (expand "subterms" -4)
                                  (("6"
                                    (expand "member" -4)
                                    (("6"
                                      (expand "union" -4)
                                      (("6"
                                        (prop)
                                        (("1"
                                          (expand "member" -1)
                                          (("1"
                                            (expand "singleton" -1)
                                            (("1"
                                              (expand "image" 1)
                                              (("1"
                                                (expand "image" 1)
                                                (("1"
                                                  (expand "member" 1)
                                                  (("1"
                                                    (inst 1 "t")
                                                    (("1"
                                                      (replace -3 1)
                                                      (("1"
                                                        (rewrite
                                                         "subs_ac")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "mem_union_map")
                                          (("2"
                                            (skolem -1 "tj")
                                            (("2"
                                              (rewrite
                                               "subs_ac"
                                               :dir
                                               rl)
                                              (("2"
                                                (replace -3 :dir rl)
                                                (("2"
                                                  (lemma
                                                   "args_subs_ac")
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (rewrite
                                                             "mem_flatten_map2")
                                                            (("2"
                                                              (skolem
                                                               -1
                                                               "ti")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (rewrite
                                                                   "map_member4")
                                                                  (("2"
                                                                    (skolem
                                                                     -1
                                                                     "tk")
                                                                    (("2"
                                                                      (prop)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         -3)
                                                                        (("2"
                                                                          (lemma
                                                                           "get_args_subterms")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "ac_sym(t)"
                                                                             "tj"
                                                                             "subs(sigma)(tk)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -3
                                                                                       -4
                                                                                       -5)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -5
                                                                                         "tk")
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "sigma")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "s")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "union"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "image"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "image"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (skolem
                                                                                                               -1
                                                                                                               "s1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "member"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "image"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "image"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "s1")
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "s1")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "subterms"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "union"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (prop)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "mem_union_map")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     2
                                                                                                                                     "tk")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "member"
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "get_args_size")
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_opt formula-decl nil term_properties nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (member const-decl "bool" sets nil)
    (const adt-constructor-decl "[constant -> (const?)]" term_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs const-decl "term" substitution nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (mem_union_map formula-decl nil map_theory nil)
    (args_subs_ac formula-decl nil substitution nil)
    (map_member4 formula-decl nil map_theory nil)
    (get_args_subterms formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (Union const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_no_effect_subterm 0
  (subs_no_effect_subterm-1 nil 3835354333
   ("" (skeep)
    (("" (lemma "subs_no_effect_t")
      (("" (inst -1 "sigma" "s")
        (("" (assert)
          (("" (lemma "var_dom_sub_dif_term")
            (("" (expand "disjoint?" 1)
              (("" (expand "empty?" 1)
                (("" (skeep)
                  (("" (inst -1 "x" "sigma" "t")
                    (("" (assert)
                      (("" (lemma "vars_subterm")
                        (("" (inst -1 "x" "s" "t")
                          (("" (assert) (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_no_effect_t formula-decl nil substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (vars_subterm formula-decl nil term_properties nil)
    (empty? const-decl "bool" sets nil)
    (var_dom_sub_dif_term formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subterms_img_append 0
  (subterms_img_append-1 nil 3832449002
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skolem 1 "s")
        (("" (prop)
          (("" (rewrite "subterm_fin_set")
            (("" (skolem -1 "t")
              (("" (prop)
                (("" (expand "member" -1)
                  (("" (expand "img" -1)
                    (("" (skolem -1 "X")
                      (("" (prop)
                        (("" (expand "subs" -2)
                          (("" (rewrite "subs_append2")
                            ((""
                              (name-replace "t1"
                               "subs(delta)(variable(X))")
                              ((""
                                (replace -2 -3 :dir rl)
                                ((""
                                  (lemma "subterms_subs")
                                  ((""
                                    (inst? -1)
                                    ((""
                                      (expand "subset?" -1)
                                      ((""
                                        (inst -1 "s")
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "member" -1)
                                            ((""
                                              (expand "union" -1)
                                              ((""
                                                (expand "member" 1)
                                                ((""
                                                  (expand "union" 1)
                                                  ((""
                                                    (prop)
                                                    ((""
                                                      (lemma
                                                       "image_subset[term, term]")
                                                      ((""
                                                        (inst
                                                         -1
                                                         "subterms(t1)"
                                                         "subterms(img(delta))"
                                                         "subs(sigma)")
                                                        ((""
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "image"
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "image"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "s")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "subset?"
                                                             1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (rewrite
                                                                 "subterm_fin_set")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "t1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "member"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "img"
                                                                         1)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "X")
                                                                          (("2"
                                                                            (expand
                                                                             "subs"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "t1"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "member"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "dom"
                                                                                   1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "t1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subs"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "dom_append")
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "X")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "union"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "subterm_fin_set")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "subs(sigma)(variable(X))")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "img"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member"
                                                                                                                         1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "X")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "subs"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "dom"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "subs"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterms_subs formula-decl nil substitution nil)
    (union const-decl "set" sets nil)
    (image_subset formula-decl nil function_image nil)
    (finite_image application-judgement "finite_set[R]"
     function_image_aux nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (dom_append formula-decl nil substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (append def-decl "list[T]" list_props nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (subterm_fin_set formula-decl nil term_properties nil))
   shostak))
 (same_func_subs 0
  (same_func_subs-1 nil 3832519537
   ("" (skeep)
    (("" (expand "func?" -1)
      (("" (prop)
        (("1" (lemma "term_ac_app_eta")
          (("1" (inst? -1)
            (("1" (replace -1 1 :dir rl)
              (("1" (rewrite "subs_ac") (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "term_app_eta")
          (("2" (inst? -1)
            (("2" (replace -1 1 :dir rl)
              (("2" (rewrite "subs_app") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((func? const-decl "bool" term_properties nil)
    (term_app_eta formula-decl nil term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ord const-decl "upto(5)" term_adt nil)
    (sym const-decl "string" term_properties nil)
    (same_func? const-decl "bool" term_properties nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (func_subterms_subs 0
  (func_subterms_subs-1 nil 3832409627
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst -1 "t")
              (("" (prop)
                (("1" (hide -3 1 2)
                  (("1" (replace -2)
                    (("1" (rewrite "subs_const")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide -3)
                  (("2" (case "member(V(t), dom(sigma))")
                    (("1" (rewrite "subterm_fin_set")
                      (("1" (inst 2 "subs(sigma)(t)")
                        (("1" (assert)
                          (("1" (hide -5 1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member" 1)
                      (("2" (expand "dom" 1)
                        (("2" (flatten)
                          (("2" (hide 1 2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1 -4)
                  (("3" (rewrite "subs_unit")
                    (("3" (hide -2 1 2) (("3" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (replace -2 -5)
                  (("4" (rewrite "subs_pair" -5)
                    (("4" (expand "subterms" -5)
                      (("4" (expand "member" -5)
                        (("4" (expand "union" -5)
                          (("4" (prop)
                            (("1" (inst -4 "term1(t)")
                              (("1"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "ti")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (inst -4 "term2(t)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "ti")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 -5)
                  (("5" (rewrite "subs_app")
                    (("5" (expand "subterms" -5)
                      (("5" (expand "member" -5)
                        (("5" (expand "union" -5)
                          (("5" (prop)
                            (("1" (expand "member" -1)
                              (("1"
                                (expand "singleton" -1)
                                (("1"
                                  (inst 1 "t")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (replace -3 1)
                                          (("2"
                                            (rewrite "subs_app")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (rewrite "subterm_reflexive")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -4 "arg(t)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "ti")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "subterms" 1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 -5)
                  (("6" (rewrite "subs_ac")
                    (("6" (expand "subterms" -5)
                      (("6" (expand "member" -5)
                        (("6" (expand "union" -5)
                          (("6" (prop)
                            (("1" (expand "singleton" -1)
                              (("1"
                                (expand "member" -1)
                                (("1"
                                  (inst 1 "t")
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replace -3 1)
                                      (("2"
                                        (rewrite "subs_ac")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (rewrite "subterm_reflexive")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -4)
                              (("2"
                                (rewrite "mem_union_map")
                                (("2"
                                  (skolem -1 "t'")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (lemma "subs_ac")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (replace -1 -2 :dir rl)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (rewrite "args_subs_ac")
                                              (("2"
                                                (rewrite
                                                 "mem_flatten_map2")
                                                (("2"
                                                  (skolem -1 "t'S")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "map_member4")
                                                      (("2"
                                                        (skolem
                                                         -1
                                                         "tj")
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (reveal -3)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "tj")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "get_args_subterms")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "ac_sym(t)"
                                                                           "t'"
                                                                           "t'S")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "subset?"
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "s")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     -2
                                                                                     "ti")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "ti")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "get_args_subterms")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "ac_sym(t)"
                                                                                               "tj"
                                                                                               "t")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -11
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "subset?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "ti")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -6
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "get_args_size")
                                                                    (("2"
                                                                      (inst?
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           2
                                                                           3
                                                                           4)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((args_subs_ac formula-decl nil substitution nil)
    (map_member4 formula-decl nil map_theory nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (subset? const-decl "bool" sets nil)
    (get_args_subterms formula-decl nil term_properties nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (mem_union_map formula-decl nil map_theory nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (sym const-decl "string" term_properties nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (ord const-decl "upto(5)" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (term_opt formula-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (same_func? const-decl "bool" term_properties nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (func? const-decl "bool" term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (flatten_pair_subs 0
  (flatten_pair_subs-1 nil 3832438649
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst? -1)
              (("" (hide -2)
                (("" (prop)
                  (("1" (replace -2 -3)
                    (("1" (rewrite "subs_const")
                      (("1" (inst 1 "t")
                        (("1" (replace -2 1)
                          (("1" (rewrite "subs_const")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "flatten_pair" -3)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (expand "no_pair?" -5)
                          (("1" (inst -5 "subs(sigma)(t)")
                            (("1" (assert)
                              (("1"
                                (expand "member" 1)
                                (("1"
                                  (expand "img" 1)
                                  (("1"
                                    (inst 1 "V(t)")
                                    (("1"
                                      (expand "subs" 1 1)
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (expand "dom" 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "subs" -5)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "member" -1)
                          (("2" (prop)
                            (("1" (inst 2 "t")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (expand "member" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -1 -2)
                    (("3" (rewrite "subs_unit")
                      (("3" (inst 1 "unit")
                        (("3" (rewrite "subs_unit")
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (replace -2 -3)
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "flatten_pair" -3)
                        (("4" (rewrite "member_append")
                          (("4" (prop)
                            (("1" (reveal -1)
                              (("1"
                                (inst -1 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "flatten_pair" 1)
                                              (("1"
                                                (rewrite
                                                 "member_append")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal -1)
                              (("2"
                                (inst -1 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "flatten_pair" 1)
                                              (("1"
                                                (rewrite
                                                 "member_append")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2 -3)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "flatten_pair" -3)
                        (("5" (expand "member" -3)
                          (("5" (prop)
                            (("1" (inst 1 "t")
                              (("1"
                                (expand "flatten_pair" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "member" 1)
                                    (("1"
                                      (replace -3 1)
                                      (("1"
                                        (rewrite "subs_app")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "member" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (replace -2 -3)
                    (("6" (rewrite "subs_ac")
                      (("6" (expand "flatten_pair" -3)
                        (("6" (expand "member" -3)
                          (("6" (expand "member" -3)
                            (("6" (inst 1 "t")
                              (("6"
                                (expand "flatten_pair" 1)
                                (("6"
                                  (assert)
                                  (("6"
                                    (expand "member" 1)
                                    (("6"
                                      (replace -2 1)
                                      (("6"
                                        (rewrite "subs_ac")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (member_append formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (term_opt formula-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (flatten_pair def-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (mem_get_args_subs2 0
  (mem_get_args_subs2-1 nil 3834423261
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "term_opt")
              (("" (inst -1 "t")
                (("" (prop)
                  (("1" (replace -2)
                    (("1" (rewrite "subs_const")
                      (("1" (lemma "get_args_not_pair_ac")
                        (("1" (inst? -1)
                          (("1" (expand "is_ac_sym?" -1)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "member" -3)
                                  (("1"
                                    (expand "member" -3)
                                    (("1"
                                      (inst 1 "s")
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (rewrite "subs_const")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(V(t), dom(sigma))")
                    (("1" (inst 1 "t")
                      (("1" (prop)
                        (("1" (lemma "get_args_not_pair_ac")
                          (("1" (inst -1 "f" "t")
                            (("1" (expand "is_ac_sym?" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member" 1)
                      (("2" (expand "dom" 1)
                        (("2" (expand "subs" 1)
                          (("2" (replace -2 :dir rl)
                            (("2" (flatten)
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst 1 "t")
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (lemma "get_args_not_pair_ac")
                                      (("1"
                                        (inst -1 "f" "t")
                                        (("1"
                                          (expand "is_ac_sym?")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "get_args_not_pair_ac")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (expand "is_ac_sym?" -1)
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst 1 "t")
                    (("3" (replace -1)
                      (("3" (rewrite "subs_unit")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (replace -2 -3)
                    (("4" (rewrite "subs_pair")
                      (("4" (rewrite "get_args_pair")
                        (("4" (rewrite "member_append")
                          (("4" (reveal -2)
                            (("4" (prop)
                              (("1"
                                (inst -2 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5 1)
                                                  (("1"
                                                    (rewrite
                                                     "get_args_pair")
                                                    (("1"
                                                      (rewrite
                                                       "member_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -2 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -5 1)
                                              (("1"
                                                (rewrite
                                                 "get_args_pair")
                                                (("1"
                                                  (rewrite
                                                   "member_append")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2)
                    (("5" (rewrite "subs_app")
                      (("5" (lemma "get_args_not_pair_ac")
                        (("5" (inst?)
                          (("5" (assert)
                            (("5" (expand "is_ac_sym?" -1)
                              (("5"
                                (replace -1)
                                (("5"
                                  (hide -1)
                                  (("5"
                                    (expand "member" -3 1)
                                    (("5"
                                      (expand "member" -3 1)
                                      (("5"
                                        (inst 1 "t")
                                        (("5"
                                          (split 1)
                                          (("1"
                                            (lemma
                                             "get_args_not_pair_ac")
                                            (("1"
                                              (inst?)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (replace -2 1)
                                                (("2"
                                                  (rewrite "subs_app")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_sym(t) = f")
                    (("1" (replace -1)
                      (("1" (replace -3)
                        (("1" (rewrite "subs_ac")
                          (("1" (rewrite "get_args_ac")
                            (("1" (hide -1 -2 -3)
                              (("1"
                                (reveal -5)
                                (("1"
                                  (inst -1 "ac_arg(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "ti")
                                          (("1"
                                            (inst 1 "ti")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "get_args_ac")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (reveal -4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -2 -3)
                      (("2" (rewrite "subs_ac")
                        (("2" (lemma "get_args_not_pair_ac")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (expand "is_ac_sym?" -1)
                                (("2"
                                  (replace -1 -4)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand "member" -3)
                                      (("2"
                                        (expand "member" -3 1)
                                        (("2"
                                          (inst 2 "t")
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (lemma
                                               "get_args_not_pair_ac")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "is_ac_sym?"
                                                     -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -2 1)
                                                  (("2"
                                                    (rewrite "subs_ac")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_opt formula-decl nil term_properties nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (const adt-constructor-decl "[constant -> (const?)]" term_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (subs_unit formula-decl nil substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (member_append formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_pair formula-decl nil term_properties nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (get_args_ac formula-decl nil term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (mem_get_args_subs3 0
  (mem_get_args_subs3-1 nil 3837031865
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "term_opt")
              (("" (inst -1 "t")
                (("" (prop)
                  (("1" (replace -2)
                    (("1" (rewrite "subs_const")
                      (("1" (lemma "get_args_not_pair_ac")
                        (("1" (inst? -1)
                          (("1" (expand "is_ac_sym?" -1)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "member" -3)
                                  (("1"
                                    (expand "member" -3)
                                    (("1"
                                      (inst 1 "s")
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (rewrite "subs_const")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(V(t), dom(sigma))")
                    (("1" (inst 1 "t")
                      (("1" (prop)
                        (("1" (lemma "get_args_not_pair_ac")
                          (("1" (inst -1 "f" "t")
                            (("1" (expand "is_ac_sym?" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member" 1)
                      (("2" (expand "dom" 1)
                        (("2" (expand "subs" 1)
                          (("2" (replace -2 :dir rl)
                            (("2" (flatten)
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst 1 "t")
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (lemma "get_args_not_pair_ac")
                                      (("1"
                                        (inst -1 "f" "t")
                                        (("1"
                                          (expand "is_ac_sym?")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "get_args_not_pair_ac")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (expand "is_ac_sym?" -1)
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst 1 "t")
                    (("3" (replace -1)
                      (("3" (rewrite "subs_unit")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (replace -2 -3)
                    (("4" (rewrite "subs_pair")
                      (("4" (rewrite "get_args_pair")
                        (("4" (rewrite "member_append")
                          (("4" (reveal -2)
                            (("4" (prop)
                              (("1"
                                (inst -2 "term1(t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5 1)
                                                  (("1"
                                                    (rewrite
                                                     "get_args_pair")
                                                    (("1"
                                                      (rewrite
                                                       "member_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -2 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skolem -1 "ti")
                                        (("1"
                                          (inst 1 "ti")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -5 1)
                                              (("1"
                                                (rewrite
                                                 "get_args_pair")
                                                (("1"
                                                  (rewrite
                                                   "member_append")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2)
                    (("5" (rewrite "subs_app")
                      (("5" (lemma "get_args_not_pair_ac")
                        (("5" (inst?)
                          (("5" (assert)
                            (("5" (expand "is_ac_sym?" -1)
                              (("5"
                                (replace -1)
                                (("5"
                                  (hide -1)
                                  (("5"
                                    (expand "member" -3 1)
                                    (("5"
                                      (expand "member" -3 1)
                                      (("5"
                                        (inst 1 "t")
                                        (("5"
                                          (split 1)
                                          (("1"
                                            (lemma
                                             "get_args_not_pair_ac")
                                            (("1"
                                              (inst?)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (replace -2 1)
                                                (("2"
                                                  (rewrite "subs_app")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "ord"
                                                       1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "ord"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_sym(t) = f")
                    (("1" (replace -1)
                      (("1" (replace -3)
                        (("1" (rewrite "subs_ac")
                          (("1" (rewrite "get_args_ac")
                            (("1" (hide -1 -2 -3)
                              (("1"
                                (reveal -5)
                                (("1"
                                  (inst -1 "ac_arg(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "ti")
                                          (("1"
                                            (inst 1 "ti")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "get_args_ac")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (reveal -4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -2 -3)
                      (("2" (rewrite "subs_ac")
                        (("2" (lemma "get_args_not_pair_ac")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (expand "is_ac_sym?" -1)
                                (("2"
                                  (replace -1 -4)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand "member" -3)
                                      (("2"
                                        (expand "member" -3 1)
                                        (("2"
                                          (inst 2 "t")
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (lemma
                                               "get_args_not_pair_ac")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "is_ac_sym?"
                                                     -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -2 1)
                                                  (("2"
                                                    (rewrite "subs_ac")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "ord"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_opt formula-decl nil term_properties nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (const adt-constructor-decl "[constant -> (const?)]" term_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (subs_unit formula-decl nil substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (member_append formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_pair formula-decl nil term_properties nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (get_args_ac formula-decl nil term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ord const-decl "upto(5)" term_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (im_under_subs 0
  (im_under_subs-1 nil 3832425397
   ("" (skeep)
    (("" (expand "func?")
      (("" (prop)
        (("1" (lemma "term_ac_app_eta")
          (("1" (inst? -1)
            (("1" (name-replace "f" "ac_sym(t)")
              (("1" (replace -1 -3 :dir rl)
                (("1" (rewrite "subs_ac")
                  (("1" (expand "im_under?" -3)
                    (("1" (expand "im_under" -3)
                      (("1" (lemma "mem_lst2set_2[term]")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (hide -4)
                              (("1"
                                (lemma "subs_ac")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 -2 :dir rl)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (rewrite "args_subs_ac")
                                        (("1"
                                          (rewrite "mem_flatten_map2")
                                          (("1"
                                            (skolem -2 "ti")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (rewrite "map_member4")
                                                (("1"
                                                  (skolem -2 "tj")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (case
                                                         "var?(tj)")
                                                        (("1"
                                                          (lemma
                                                           "term_variable_eta")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (lemma
                                                               "get_args_not_pair_ac")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "f"
                                                                 "subs(sigma)(tj)")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       -7)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "V(tj)")
                                                                          (("1"
                                                                            (expand
                                                                             "subs"
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "im_under?"
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "im_under"
                                                                                       1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "mem_lst2set")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "f")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "member"
                                                                           -1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "no_pair?"
                                                                     -10)
                                                                    (("2"
                                                                      (inst
                                                                       -10
                                                                       "subs(sigma)(tj)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "member"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "img"
                                                                             1)
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               "V(tj)")
                                                                              (("2"
                                                                                (expand
                                                                                 "subs"
                                                                                 1
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "dom"
                                                                                     1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subs"
                                                                                         -10)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "is_ac_sym?"
                                                                     -1)
                                                                    (("3"
                                                                      (prop)
                                                                      (("3"
                                                                        (expand
                                                                         "im_under?"
                                                                         2)
                                                                        (("3"
                                                                          (inst
                                                                           2
                                                                           "subs(sigma)(tj)")
                                                                          (("3"
                                                                            (expand
                                                                             "im_under?"
                                                                             2)
                                                                            (("3"
                                                                              (expand
                                                                               "im_under"
                                                                               2)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (replace
                                                                                   -2
                                                                                   :dir
                                                                                   rl)
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     "mem_lst2set")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "member"
                                                                                       2)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "img"
                                                                                         2)
                                                                                        (("3"
                                                                                          (inst
                                                                                           2
                                                                                           "V(tj)")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "subs"
                                                                                             2
                                                                                             1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member"
                                                                                               2)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "dom"
                                                                                                 2)
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "subs"
                                                                                                     -12)
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "get_args_not_pair_ac")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "f"
                                                             "subs(sigma)(tj)")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   -5)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (lemma
                                                                       "subs_var")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "member"
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "subs_pair2")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "get_args_mem_not_pair")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "f"
                                                                         "tj"
                                                                         "t")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "is_ac_sym?"
                                                                 -1)
                                                                (("3"
                                                                  (prop)
                                                                  (("3"
                                                                    (lemma
                                                                     "subs_ac2")
                                                                    (("3"
                                                                      (inst?
                                                                       -1)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "same_func?"
                                                                           -1)
                                                                          (("3"
                                                                            (prop)
                                                                            (("3"
                                                                              (expand
                                                                               "sym"
                                                                               -3)
                                                                              (("3"
                                                                                (lift-if)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (split
                                                                                     -3)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "get_args_mem_not_ac")
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "is_ac_sym?"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-3
                                                                                          -4
                                                                                          -5
                                                                                          1))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "term_app_eta")
          (("2" (inst? -1)
            (("2" (expand "im_under?" -3)
              (("2" (replace -1 -3 :dir rl)
                (("2" (rewrite "subs_app")
                  (("2" (expand "im_under" -3)
                    (("2" (lemma "mem_lst2set_2[term]")
                      (("2" (inst? -1)
                        (("2" (assert)
                          (("2" (hide -4)
                            (("2" (name-replace "f" "f_sym(t)")
                              (("2"
                                (lemma "flatten_pair_subs")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "ti")
                                      (("2"
                                        (case "var?(ti)")
                                        (("1"
                                          (inst 1 "V(ti)")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "im_under?" 1)
                                              (("1"
                                                (expand "im_under" 1)
                                                (("1"
                                                  (expand "subs" 1)
                                                  (("1"
                                                    (lemma
                                                     "term_variable_eta")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "mem_lst2set")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (prop)
                                          (("2"
                                            (lemma "subs_var")
                                            (("2"
                                              (inst? -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((func? const-decl "bool" term_properties nil)
    (term_app_eta formula-decl nil term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (flatten_pair_subs formula-decl nil substitution nil)
    (flatten_pair def-decl "args" term_properties nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (im_under def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (subs_var formula-decl nil substitution nil)
    (get_args_mem_not_pair formula-decl nil term_properties nil)
    (subs_pair2 formula-decl nil substitution nil)
    (same_func? const-decl "bool" term_properties nil)
    (sym const-decl "string" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (get_args_mem_not_ac formula-decl nil term_properties nil)
    (subs_ac2 formula-decl nil substitution nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (mem_lst2set formula-decl nil list_theory nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (map_member4 formula-decl nil map_theory nil)
    (args_subs_ac formula-decl nil substitution nil)
    (mem_lst2set_2 formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (im_under_subs2 0
  (im_under_subs2-1 nil 3832533518
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "func?" -2)
              (("" (prop)
                (("1" (expand "im_under?" -2)
                  (("1" (lemma "term_ac_app_eta")
                    (("1" (inst? -1)
                      (("1" (name-replace "f" "ac_sym(t)")
                        (("1" (replace -1 -3 :dir rl)
                          (("1" (rewrite "subs_ac")
                            (("1" (expand "im_under" -3)
                              (("1"
                                (lemma "mem_lst2set_2[term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (rewrite "subs_ac" :dir rl)
                                        (("1"
                                          (rewrite "args_subs_ac")
                                          (("1"
                                            (rewrite
                                             "mem_flatten_map2")
                                            (("1"
                                              (skolem -1 "tj_sigma")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (rewrite
                                                   "map_member4")
                                                  (("1"
                                                    (skolem -1 "tj")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "get_args_not_pair_ac")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "f"
                                                           "tj_sigma")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -4)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (lemma
                                                                     "subs_var")
                                                                    (("1"
                                                                      (inst?
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "term_variable_eta")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "tj")
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "V(tj)")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "im_under?"
                                                                                   1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "im_under"
                                                                                       1)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "mem_lst2set[term]")
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -7)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "f"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "member"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -3)
                                                              (("2"
                                                                (lemma
                                                                 "subs_pair2")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (lemma
                                                                         "get_args_mem_not_pair")
                                                                        (("1"
                                                                          (inst?
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "no_pair?"
                                                                         -8)
                                                                        (("2"
                                                                          (inst
                                                                           -8
                                                                           "subs(sigma)(tj)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "member"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "img"
                                                                                 1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "term_variable_eta")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "tj")
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "V(tj)")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subs"
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "dom"
                                                                                               1)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-3
                                                                                                      -9))
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "is_ac_sym?"
                                                               -1)
                                                              (("3"
                                                                (prop)
                                                                (("3"
                                                                  (lemma
                                                                   "subs_ac2")
                                                                  (("3"
                                                                    (inst?
                                                                     -1)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "same_func?"
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "get_args_mem_not_ac")
                                                                            (("1"
                                                                              (hide
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -8)
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           1
                                                                           "Y")
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (lemma
                                                                               "idempotent_disjoint_dom_img")
                                                                              (("1"
                                                                                (inst?
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "disjoint?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "Y")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "intersection"
                                                                                             1)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "dom"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "vars_finset")
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "tj_sigma")
                                                                                                        (("2"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "term_variable_eta")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "tj")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "member"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "img"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "V(tj)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "subs"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "vars_get_args")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "tj_sigma")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "vars_args")
                                                                                                                  (("2"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "variable(Y)")
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "term_variable_eta")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "tj")
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "tj_sigma")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "img"
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "V(tj)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subs"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "dom"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "im_under?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "im_under"
                                                                                           1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "mem_lst2set[term]")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "same_func?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "f")
                                                                                          (("3"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "im_under?" -2)
                  (("2" (lemma "term_app_eta")
                    (("2" (inst? -1)
                      (("2" (name-replace "f" "f_sym(t)")
                        (("2" (replace -1 -3 :dir rl)
                          (("2" (rewrite "subs_app")
                            (("2" (expand "im_under" -3)
                              (("2"
                                (lemma "mem_lst2set_2[term]")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -4)
                                      (("2"
                                        (case "pair?(arg(t))")
                                        (("1"
                                          (lemma "term_pair_eta")
                                          (("1"
                                            (inst -1 "arg(t)")
                                            (("1"
                                              (replace -1 -3 :dir rl)
                                              (("1"
                                                (rewrite "subs_pair")
                                                (("1"
                                                  (expand
                                                   "flatten_pair"
                                                   -3)
                                                  (("1"
                                                    (rewrite
                                                     "member_append")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (reveal -6)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "app(f, term1(arg(t)))")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Y"
                                                               "sigma")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "func?"
                                                                   -1)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "X")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               "im_under?"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "im_under?"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "im_under"
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "mem_lst2set")
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "im_under"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "mem_lst2set_2[term]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "flatten_pair(term1(arg(t)))"
                                                                                             "variable(X)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "flatten_pair"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "member_append")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skolem
                                                                               -1
                                                                               "s")
                                                                              (("2"
                                                                                (inst
                                                                                 2
                                                                                 "s")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -5
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "f")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "subs_app")
                                                                      (("2"
                                                                        (expand
                                                                         "im_under?"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "im_under"
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "mem_lst2set")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (reveal -6)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "app(f, term2(arg(t)))")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "Y")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "func?"
                                                                     -1)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "X")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "im_under?"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "im_under"
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "mem_lst2set[term]")
                                                                                    (("1"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "flatten_pair"
                                                                                         1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "member_append")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "im_under?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "im_under"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "mem_lst2set_2[term]")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "flatten_pair(term2(arg(t)))"
                                                                                                   "variable(X)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-3
                                                                                        -8
                                                                                        2))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "f")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "subs_app")
                                                                        (("2"
                                                                          (expand
                                                                           "im_under?"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "im_under"
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "mem_lst2set[term]")
                                                                              (("2"
                                                                                (inst?
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "flatten_pair" -1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (lemma "subs_pair2")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "term_variable_eta")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "arg(t)")
                                                          (("1"
                                                            (expand
                                                             "no_pair?"
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -7
                                                               "subs(sigma)(arg(t))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "img"
                                                                     2)
                                                                    (("1"
                                                                      (inst
                                                                       2
                                                                       "V(arg(t))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "subs"
                                                                           2
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "member"
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "dom"
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   -7)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "member" -1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (lemma
                                                       "subs_var")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "term_variable_eta")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "arg(t)")
                                                              (("1"
                                                                (inst
                                                                 3
                                                                 "V(arg(t))")
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   3
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "im_under?"
                                                                         3)
                                                                        (("1"
                                                                          (expand
                                                                           "im_under"
                                                                           3)
                                                                          (("1"
                                                                            (lemma
                                                                             "mem_lst2set[term]")
                                                                            (("1"
                                                                              (inst?
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "flatten_pair"
                                                                                   1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "member"
                                                       -1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (flatten_pair def-decl "args" term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_append formula-decl nil list_theory nil)
    (subs_pair formula-decl nil substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (im_under def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (args_subs_ac formula-decl nil substitution nil)
    (map_member4 formula-decl nil map_theory nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (subs_ac2 formula-decl nil substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil substitution nil)
    (empty? const-decl "bool" sets nil)
    (vars_args formula-decl nil term_properties nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars_get_args formula-decl nil term_properties nil)
    (vars_finset formula-decl nil term_properties nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (sym const-decl "string" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_mem_not_ac formula-decl nil term_properties nil)
    (get_args_mem_not_pair formula-decl nil term_properties nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs_pair2 formula-decl nil substitution nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (mem_lst2set formula-decl nil list_theory nil)
    (subs_var formula-decl nil substitution nil)
    (member def-decl "bool" list_props nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (mem_lst2set_2 formula-decl nil list_theory nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (same_func? const-decl "bool" term_properties nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (idempotent? const-decl "bool" substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (func? const-decl "bool" term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (im_under_subs3 0
  (im_under_subs3-1 nil 3832600191
   ("" (skeep)
    (("" (case "func?(t)")
      (("1" (lemma "im_under_subs2")
        (("1" (inst? -1)
          (("1" (assert)
            (("1" (skeep)
              (("1" (inst 1 "X")
                (("1" (prop)
                  (("1" (skeep)
                    (("1" (inst 2 "s")
                      (("1" (assert)
                        (("1" (lemma "same_func_subs")
                          (("1" (inst? -1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "func?(subs(sigma)(t))")
        (("1" (case "var?(t)")
          (("1" (lemma "term_variable_eta")
            (("1" (inst -1 "t")
              (("1" (inst 2 "Y")
                (("1" (prop)
                  (("1" (lemma "idempotent_disjoint_dom_img")
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (expand "disjoint?" -1)
                          (("1" (expand "empty?" -1)
                            (("1" (inst -1 "Y")
                              (("1"
                                (expand "member" 1)
                                (("1"
                                  (expand "intersection" 1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "member" 1)
                                      (("1"
                                        (expand "dom" 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "im_under_var")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "vars_finset")
                                            (("2"
                                              (inst 1 "subs(sigma)(t)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 1)
                                                  (("2"
                                                    (expand "img" 1)
                                                    (("2"
                                                      (inst 1 "V(t)")
                                                      (("2"
                                                        (expand
                                                         "subs"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "dom"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "subs"
                                                                   -2)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 2 "subs(sigma)(t)")
                    (("2" (assert)
                      (("2" (prop)
                        (("1" (expand "member" 1)
                          (("1" (expand "img" 1)
                            (("1" (inst 1 "V(t)")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "subs_func")
            (("2" (inst? -1)
              (("2" (assert)
                (("2" (expand "same_func?" -1) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "im_under?" -1)
          (("2" (hide 3) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((func? const-decl "bool" term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (same_func_subs formula-decl nil substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (im_under def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (idempotent? const-decl "bool" substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (same_func? const-decl "bool" term_properties nil)
    (sym const-decl "string" term_properties nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (ord const-decl "upto(5)" term_adt nil)
    (im_under_subs2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (im_under_var formula-decl nil term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (vars_finset formula-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (idempotent_disjoint_dom_img formula-decl nil substitution nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (subs_func formula-decl nil substitution nil))
   shostak))
 (supset_dom_equiv 0
  (supset_dom_equiv-1 nil 3835728990
   ("" (induct "delta")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (expand "supset_dom" -1)
                (("1" (expand "add" -1)
                  (("1" (prop)
                    (("1" (inst 1 "hd`2") (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "s")
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -2 "X") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (member def-decl "bool" list_props nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   shostak))
 (supset_dom_append 0
  (supset_dom_append-1 nil 3835550099
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (skeep)
          (("" (rewrite "subset_antisymmetric")
            (("1" (hide 2)
              (("1" (expand "subset?" 1)
                (("1" (skolem 1 "X")
                  (("1" (prop)
                    (("1" (expand "supset_dom" -1)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (grind) nil nil)
                           ("2" (expand "append" -1 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "append" -1 1)
                                    (("2"
                                      (inst -2 "cdr(sigma)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "subset?" 1)
                (("2" (skolem 1 "X")
                  (("2" (prop)
                    (("2" (expand "supset_dom" 1)
                      (("2" (case "null?(sigma)")
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide -4 1) (("1" (grind) nil nil))
                              nil)
                             ("2" (expand ("member" "union") -2)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "member" 2)
                                    (("2"
                                      (hide -3)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (hide -3 1)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "append" 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -2 "cdr(sigma)")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (union const-decl "set" sets nil)
    (append def-decl "list[T]" list_props nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nice_disjoint_dom_img 0
  (nice_disjoint_dom_img-1 nil 3835471821
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (expand "nice?" -2 :assert? none)
          (("" (split)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (skoletin -1)
                (("2" (flatten)
                  (("2" (expand "disjoint?" 4)
                    (("2" (expand "empty?" 4)
                      (("2" (skolem 4 "Y")
                        (("2" (expand "member" -6)
                          (("2" (expand "intersection" -6)
                            (("2" (prop)
                              (("2"
                                (expand "member" -6)
                                (("2"
                                  (expand "dom" -6)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "subs" 4)
                                      (("2"
                                        (expand "subs" 4)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "subs(cdr(sigma))(variable(Y)) = variable(Y)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case "X = Y")
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (hide -7)
                                                    (("1"
                                                      (rewrite
                                                       "vars_finset")
                                                      (("1"
                                                        (skolem -7 "s")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide
                                                             -5
                                                             -6)
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               -5)
                                                              (("1"
                                                                (expand
                                                                 "img"
                                                                 -5)
                                                                (("1"
                                                                  (skolem
                                                                   -5
                                                                   "Z")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "subs"
                                                                       -6)
                                                                      (("1"
                                                                        (expand
                                                                         "subs"
                                                                         -6)
                                                                        (("1"
                                                                          (name-replace
                                                                           "s_pre"
                                                                           "subs(cdr(sigma))(variable(Z))")
                                                                          (("1"
                                                                            (lemma
                                                                             "basic_sub_elim_var")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "X"
                                                                               "t"
                                                                               "s_pre")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6
                                                                                     -7
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-7
                                                                                        1))
                                                                                      (("1"
                                                                                        (case
                                                                                         "car(sigma) = (X, t)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "subs" 5)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -5 "cdr(sigma)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "disjoint?"
                                                   -1)
                                                  (("1"
                                                    (expand
                                                     "empty?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "Y")
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "intersection"
                                                           1)
                                                          (("1"
                                                            (case
                                                             "member(Y, dom(cdr(sigma)))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4
                                                                 -5
                                                                 -3)
                                                                (("1"
                                                                  (rewrite
                                                                   "vars_finset"
                                                                   -3)
                                                                  (("1"
                                                                    (skolem
                                                                     -3
                                                                     "s")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "img"
                                                                           -3)
                                                                          (("1"
                                                                            (skolem
                                                                             -3
                                                                             "Z")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "subs"
                                                                                 -4)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vars_finset"
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "subs(cdr(sigma))(variable(Z))")
                                                                                      (("1"
                                                                                        (case
                                                                                         "X /= Y")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "s_pre"
                                                                                             "subs(cdr(sigma))(variable(Z))")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "img"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "Z")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "s_pre"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "subs"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "dom"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "subs"
                                                                                                                 8)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "member"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "dom"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "subs"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "subs"
                                                                                                                           7
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "subs"
                                                                                                                               7)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       -4)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "s_pre"
                                                                                                                                             -5)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "subs"
                                                                                                                                                 -5)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -3)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -6
                                                                                                                                                           :dir
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "disjoint?"
                                                                                                                                                             -5)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "empty?"
                                                                                                                                                               -5)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -5
                                                                                                                                                                 "Y")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "member"
                                                                                                                                                                   6)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "intersection"
                                                                                                                                                                     6)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "supset_dom_correct2")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "cdr(sigma)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "subset?"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "Y")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "basic_sub_not_elim_var")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "X"
                                                                                                   "Y"
                                                                                                   "t"
                                                                                                   "s_pre")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "disjoint?"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -3
                                                                                                             "Y")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member"
                                                                                                               6)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "intersection"
                                                                                                                 6)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "supset_dom_correct2")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "subset?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "Y")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         -5
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-5
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "car(sigma) = (X, t)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "supset_dom_correct2")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "Y")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "dom"
                                                                 1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "subs"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 5))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (supset_dom_correct2 formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (basic_sub_not_elim_var formula-decl nil substitution nil)
    (/= const-decl "boolean" notequal nil)
    (vars_finset formula-decl nil term_properties nil)
    (basic_sub_elim_var formula-decl nil substitution nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nice? def-decl "bool" substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nice_idempotent 0
  (nice_idempotent-1 nil 3835541840
   ("" (skeep)
    (("" (lemma "idempotent_disjoint_dom_img2")
      (("" (inst? -1)
        (("" (assert)
          (("" (use "nice_disjoint_dom_img") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_disjoint_dom_img2 formula-decl nil substitution nil)
    (nice_disjoint_dom_img formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nice_append 0
  (nice_append-1 nil 3835549786
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skolem 1 "delta")
          (("2" (prop)
            (("1" (expand "append" -2)
              (("1" (inst -1 "delta")
                (("1" (expand "nice?" -2)
                  (("1" (expand "nice?" 1)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (rewrite "supset_dom_append")
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "disjoint?" 1)
                                  (("2"
                                    (expand "empty?" 1)
                                    (("2"
                                      (skolem 1 "X")
                                      (("2"
                                        (expand "disjoint?" -4)
                                        (("2"
                                          (expand "empty?" -4)
                                          (("2"
                                            (inst -4 "X")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((supset_dom_append formula-decl nil substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (append def-decl "list[T]" list_props nil)
    (nice? def-decl "bool" substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil))
   shostak))
 (nice_append2 0
  (nice_append2-1 nil 3835686045
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (skeep)
          (("" (expand "nice?" -3)
            (("" (prop)
              (("1" (case "sigma = null")
                (("1" (replace -1)
                  (("1" (expand "append" 1) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (name-replace "X" "car(sigma)`1")
                (("2" (name-replace "t" "car(sigma)`2")
                  (("2" (expand "nice?" 4)
                    (("2" (split)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (expand "append" 2)
                          (("2" (assert)
                            (("2" (reveal -1 -2)
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (rewrite "supset_dom_append")
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (expand "member" -1)
                                            (("1"
                                              (expand "union" -1)
                                              (("1"
                                                (inst -7 "X" "t")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     ("X" "t")
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -5)
                                        (("2"
                                          (inst -6 "X" "t")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (rewrite
                                               "supset_dom_append")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 2))
                                                (("1"
                                                  (expand
                                                   "disjoint?"
                                                   1)
                                                  (("1"
                                                    (expand "empty?" 1)
                                                    (("1"
                                                      (skolem 1 "Y")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand ("X" "t") 1)
                                              (("2"
                                                (expand "member" 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (inst -5 "cdr(sigma)")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem 1 ("X1" "t1"))
                                                (("1"
                                                  (inst -6 "X1" "t1")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         -7
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (supset_dom_append formula-decl nil substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (disjoint? const-decl "bool" sets nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (nice? def-decl "bool" substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nice_append_supset_dom 0
  (nice_append_supset_dom-1 nil 3835551120
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (skeep)
          (("" (expand "supset_dom" -3)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (expand "member" -1)
                    (("2" (expand "add" -1)
                      (("2" (prop)
                        (("1" (expand "nice?" -3)
                          (("1" (expand "append" -3)
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (rewrite "supset_dom_append")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "cdr(sigma)")
                          (("2" (prop)
                            (("1" (inst -1 "X" "delta")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "append" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nice?" -2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (supset_dom_append formula-decl nil substitution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (append def-decl "list[T]" list_props nil)
    (nice? def-decl "bool" substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_img_sec_proj 0
  (vars_img_sec_proj-1 nil 3836946205
   ("" (measure-induct "length(sigma)" "sigma")
    (("" (skolem 1 "sigma")
      (("" (prop)
        (("" (case "null?(sigma)")
          (("1" (grind) nil nil)
           ("2" (case "sigma = cons(car(sigma), cdr(sigma))")
            (("1"
              (case "sigma = append(cons(car(sigma), null), cdr(sigma))")
              (("1" (expand "subset?" 2)
                (("1" (skolem 2 "X")
                  (("1" (prop)
                    (("1" (replace -1 -4)
                      (("1" (hide -2)
                        (("1" (lemma "vars_img_append")
                          (("1" (inst?)
                            (("1" (expand "subset?" -1)
                              (("1"
                                (inst -1 "X")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -4)
                                    (("1"
                                      (expand "member" -1)
                                      (("1"
                                        (expand "union" -1)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (case "null?(cdr(sigma))")
                                            (("1"
                                              (hide -4 -3)
                                              (("1"
                                                (rewrite "vars_finset")
                                                (("1"
                                                  (skolem -2 "t1")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -3
                                               "cons(car(sigma), null)")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -3 "cdr(sigma)")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "append" 1)
                (("2" (expand "append" 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (decompose-equality 1) nil nil)) nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_img_append formula-decl nil substitution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars_finset formula-decl nil term_properties nil)
    (union const-decl "set" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (args type-eq-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (well_formed_append 0
  (well_formed_append-1 nil 3846951355
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (skeep)
        (("" (prop)
          (("1" (expand "subs")
            (("1" (rewrite "subs_append2")
              (("1" (lemma "subs_pair2")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (expand "well_formed?" -4)
                        (("1" (inst -4 "X") (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2"
                        (name-replace "t1" "subs(delta)(variable(X))")
                        (("2" (expand "well_formed?" -3)
                          (("2" (inst -3 "V(t1)")
                            (("2" (expand "subs" -3)
                              (("2"
                                (lemma "term_variable_eta")
                                (("2"
                                  (inst -1 "t1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "subs" -1 1)
              (("2" (rewrite "subs_append2")
                (("2" (lemma "subterms_subs")
                  (("2" (name-replace "t1" "subs(delta)(variable(X))")
                    (("2" (inst?)
                      (("2" (expand "subset?" -1)
                        (("2" (inst -1 "t")
                          (("2" (prop)
                            (("2" (hide -2)
                              (("2"
                                (expand ("member" "union") -1)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "image" -1)
                                    (("1"
                                      (expand "image" -1)
                                      (("1"
                                        (expand "member" -1)
                                        (("1"
                                          (skolem -1 "t2")
                                          (("1"
                                            (typepred "t2")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma "subs_func")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "sigma"
                                                   "t2")
                                                  (("1"
                                                    (expand "func?" -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "same_func?"
                                                           -1)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "ord"
                                                               -2)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (case
                                                                       "ac_app?(t2)")
                                                                      (("1"
                                                                        (hide
                                                                         1
                                                                         2
                                                                         3
                                                                         4
                                                                         5)
                                                                        (("1"
                                                                          (lemma
                                                                           "subs_num_arg_ge1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "ac_sym(t)"
                                                                             "sigma"
                                                                             "t2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sym"
                                                                                   -3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "t1"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "well_formed?"
                                                                                           -8)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "X")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "t2")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "well_formed?"
                                                           -5)
                                                          (("2"
                                                            (lemma
                                                             "term_variable_eta")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "t2")
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 "V(t2)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "t")
                                                                      (("2"
                                                                        (prop)
                                                                        (("2"
                                                                          (expand
                                                                           "subs"
                                                                           1)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -4
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "subterm_reflexive")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "subterm_fin_set")
                                    (("2"
                                      (skolem -1 "tS")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "img" -1)
                                          (("2"
                                            (expand "member" -1)
                                            (("2"
                                              (expand
                                               "well_formed?"
                                               -4)
                                              (("2"
                                                (skolem -1 "Y")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (inst -5 "Y")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (inst -5 "t")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed? const-decl "bool" substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (member const-decl "bool" sets nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_pair2 formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (subterms_subs formula-decl nil substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (same_func? const-decl "bool" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_num_arg_ge1 formula-decl nil substitution nil)
    (sym const-decl "string" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (func? const-decl "bool" term_properties nil)
    (subs_func formula-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (well_formed_subs 0
  (well_formed_subs-1 nil 3846959624
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (prop)
        (("1" (lemma "subs_pair2")
          (("1" (inst?)
            (("1" (assert)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "term_variable_eta")
                  (("2" (inst?)
                    (("2" (expand "well_formed?" -4)
                      (("2" (inst -4 "V(t)")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "ti_sigma")
          (("2" (prop)
            (("2" (lemma "subterms_subs")
              (("2" (inst?)
                (("2" (expand "subset?" -1)
                  (("2" (inst -1 "ti_sigma")
                    (("2" (assert)
                      (("2" (expand ("member" "union") -1)
                        (("2" (prop)
                          (("1" (expand "image" -1)
                            (("1" (expand "image" -1)
                              (("1"
                                (expand "member" -1)
                                (("1"
                                  (skolem -1 "ti")
                                  (("1"
                                    (typepred "ti")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (lemma "subs_ac2")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand
                                                     "same_func?"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "ord"
                                                         -2)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (case
                                                                 "ac_app?(ti)")
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   2
                                                                   3
                                                                   4
                                                                   5)
                                                                  (("1"
                                                                    (expand
                                                                     "sym"
                                                                     -3)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (lemma
                                                                             "subs_num_arg_ge1")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "ti")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "well_formed?"
                                                                                       -9)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -9
                                                                                           "ti")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               4)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "well_formed?"
                                                   -5)
                                                  (("2"
                                                    (lemma
                                                     "term_variable_eta")
                                                    (("2"
                                                      (inst -1 "ti")
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "V(ti)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "ti_sigma")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "subs"
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "subterm_reflexive")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2)
                            (("2" (rewrite "subterm_fin_set" -1)
                              (("2"
                                (skolem -1 "ti")
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "img" -1)
                                    (("2"
                                      (expand "member" -1)
                                      (("2"
                                        (expand "well_formed?" -4)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -5 "X")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (inst -5 "ti_sigma")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterms_subs formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_ac2 formula-decl nil substitution nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (subs_num_arg_ge1 formula-decl nil substitution nil)
    (sym const-decl "string" term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ord const-decl "upto(5)" term_adt nil)
    (same_func? const-decl "bool" term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (subs_pair2 formula-decl nil substitution nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (well_formed? const-decl "bool" substitution nil)
    (union const-decl "set" sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (well_formed_num_arg 0
  (well_formed_num_arg-1 nil 3850482223
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skolem 1 "sig")
          (("" (prop)
            (("" (lemma "term_opt")
              (("" (inst?)
                (("" (prop)
                  (("1" (expand "num_arg" 1 2)
                    (("1" (assert)
                      (("1" (replace -2)
                        (("1" (rewrite "subs_const")
                          (("1" (expand "num_arg" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -2 1)
                    (("2" (expand "num_arg" 1 2)
                      (("2" (expand "num_arg" 1)
                        (("2" (expand "well_formed?" -4)
                          (("2" (inst -4 "V(t)")
                            (("2" (expand "subs" -4 1)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (expand "num_arg" 1 2)
                      (("3" (rewrite "subs_unit")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (replace -2 1)
                    (("4" (expand "num_arg" 1 2)
                      (("4" (rewrite "subs_pair")
                        (("4" (expand "num_arg" 1 1)
                          (("4" (inst-cp -3 "term1(t)")
                            (("4" (prop)
                              (("1"
                                (inst -1 "sig")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -4 "term2(t)")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst -1 "sig")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -2)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "num_arg") (("5" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("6" (replace -2 1)
                    (("6" (expand "num_arg" 1 2)
                      (("6" (rewrite "subs_ac")
                        (("6" (expand "num_arg" 1)
                          (("6" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_opt formula-decl nil term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (member const-decl "bool" sets nil)
    (subs_unit formula-decl nil substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (well_formed? const-decl "bool" substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (alm_well_formed_subs 0
  (alm_well_formed_subs-3 nil 3849968294
   ("" (skeep)
    (("" (expand "alm_well_formed?" 1)
      (("" (prop)
        (("1" (lemma "subs_pair2")
          (("1" (inst?)
            (("1" (assert)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "term_variable_eta")
                  (("2" (inst?)
                    (("2" (expand "well_formed?" -4)
                      (("2" (inst -4 "V(t)")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "ti_sigma")
          (("2" (prop)
            (("2" (lemma "subterms_subs")
              (("2" (inst?)
                (("2" (expand "subset?" -1)
                  (("2" (inst -1 "ti_sigma")
                    (("2" (assert)
                      (("2" (expand ("member" "union") -1)
                        (("2" (prop)
                          (("1" (expand "image" -1)
                            (("1" (expand "image" -1)
                              (("1"
                                (expand "member" -1)
                                (("1"
                                  (skolem -1 "ti")
                                  (("1"
                                    (typepred "ti")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (lemma "subs_ac2")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand
                                                     "same_func?"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "ord"
                                                         -2)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (case
                                                                 "ac_app?(ti)")
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   2
                                                                   3
                                                                   4
                                                                   5)
                                                                  (("1"
                                                                    (expand
                                                                     "sym"
                                                                     -3)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (lemma
                                                                             "subs_num_arg_ge1")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "ti")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "alm_well_formed?"
                                                                                       -9)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -9
                                                                                           "ti")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               5)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "well_formed?"
                                                   -5)
                                                  (("2"
                                                    (lemma
                                                     "term_variable_eta")
                                                    (("2"
                                                      (inst -1 "ti")
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "V(ti)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "ti_sigma")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "subs"
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "subterm_reflexive")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2)
                            (("2" (rewrite "subterm_fin_set" -1)
                              (("2"
                                (skolem -1 "ti")
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "img" -1)
                                    (("2"
                                      (expand "member" -1)
                                      (("2"
                                        (expand "well_formed?" -4)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -5 "X")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (inst -5 "ti_sigma")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterms_subs formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_ac2 formula-decl nil substitution nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (subs_num_arg_ge1 formula-decl nil substitution nil)
    (sym const-decl "string" term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ord const-decl "upto(5)" term_adt nil)
    (same_func? const-decl "bool" term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (subs_pair2 formula-decl nil substitution nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (well_formed? const-decl "bool" substitution nil)
    (union const-decl "set" sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (alm_well_formed_subs-2 nil 3849968045
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (prop)
        (("1" (lemma "subs_pair2")
          (("1" (inst?)
            (("1" (assert)
              (("1" (prop)
                (("1" (grind) nil)
                 ("2" (lemma "term_variable_eta")
                  (("2" (inst?)
                    (("2" (expand "well_formed?" -4)
                      (("2" (inst -4 "V(t)")
                        (("2" (assert)
                          (("2" (grind) nil)))))))))))))))))))
         ("2" (skolem 1 "ti_sigma")
          (("2" (prop)
            (("2" (lemma "subterms_subs")
              (("2" (inst?)
                (("2" (expand "subset?" -1)
                  (("2" (inst -1 "ti_sigma")
                    (("2" (assert)
                      (("2" (expand ("member" "union") -1)
                        (("2" (prop)
                          (("1" (expand "image" -1)
                            (("1" (expand "image" -1)
                              (("1"
                                (expand "member" -1)
                                (("1"
                                  (skolem -1 "ti")
                                  (("1"
                                    (typepred "ti")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (lemma "subs_ac2")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand
                                                     "same_func?"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "ord"
                                                         -2)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (case
                                                                 "ac_app?(ti)")
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   2
                                                                   3
                                                                   4
                                                                   5)
                                                                  (("1"
                                                                    (expand
                                                                     "sym"
                                                                     -3)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (lemma
                                                                             "subs_num_arg_ge1")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "ti")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "well_formed?"
                                                                                       -9)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -9
                                                                                           "ti")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               4)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (expand
                                                   "well_formed?"
                                                   -5)
                                                  (("2"
                                                    (lemma
                                                     "term_variable_eta")
                                                    (("2"
                                                      (inst -1 "ti")
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "V(ti)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "ti_sigma")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "subs"
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "subterm_reflexive")
                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))
                           ("2" (hide -2)
                            (("2" (rewrite "subterm_fin_set" -1)
                              (("2"
                                (skolem -1 "ti")
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "img" -1)
                                    (("2"
                                      (expand "member" -1)
                                      (("2"
                                        (expand "well_formed?" -4)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -5 "X")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (inst -5 "ti_sigma")
                                                (("2"
                                                  (assert)
                                                  nil))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (alm_well_formed_subs-1 nil 3849968006
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (equal_sub_equiv 0
  (equal_sub_equiv-1 nil 3842108637
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2)
                  (("1" (rewrite "subs_const")
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2)
                  (("2" (expand "equal?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "subs" -4) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" 1)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2)
                  (("4" (rewrite "subs_pair")
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "equal?" 1)
                        (("4" (prop)
                          (("1" (inst -3 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2)
                  (("5" (rewrite "subs_app")
                    (("5" (rewrite "subs_app")
                      (("5" (expand "equal?" 1)
                        (("5" (inst -3 "arg(t)")
                          (("5" (split -3)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (use "equal?_num_arg2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (lemma "perm_args_ac")
                  (("6" (inst?)
                    (("6" (name-replace "f" "ac_sym(t)")
                      (("6" (inst -1 "f")
                        (("6" (assert)
                          (("6" (hide 2)
                            (("6" (prop)
                              (("1"
                                (lemma "subs_get_args1")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "1")
                                    (("1"
                                      (case "num_arg(f, t) = 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (lemma "subs_get_args1")
                                            (("1"
                                              (inst
                                               -1
                                               "f"
                                               "1"
                                               "sigma"
                                               "t")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "select(f, t)(1)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "ac_perm_args2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "ac_select_size")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "is_ac_sym?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "subs_perm_get_args_ge1")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "1")
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "perm?(get_args(f)(subs(sigma)(t)), append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                 get_args(f)(subs(sigma)(delete(f, t)(1)))))")
                                                    (("1"
                                                      (hide
                                                       -6
                                                       -4
                                                       -5
                                                       -7
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         "perm?_sym")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "get_args(f)(subs(sigma)(t))"
                                                           "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                           get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_trans")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "get_args(f)(subs(delta)(t))"
                                                                   "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                           get_args(f)(subs(sigma)(delete(f, t)(1))))"
                                                                   "get_args(f)(subs(sigma)(t))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "perm?_trans")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "get_args(f)(subs(delta)(t))"
                                                                             "append(get_args(f)(subs(delta)(select(f, t)(1))),
                                           get_args(f)(subs(delta)(delete(f, t)(1))))"
                                                                             "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                           get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 2)
                                                                                (("1"
                                                                                  (use
                                                                                   "perm?_append")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9
                                                                                         -10)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "select(f, t)(1)")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "ac_perm_args2")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_select_size")
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "is_ac_sym?"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "delete(f, t)(1)")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "ac_perm_args2")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_delete_size")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -2 -5)
                                                      (("2"
                                                        (lemma
                                                         "subs_perm_get_args_ge1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2)
                                (("2"
                                  (rewrite "subs_ac")
                                  (("2"
                                    (rewrite "subs_ac")
                                    (("2"
                                      (expand "are_ac?" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm_args_ac formula-decl nil equality nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (select def-decl "term" term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append formula-decl nil equality nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (perm?_trans formula-decl nil equality nil)
    (perm?_sym formula-decl nil equality nil)
    (delete def-decl "term" term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" equality nil)
    (args type-eq-decl nil term_properties nil)
    (> const-decl "bool" reals nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (are_ac? const-decl "bool" term_properties nil)
    (string type-eq-decl nil strings nil)
    (equal?_num_arg2 formula-decl nil equality nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (subs_const formula-decl nil substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (term_opt formula-decl nil term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (equal_sub_equiv_alt 0
  (equal_sub_equiv_alt-1 nil 3851184149
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2)
                  (("1" (rewrite "subs_const")
                    (("1" (rewrite "subs_const")
                      (("1" (expand "equal?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2)
                  (("2" (expand "equal?" -4)
                    (("2" (inst -4 "V(t)")
                      (("2" (expand "subs" -4)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (rewrite "subs_unit")
                      (("3" (expand "equal?" 1)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2)
                  (("4" (rewrite "subs_pair")
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "equal?" 1)
                        (("4" (prop)
                          (("1" (inst -3 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2)
                  (("5" (rewrite "subs_app")
                    (("5" (rewrite "subs_app")
                      (("5" (expand "equal?" 1)
                        (("5" (inst -3 "arg(t)")
                          (("5" (split -3)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (use "equal?_num_arg2")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (lemma "perm_args_ac")
                  (("6" (inst?)
                    (("6" (name-replace "f" "ac_sym(t)")
                      (("6" (inst -1 "f")
                        (("6" (assert)
                          (("6" (hide 2)
                            (("6" (prop)
                              (("1"
                                (lemma "subs_get_args1")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "1")
                                    (("1"
                                      (case "num_arg(f, t) = 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (lemma "subs_get_args1")
                                            (("1"
                                              (inst
                                               -1
                                               "f"
                                               "1"
                                               "sigma"
                                               "t")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "select(f, t)(1)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "ac_perm_args2")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "vars_get_args")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "f"
                                                                     "t")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -6
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             -7
                                                                             "x")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "vars_args")
                                                                                (("2"
                                                                                  (inst
                                                                                   2
                                                                                   "select(f, t)(1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (use
                                                                                       "get_args_mem_select1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "ac_select_size")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "is_ac_sym?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "subs_perm_get_args_ge1")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "1")
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "perm?(get_args(f)(subs(sigma)(t)), append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                                get_args(f)(subs(sigma)(delete(f, t)(1)))))")
                                                    (("1"
                                                      (hide
                                                       -6
                                                       -4
                                                       -5
                                                       -7
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         "perm?_sym")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "get_args(f)(subs(sigma)(t))"
                                                           "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                       get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_trans")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "get_args(f)(subs(delta)(t))"
                                                                   "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                       get_args(f)(subs(sigma)(delete(f, t)(1))))"
                                                                   "get_args(f)(subs(sigma)(t))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "perm?_trans")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "get_args(f)(subs(delta)(t))"
                                                                             "append(get_args(f)(subs(delta)(select(f, t)(1))),
                                                       get_args(f)(subs(delta)(delete(f, t)(1))))"
                                                                             "append(get_args(f)(subs(sigma)(select(f, t)(1))),
                                                       get_args(f)(subs(sigma)(delete(f, t)(1))))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 2)
                                                                                (("1"
                                                                                  (use
                                                                                   "perm?_append")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9
                                                                                         -10)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "select(f, t)(1)")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "ac_perm_args2")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "vars_get_args")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "f"
                                                                                                           "t")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             -4
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "subset?")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -5
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vars_args")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         2
                                                                                                                         "select(f, t)(1)")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "get_args_mem_select1")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_select_size")
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "is_ac_sym?"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "delete(f, t)(1)")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "ac_perm_args2")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "x")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "vars_get_args")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "t")
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "vars_get_args")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "f"
                                                                                                                               "delete(f, t)(1)")
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "vars_args")
                                                                                                                                  (("2"
                                                                                                                                    (skolem
                                                                                                                                     -2
                                                                                                                                     "ti")
                                                                                                                                    (("2"
                                                                                                                                      (prop)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "vars_args")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "ti")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "member_nth2"
                                                                                                                                               -2)
                                                                                                                                              (("2"
                                                                                                                                                (skolem
                                                                                                                                                 -2
                                                                                                                                                 "i")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "get_args_nth")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "f"
                                                                                                                                                     "i+1"
                                                                                                                                                     "delete(f, t)(1)")
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "nice_ind?(i + 1, num_arg(f, delete(f, t)(1)))")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "le_select_delete")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -3)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -3)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (prop)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "member_nth2"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           1
                                                                                                                                                                           "1+i")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "get_args_nth")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "f"
                                                                                                                                                                               "2+i"
                                                                                                                                                                               "t")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "nice_ind?")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "num_arg_delete_ge1")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "i")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "get_args_len")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "get_args_len")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (use
                                                                                                                                                                                   "num_arg_delete_ge1")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nice_ind?"
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (prop)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nice_ind?"
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "nice_ind?"
                                                                                                                                                                             1
                                                                                                                                                                             2)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (use
                                                                                                                                                                               "num_arg_delete_ge1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "i")
                                                                                                                                                          (("2"
                                                                                                                                                            (rewrite
                                                                                                                                                             "get_args_len")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "nice_ind?"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ac_delete_size")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3 -2 -5)
                                                      (("2"
                                                        (lemma
                                                         "subs_perm_get_args_ge1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2)
                                (("2"
                                  (rewrite "subs_ac")
                                  (("2"
                                    (rewrite "subs_ac")
                                    (("2"
                                      (expand "are_ac?" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm_args_ac formula-decl nil equality nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (select def-decl "term" term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (vars_get_args formula-decl nil term_properties nil)
    (get_args_mem_select1 formula-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (vars_args formula-decl nil term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_append formula-decl nil equality nil)
    (member_nth2 formula-decl nil list_theory nil)
    (get_args_nth formula-decl nil term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (le_select_delete formula-decl nil term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (emptyset const-decl "set" sets nil)
    (member def-decl "bool" list_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (get_args_len formula-decl nil term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (perm?_trans formula-decl nil equality nil)
    (perm?_sym formula-decl nil equality nil)
    (delete def-decl "term" term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" equality nil)
    (> const-decl "bool" reals nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (are_ac? const-decl "bool" term_properties nil)
    (string type-eq-decl nil strings nil)
    (equal?_num_arg2 formula-decl nil equality nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs const-decl "term" substitution nil)
    (subs_const formula-decl nil substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (term_opt formula-decl nil term_properties nil)
    (subset? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal_sub_change_eq_terms 0
  (equal_sub_change_eq_terms-1 nil 3842205504
   ("" (skeep)
    (("" (lemma "equal_sub_equiv")
      (("" (inst-cp -1 "delta" "sigma" "t")
        (("" (assert)
          (("" (inst -1 "delta" "sigma" "s")
            (("" (assert)
              (("" (prop)
                (("1" (lemma "equal?_sym")
                  (("1" (inst -1 "subs(sigma)(t)" "subs(delta)(t)")
                    (("1" (assert)
                      (("1" (hide -4)
                        (("1" (lemma "equal?_trans")
                          (("1"
                            (inst -1 "subs(sigma)(t)" "subs(delta)(t)"
                             "subs(sigma)(s)")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (lemma "equal?_trans")
                                  (("1"
                                    (inst
                                     -1
                                     "subs(delta)(t)"
                                     "subs(delta)(s)"
                                     "subs(sigma)(s)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "equal?_trans")
                  (("2"
                    (inst -1 "subs(delta)(t)" "subs(sigma)(t)"
                     "subs(delta)(s)")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (lemma "equal?_trans")
                          (("2"
                            (inst -1 "subs(sigma)(t)" "subs(sigma)(s)"
                             "subs(delta)(s)")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "equal?_sym")
                                  (("2"
                                    (inst
                                     -1
                                     "subs(sigma)(s)"
                                     "subs(delta)(s)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_sub_equiv formula-decl nil substitution nil)
    (equal?_sym formula-decl nil equality nil)
    (equal?_trans formula-decl nil equality nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (equal_sub_ref 0
  (equal_sub_ref-1 nil 3850318341
   ("" (skeep)
    (("" (expand "equal?" 1)
      (("" (skeep)
        (("" (expand "subs" 1) (("" (rewrite "equal?_ref") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((subs const-decl "term" substitution nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (equal?_ref formula-decl nil equality nil))
   shostak))
 (equal_sub_sym 0
  (equal_sub_sym-1 nil 3851195388
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "equal?")
          (("1" (skolem 1 "x")
            (("1" (inst -1 "x")
              (("1" (expand "subs")
                (("1" (lemma "equal?_sym")
                  (("1"
                    (inst -1 "subs(gamma)(variable(x))"
                     "subs(delta)(variable(x))")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "equal?")
          (("2" (skolem 1 "x")
            (("2" (inst -1 "x")
              (("2" (expand "subs")
                (("2" (lemma "equal?_sym")
                  (("2"
                    (inst -1 "subs(delta)(variable(x))"
                     "subs(gamma)(variable(x))")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (equal?_sym formula-decl nil equality nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subs const-decl "term" substitution nil))
   shostak))
 (equal_sub_trans 0
  (equal_sub_trans-1 nil 3850318367
   ("" (skeep)
    (("" (expand "equal?")
      (("" (skeep)
        (("" (inst -1 "X")
          (("" (inst -2 "X")
            (("" (expand "subs")
              (("" (lemma "equal?_trans")
                ((""
                  (inst -1 "subs(delta)(variable(X))"
                   "subs(gamma)(variable(X))"
                   "subs(sigma)(variable(X))")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (equal?_trans formula-decl nil equality nil))
   shostak))
 (equal_sub_append 0
  (equal_sub_append-1 nil 3851254672
   ("" (skeep)
    (("" (expand "equal?" 1)
      (("" (skolem 1 "x")
        (("" (expand "subs")
          (("" (rewrite "subs_append2")
            (("" (rewrite "subs_append2")
              (("" (lemma "equal_sub_equiv")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs const-decl "term" substitution nil)
    (equal_sub_equiv formula-decl nil substitution nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_append2 formula-decl nil substitution nil))
   shostak))
 (idempotent_append_cond 0
  (idempotent_append_cond-1 nil 3838230289
   ("" (skeep)
    (("" (lemma "idempotent_disjoint_dom_img2")
      (("" (inst -1 "append(cons((X, t), null), sigma)")
        (("" (assert)
          (("" (hide 4)
            (("" (expand "disjoint?" 1)
              (("" (expand "empty?" 1)
                (("" (skolem 1 "Y")
                  (("" (expand "member" -1)
                    (("" (expand "intersection" -1)
                      (("" (prop)
                        (("" (lemma "dom_append")
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (expand "subset?" -1)
                                ((""
                                  (inst -1 "Y")
                                  ((""
                                    (assert)
                                    ((""
                                      (hide -2)
                                      ((""
                                        (lemma "basic_sub_info")
                                        ((""
                                          (inst -1 "X" "t")
                                          ((""
                                            (assert)
                                            ((""
                                              (prop)
                                              ((""
                                                (expand "member" -4)
                                                ((""
                                                  (expand "union" -4)
                                                  ((""
                                                    (prop)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "singleton"
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               "vars_finset")
                                                              (("1"
                                                                (skolem
                                                                 -5
                                                                 "t1")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "member"
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "img"
                                                                       -5)
                                                                      (("1"
                                                                        (skolem
                                                                         -5
                                                                         "W")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand
                                                                             "subs"
                                                                             -6)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "subs_append2")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "apply_sub_elim_var_t")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "X"
                                                                                     "cons((X, t), null)"
                                                                                     "subs(sigma)(variable(W))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member"
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "singleton"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "vars_singleton"
                                                                                                   -1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "vars_img_append")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "Y")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "union"
                                                                   -1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (rewrite
                                                                         "vars_singleton"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "disjoint?"
                                                                           -8)
                                                                          (("1"
                                                                            (expand
                                                                             "empty?"
                                                                             -8)
                                                                            (("1"
                                                                              (inst
                                                                               -8
                                                                               "Y")
                                                                              (("1"
                                                                                (expand
                                                                                 "member"
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "intersection"
                                                                                   3)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "idempotent_disjoint_dom_img")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "sigma")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "empty?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "Y")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "intersection"
                                                                                     1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_disjoint_dom_img2 formula-decl nil substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom_append formula-decl nil substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (vars_img_append formula-decl nil substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (vars_finset formula-decl nil term_properties nil)
    (apply_sub_elim_var_t formula-decl nil substitution nil)
    (vars_singleton formula-decl nil term_properties nil)
    (subs_append2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (basic_sub_info formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subs_size2_map_get_args 0
  (subs_size2_map_get_args-1 nil 3842344349
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args")
      (("" (prop)
        (("" (skeep)
          (("" (expand "member" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "map" 2 3)
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (expand "map" 2 2)
                        (("1" (expand "flatten" 2 1)
                          (("1" (rewrite "map_append2")
                            (("1" (replace -1 :dir rl)
                              (("1"
                                (rewrite "sum_append" 2)
                                (("1"
                                  (lemma "size2_get_args")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "sum(map(size2)(flatten(map(get_args(f))(map(subs(delta))(cdr(args)))))) > 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 3 -3)
                                            (("2"
                                              (expand "length" -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "length" -3)
                                                  (("2"
                                                    (lift-if -3)
                                                    (("2"
                                                      (split -3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "map"
                                                             2
                                                             3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "map"
                                                                 2
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "flatten"
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "map_append2")
                                                                    (("2"
                                                                      (rewrite
                                                                       "sum_append")
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (name-replace
                                                                           "t1"
                                                                           "car(cdr(args))")
                                                                          (("2"
                                                                            (lemma
                                                                             "size2_get_args")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "size2_ge0")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -2 "cdr(args)")
                  (("2" (prop)
                    (("1" (inst -1 "delta" "f" "t")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (expand "map" 2 3)
                            (("1" (expand "map" 2 2)
                              (("1"
                                (expand "flatten" 2)
                                (("1"
                                  (rewrite "map_append2")
                                  (("1"
                                    (rewrite "sum_append")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (lift-if)
                              (("2"
                                (split 1)
                                (("1"
                                  (prop)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "length" 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand "member" -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "map" 3 3)
                                                  (("1"
                                                    (expand "map" 3 2)
                                                    (("1"
                                                      (expand
                                                       "flatten"
                                                       3)
                                                      (("1"
                                                        (rewrite
                                                         "map_append2")
                                                        (("1"
                                                          (rewrite
                                                           "sum_append")
                                                          (("1"
                                                            (expand
                                                             "map"
                                                             3
                                                             4)
                                                            (("1"
                                                              (expand
                                                               "map"
                                                               3
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "flatten"
                                                                 3)
                                                                (("1"
                                                                  (rewrite
                                                                   "map_append2")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sum_append")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "size2_get_args")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f"
                                                                           "subs(delta)(t)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (case
                                                                                   "sum(map(size2)(get_args(f)(subs(delta)(car(args))))) > 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     4)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "size2_get_args")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "size2_ge0")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size2_get_args formula-decl nil term_properties nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (size2_ge0 formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sum_append formula-decl nil list_nat_theory nil)
    (map_append2 formula-decl nil map_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (string type-eq-decl nil strings nil)
    (flatten def-decl "list[T]" list_theory nil)
    (sum def-decl "nat" list_nat_theory nil)
    (size2 def-decl "nat" term_properties nil)
    (> const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_not_same_size2 0
  (subs_not_same_size2-1 nil 3842302745
   ("" (measure-induct "size(s)" "s")
    (("" (skolem 1 "s")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (hide-all-but (-2 -4)) (("1" (grind) nil nil))
                  nil)
                 ("2" (hide -3 -5) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but (-1 -3)) (("3" (grind) nil nil))
                  nil)
                 ("4" (replace -2 -4)
                  (("4" (expand "vars" -4)
                    (("4" (expand ("member" "union") -4)
                      (("4" (prop)
                        (("1" (inst -4 "term1(s)")
                          (("1" (prop)
                            (("1" (inst -1 "X" "delta")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -4 2)
                                    (("1"
                                      (rewrite "subs_pair")
                                      (("1"
                                        (expand "size2" 2 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -4)
                                    (("2"
                                      (rewrite "subs_pair" 2)
                                      (("2"
                                        (expand "size2" 2 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (expand "subs" 2 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but 2)
                                                  (("2"
                                                    (case
                                                     "size2(subs(delta)(term2(s))) > 0")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "size2_ge0")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (inst -6 "t")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -4 "term2(s)")
                          (("2" (prop)
                            (("1" (inst -1 "X" "delta")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -4 2)
                                    (("1"
                                      (rewrite "subs_pair")
                                      (("1"
                                        (expand "size2" 2 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -4 2)
                                    (("2"
                                      (rewrite "subs_pair")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand "subs" 2 1)
                                          (("2"
                                            (expand "size2" 2 2)
                                            (("2"
                                              (hide-all-but 2)
                                              (("2"
                                                (lemma "size2_ge0")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "subs(delta)(term1(s))")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (inst -6 "t")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 -4)
                  (("5" (replace -2 2)
                    (("5" (expand "vars" -4)
                      (("5" (inst -3 "arg(s)")
                        (("5" (prop)
                          (("1" (inst -1 "X" "delta")
                            (("1" (prop)
                              (("1"
                                (rewrite "subs_app")
                                (("1"
                                  (expand "size2" 2 2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "subs_app")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (expand "size2" 2 2)
                                    (("2"
                                      (expand "subs" 2 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (inst -6 "t")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 2)
                  (("6" (rewrite "subs_ac" 2)
                    (("6" (expand "size2" 2 2)
                      (("6" (rewrite "subs_ac" 2 :dir rl)
                        (("6" (name-replace "f" "ac_sym(s)")
                          (("6" (replace -2 :dir rl)
                            (("6" (lemma "args_subs_ac")
                              (("6"
                                (inst?)
                                (("6"
                                  (replace -1)
                                  (("6"
                                    (hide -1)
                                    (("6"
                                      (expand "vars" -4)
                                      (("6"
                                        (assert)
                                        (("6"
                                          (rewrite "mem_union_map")
                                          (("6"
                                            (reveal -3)
                                            (("6"
                                              (replace -1)
                                              (("6"
                                                (skolem -5 "t1")
                                                (("6"
                                                  (prop)
                                                  (("6"
                                                    (hide -4)
                                                    (("6"
                                                      (lemma
                                                       "subs_size2_map_get_args")
                                                      (("6"
                                                        (inst
                                                         -1
                                                         "get_args(f)(s)"
                                                         "delta"
                                                         "f"
                                                         "t1")
                                                        (("6"
                                                          (assert)
                                                          (("6"
                                                            (prop)
                                                            (("1"
                                                              (reveal
                                                               -2)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "t1")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "X"
                                                                     "delta")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "subs"
                                                                           2
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           3)
                                                                          (("2"
                                                                            (skolem
                                                                             1
                                                                             "t")
                                                                            (("2"
                                                                              (inst
                                                                               -6
                                                                               "t")
                                                                              (("2"
                                                                                (prop)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subterms"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("member"
                                                                                      "union")
                                                                                     1)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "mem_union_map")
                                                                                        (("2"
                                                                                          (inst
                                                                                           2
                                                                                           "t1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "get_args_size")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "f"
                                                                       "t1"
                                                                       "s")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "is_ac_sym?"
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 "s")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "subterms"
                                                                     3)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         ("member"
                                                                          "union")
                                                                         3)
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (hide
                                                                             4)
                                                                            (("2"
                                                                              (hide
                                                                               4)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((args_subs_ac formula-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (mem_union_map formula-decl nil map_theory nil)
    (subs_size2_map_get_args formula-decl nil substitution nil)
    (get_args_len formula-decl nil term_properties nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size2_ge0 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (term_opt formula-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (size2 def-decl "nat" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (> const-decl "bool" reals nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_equal_impossible 0
  (subs_equal_impossible-1 nil 3842362315
   ("" (skeep)
    (("" (lemma "equal_size2")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "subs_not_same_size2")
            (("" (inst?)
              (("" (inst -1 "X")
                (("" (assert)
                  (("" (prop)
                    (("" (hide -3 -4 -5 1) (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (subs_not_same_size2 formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal_size2 formula-decl nil equality nil))
   shostak))
 (subs_count_ge 0
  (subs_count_ge-1 nil 3844612104
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 ("t"))
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (lemma "subs_get_args1")
                (("1" (inst -1 "f" "1" "sigma" "t")
                  (("1" (case "num_arg(f, t) = 1")
                    (("1" (assert)
                      (("1" (inst -3 "select(f, t)(1)")
                        (("1"
                          (case "count(select(f, t)(1), get_args(f)(t), equal?) > 0")
                          (("1"
                            (case "count(select(f, t)(1), get_args(f)(s), equal?) > 0")
                            (("1" (hide -2)
                              (("1"
                                (replace -3)
                                (("1"
                                  (case "num_arg(f, s) = 1")
                                  (("1"
                                    (lemma "subs_get_args1")
                                    (("1"
                                      (inst -1 "f" "1" "sigma" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "count_gt0[term]")
                                          (("1"
                                            (name-replace
                                             "t1"
                                             "select(f, t)(1)")
                                            (("1"
                                              (inst
                                               -1
                                               "equal?"
                                               "get_args(f)(s)"
                                               "t1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -1 "i")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (lemma
                                                       "get_args_nth")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f"
                                                         "i+1"
                                                         "s")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "subs_equal?")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "select(f, s)(1)"
                                                                             "sigma"
                                                                             "t1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "ac_perm_args2")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "f"
                                                                                   "subs(sigma)(select(f, s)(1))"
                                                                                   "subs(sigma)(t1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "perm?_equiv_same_count?")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "same_count?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "t2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "i")
                                                                  (("2"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nice_ind?"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (rewrite
                                                                   "get_args_len")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "num_arg(f, s) > 1")
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (lemma "count_gt0[term]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skolem -1 "i")
                                              (("1"
                                                (name-replace
                                                 "t1"
                                                 "select(f, t)(1)")
                                                (("1"
                                                  (lemma
                                                   "get_args_nth")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "nice_ind?(1 + i, num_arg(f, s))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "subs_perm_get_args_ge1")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "f"
                                                               "1+i"
                                                               "sigma"
                                                               "s")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "perm?_equiv_same_count?")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "same_count?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "t2")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "count_append")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_equal?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "select(f, s)(1 + i)"
                                                                                         "sigma"
                                                                                         "t1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "ac_perm_args2")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "f"
                                                                                               "subs(sigma)(select(f, s)(1 + i))"
                                                                                               "subs(sigma)(t1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "perm?_equiv_same_count?")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "same_count?"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "t2")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "nice_ind?"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (rewrite
                                                                   "get_args_len")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "num_arg_ge1")
                                      (("2"
                                        (inst -1 "f" "s")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (expand "get_args" 1)
                            (("2" (expand "from_min2max" 1)
                              (("2"
                                (expand "map" 1)
                                (("2"
                                  (expand "count" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "equal?_ref")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (case "num_arg(f, t) > 1")
                        (("1" (hide 1)
                          (("1" (case "num_arg(f, s) > 1")
                            (("1" (inst -3 "select(f, t)(1)")
                              (("1"
                                (case
                                 "count(select(f, t)(1), get_args(f)(t), equal?) > 0")
                                (("1"
                                  (case
                                   "count(select(f, t)(1), get_args(f)(s), equal?) > 0")
                                  (("1"
                                    (lemma "count_gt0[term]")
                                    (("1"
                                      (inst
                                       -1
                                       "equal?"
                                       "get_args(f)(s)"
                                       "select(f, t)(1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "i")
                                          (("1"
                                            (lemma "get_args_nth")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "subs_perm_get_args_ge1")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f"
                                                         "1"
                                                         "sigma"
                                                         "t")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "perm?_equiv_same_count?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "same_count?"
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "t2")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "subs_perm_get_args_ge1")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "f"
                                                                               "1+i"
                                                                               "sigma"
                                                                               "s")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "perm?_equiv_same_count?")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "same_count?"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "t2")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "count_append")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "count_append")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "subs_equal?")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "select(f, s)(1 + i)"
                                                                                                         "sigma"
                                                                                                         "select(f, t)(1)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "ac_perm_args2")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "subs(sigma)(select(f, s)(1 + i))"
                                                                                                               "subs(sigma)(select(f, t)(1))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "perm?_equiv_same_count?")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "same_count?"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "t2")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "count(t2, get_args(f)(subs(sigma)(delete(f, s)(1 + i))), equal?) >= count(t2, get_args(f)(subs(sigma)(delete(f, t)(1))), equal?)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2
                                                                                                                                         -3
                                                                                                                                         -4
                                                                                                                                         -5
                                                                                                                                         -8)
                                                                                                                                        (("2"
                                                                                                                                          (reveal
                                                                                                                                           -25)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "delete(f, t)(1)")
                                                                                                                                            (("2"
                                                                                                                                              (prop)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "f"
                                                                                                                                                 "delete(f, s)(1+i)"
                                                                                                                                                 "sigma")
                                                                                                                                                (("1"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "t2")
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (skolem
                                                                                                                                                       1
                                                                                                                                                       "t1")
                                                                                                                                                      (("2"
                                                                                                                                                        (reveal
                                                                                                                                                         -4
                                                                                                                                                         -23)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "subs_perm_get_args_ge1")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "f"
                                                                                                                                                             "1"
                                                                                                                                                             "null"
                                                                                                                                                             "t")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "subs"
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -3
                                                                                                                                                                   "t1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "perm?_equiv_same_count?")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "same_count?"
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "t1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (rewrite
                                                                                                                                                                                     "count_append")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "subs_perm_get_args_ge1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "f"
                                                                                                                                                                                         "1+i"
                                                                                                                                                                                         "null"
                                                                                                                                                                                         "s")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "subs"
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "perm?_equiv_same_count?")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "same_count?"
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         "t1")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                               "count_append")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "ac_perm_args2")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "f"
                                                                                                                                                                                                                   "select(f, s)(1+i)"
                                                                                                                                                                                                                   "select(f, t)(1)")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       "perm?_equiv_same_count?")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (inst?)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                             -2)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "same_count?"
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                 "t1")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (lemma
                                                                                                                                                 "num_arg_delete_size")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "nice_ind?"
                                                     1)
                                                    (("2"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lemma "count_mem[term]")
                                  (("2"
                                    (inst
                                     -1
                                     "equal?"
                                     "get_args(f)(t)"
                                     "select(f, t)(1)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "get_args" 1)
                                        (("2"
                                          (expand "from_min2max" 1)
                                          (("2"
                                            (expand "map" 1)
                                            (("2"
                                              (expand "member" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "num_arg(f, s) = 1")
                              (("1"
                                (name-replace "t1" "select(f, t)(1)")
                                (("1"
                                  (inst -4 "t1")
                                  (("1"
                                    (name-replace
                                     "t3"
                                     "select(f, t)(2)")
                                    (("1"
                                      (reveal -1)
                                      (("1"
                                        (inst -1 "t3")
                                        (("1"
                                          (expand "get_args" -6 1)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (expand
                                               "from_min2max"
                                               -6)
                                              (("1"
                                                (expand "map" -6)
                                                (("1"
                                                  (expand "map" -6 1)
                                                  (("1"
                                                    (expand
                                                     "count"
                                                     -6
                                                     1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "count"
                                                             -2
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "get_args"
                                                               -3
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "from_min2max"
                                                                 -3)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "get_args"
                                                                       -3
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (expand
                                                                           "from_min2max"
                                                                           -3
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "map"
                                                                             -3
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "count"
                                                                               -3
                                                                               1)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -3)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "map"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "count"
                                                                                         -2
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "count"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "from_min2max"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "map"
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "count"
                                                                                                                     -2
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "equal?_ref")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "map"
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "count"
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -6)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "equal?_ref")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            -3
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "equal?_sym")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "select(f, s)(1)"
                                                                                                               "t1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "equal?_trans")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "t3"
                                                                                                                     "select(f, s)(1)"
                                                                                                                     "t1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "map"
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "count"
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "map"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "count"
                                                                                               -1
                                                                                               1)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "from_min2max"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "map"
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "count"
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "t3"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "equal?_ref")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "map"
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "count"
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "t3"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "equal?_ref")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "count"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "get_args"
                                                               -1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "from_min2max"
                                                                 -1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "map"
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "count"
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "t1"
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "equal?_ref")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("3" (rewrite "equal?_equiv") nil nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (equal?_trans formula-decl nil equality nil)
    (equal?_sym formula-decl nil equality nil)
    (count_mem formula-decl nil list_theory nil)
    (member def-decl "bool" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (num_arg_delete_size formula-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (count_gt0 formula-decl nil list_theory nil)
    (get_args_nth formula-decl nil term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_len formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (subs_equal? formula-decl nil substitution nil)
    (perm?_equiv_same_count? formula-decl nil equality nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_append formula-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (delete def-decl "term" term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (equal?_ref formula-decl nil equality nil)
    (select def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_subs_get_args 0
  (count_subs_get_args-1 nil 3847549538
   ("" (skeep)
    (("" (expand "count" 1)
      (("" (rewrite "args_subs_ac")
        (("" (rewrite "subs_map")
          (("" (rewrite "count_flatten")
            (("" (rewrite "count_vec_equiv") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_map formula-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (count_vec_equiv formula-decl nil equality nil)
    (subs def-decl "args" substitution nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (count_flatten formula-decl nil list_theory nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (args_subs_ac formula-decl nil substitution nil))
   shostak))
 (count_subs_count_elem 0
  (count_subs_count_elem-1 nil 3847556945
   ("" (skeep)
    (("" (assert)
      ((""
        (name-replace "no_rep_args"
         "count_elem(null, null, get_args(f)(t), equal?)`1")
        ((""
          (name-replace "coef"
           "count_elem(null, null, get_args(f)(t), equal?)`2")
          (("" (lemma "count_subs_get_args")
            (("" (inst?)
              (("" (replace -1)
                (("" (hide -1)
                  (("" (lemma "perm?_get_lst_mult_count_elem_cor")
                    (("" (inst -1 "get_args(f)(t)")
                      (("" (assert)
                        (("" (reveal -4 -5)
                          (("" (replace -1)
                            (("" (replace -2)
                              ((""
                                (hide -1 -2)
                                ((""
                                  (lemma "subs_perm?")
                                  ((""
                                    (inst?)
                                    ((""
                                      (inst
                                       -1
                                       "get_lst_mult(no_rep_args, coef)")
                                      ((""
                                        (assert)
                                        ((""
                                          (hide -2)
                                          ((""
                                            (use "count_vec_perm")
                                            ((""
                                              (lemma "count_vec_perm")
                                              ((""
                                                (inst?)
                                                ((""
                                                  (inst
                                                   -1
                                                   "subs(sigma)(get_lst_mult(no_rep_args, coef))")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (replace -1)
                                                      ((""
                                                        (hide -1 -2)
                                                        ((""
                                                          (use
                                                           "subs_get_lst_mult")
                                                          ((""
                                                            (replace
                                                             -1)
                                                            ((""
                                                              (hide -1)
                                                              ((""
                                                                (use
                                                                 "count_vec_get_lst_mult")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (subs_perm? formula-decl nil substitution nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (subs_get_lst_mult formula-decl nil substitution nil)
    (count_vec_get_lst_mult formula-decl nil equality nil)
    (subs def-decl "args" substitution nil)
    (count_vec_perm formula-decl nil equality nil)
    (perm?_get_lst_mult_count_elem_cor formula-decl nil equality nil)
    (count_subs_get_args formula-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (count_subs_subset_aux 0
  (count_subs_subset_aux-2 nil 3849271606
   ("" (measure-induct "length(args2)" "args2")
    (("1" (skolem 1 "args2")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1"
              (name-replace "no_rep_args"
               "count_elem(null, null, args1, equal?)`1")
              (("1"
                (name-replace "coef"
                 "count_elem(null, null, args1, equal?)`2")
                (("1"
                  (name-replace "no_rep_args1"
                   "count_coef(args2, args1, equal?)`1")
                  (("1"
                    (name-replace "coef1"
                     "count_coef(args2, args1, equal?)`2")
                    (("1" (expand "no_rep_args1" 1)
                      (("1" (expand "count_coef" 1 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "subs" 1 2)
                              (("1"
                                (expand "count_vec" 1 2)
                                (("1"
                                  (expand "dot_product" 1 2)
                                  (("1"
                                    (case "null?(no_rep_args)")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (case "null?(args1)")
                                      (("1"
                                        (expand "no_rep_args" 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "subset_lst?" -2)
                                        (("2"
                                          (inst -2 "car(args1)")
                                          (("1" (grind) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (name-replace "x" "car(args2)")
                              (("2"
                                (expand "subs" 2 2)
                                (("2"
                                  (expand "coef1" 2)
                                  (("2"
                                    (expand "count_coef" 2 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (case
                                             "count(x, args1, equal?) > 0")
                                            (("1"
                                              (expand "count_vec" 2 2)
                                              (("1"
                                                (expand
                                                 "dot_product"
                                                 2
                                                 2)
                                                (("1"
                                                  (use
                                                   "count_gt0_2[term]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skolem -1 "x1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (reveal
                                                           -5
                                                           -6)
                                                          (("1"
                                                            (rewrite
                                                             "count_elem2_cor"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "count_elem_mem_nth")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "equal?"
                                                                 "args1"
                                                                 "x1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "count_elem2_cor"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             "i")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lemma
                                                                                 "dot_product_nth")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "i"
                                                                                   "count_vec(subs(sigma)(no_rep_args), f)(s)"
                                                                                   "coef")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "nth(count_vec(subs(sigma)(no_rep_args), f)(s), i) * nth(coef, i) = count(s, subs(sigma)(x), f) * count(x, args1, equal?)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "count_vec_map")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "remove_map")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "subs_map"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "x2"
                                                                                                         "nth(no_rep_args, i)")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -14)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "cdr(args2)")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "remove(args1, x, equal?)"
                                                                                                                   "f"
                                                                                                                   "s"
                                                                                                                   "sigma")
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "count_elem2_cor"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "subs_map")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "count_vec_map")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "subs_remove")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "count_elem2(remove(args1, x, equal?), equal?)`1 = remove(no_rep_args, i) AND  count_elem2(remove(args1, x, equal?), equal?)`2 = remove(coef, i)")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2
                                                                                                                                         -3)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "count_coef_remove_no_effect[term]")
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (skolem
                                                                                                                                                 1
                                                                                                                                                 "y")
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "dif_elem?"
                                                                                                                                                     -11)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "member_nth2"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (skolem
                                                                                                                                                         -1
                                                                                                                                                         "j")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -11
                                                                                                                                                           "j+1"
                                                                                                                                                           "0")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "j")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "length"
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "nth"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "count_elem_remove")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "equal?"
                                                                                                                                       "i"
                                                                                                                                       "args1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "count_elem2_cor"
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -3)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -4)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "count_elem2_cor"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -6)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "remove_elem_eq[term]")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "equal?"
                                                                                                                                                             "args1"
                                                                                                                                                             "x"
                                                                                                                                                             "x2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2
                                                                                                                                                                     :dir
                                                                                                                                                                     rl)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   (-2
                                                                                                                                                                    -5
                                                                                                                                                                    1))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "equal?_trans")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "x"
                                                                                                                                                                       "x1"
                                                                                                                                                                       "x2")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -4)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "no_rep_args"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subset_lst?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           "y")
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subset_lst?"
                                                                                                                               -9)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -9
                                                                                                                                 "y")
                                                                                                                                (("2"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member"
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -9)
                                                                                                                                          (("1"
                                                                                                                                            (use
                                                                                                                                             "remove_elem_cor[term]")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "count0_eq[term]")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "x")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "equal?_ref")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (use
                                                                                                                                     "remove_elem_mem2[term]")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide
                                                                                                                       3)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "dif_elem?"
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           ("n1"
                                                                                                                            "n2"))
                                                                                                                          (("3"
                                                                                                                            (prop)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "dif_elem?"
                                                                                                                               -12)
                                                                                                                              (("3"
                                                                                                                                (inst
                                                                                                                                 -12
                                                                                                                                 "n1+1"
                                                                                                                                 "n2+1")
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     3)
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       3)
                                                                                                                                      (("3"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   3)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           3)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "count_vec_nth"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "subs_map"
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "map_nth_rw"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "x2"
                                                                                                       "nth(no_rep_args, i)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "count_eq[term]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "equal?"
                                                                                                           "args1"
                                                                                                           "x"
                                                                                                           "x1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "count_eq2")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "f"
                                                                                                                   "s"
                                                                                                                   "subs(sigma)(x)"
                                                                                                                   "subs(sigma)(x2)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "subs_equal?")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x2"
                                                                                                                           "sigma"
                                                                                                                           "x")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "equal?_trans")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "x"
                                                                                                                                 "x1"
                                                                                                                                 "x2")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (rewrite
                                                                                                   "subs_len")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "count_vec_len")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "subs_len")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("3"
                                                                                        (expand
                                                                                         "coef"
                                                                                         1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "no_rep_args"
                                                                                           -1)
                                                                                          (("3"
                                                                                            (use
                                                                                             "count_elem_len[term]")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "count(x, args1, equal?) = 0")
                                              (("1"
                                                (expand
                                                 "count_vec"
                                                 3
                                                 2)
                                                (("1"
                                                  (expand
                                                   "dot_product"
                                                   3
                                                   2)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (reveal -6)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(args2)")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     -5
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "subset_lst?"
                                                                       1)
                                                                      (("2"
                                                                        (skolem
                                                                         1
                                                                         "y")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (expand
                                                                             "subset_lst?"
                                                                             -4)
                                                                            (("2"
                                                                              (inst
                                                                               -4
                                                                               "y")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (use
                                                                                     "count0_eq[term]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "y")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "equal?_ref")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     3)
                                                                    (("3"
                                                                      (expand
                                                                       "dif_elem?"
                                                                       1)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "dif_elem?"
                                                                           -7)
                                                                          (("3"
                                                                            (inst
                                                                             -7
                                                                             "i+1 "
                                                                             "j+1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (rewrite "equal?_equiv") nil nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (count_gt0_2 formula-decl nil list_theory nil)
    (count_elem_mem_nth formula-decl nil more_list_theory_props nil)
    (count_elem_len formula-decl nil list_theory nil)
    (count_vec_len formula-decl nil equality nil)
    (subs_len formula-decl nil substitution nil)
    (subs_equal? formula-decl nil substitution nil)
    (count_eq2 formula-decl nil equality nil)
    (count_eq formula-decl nil list_theory nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (count_vec_nth formula-decl nil equality nil)
    (count_vec_map formula-decl nil equality nil)
    (subs_map formula-decl nil substitution nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (count0_eq formula-decl nil list_theory nil)
    (equal?_ref formula-decl nil equality nil)
    (remove_elem_cor formula-decl nil list_theory nil)
    (remove_elem_mem2 formula-decl nil list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (count_coef_remove_no_effect formula-decl nil list_theory nil)
    (member_nth2 formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove_elem_eq formula-decl nil list_theory nil)
    (equal?_trans formula-decl nil equality nil)
    (count_elem_remove formula-decl nil more_list_theory_props nil)
    (subs_remove formula-decl nil substitution nil)
    (remove_map formula-decl nil map_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dot_product_nth formula-decl nil more_list_theory_props nil)
    (count_elem2_cor formula-decl nil more_list_theory_props nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (> const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs def-decl "args" substitution nil)
    (count_vec def-decl "list[nat]" equality nil)
    (string type-eq-decl nil strings nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (subset_lst? const-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (count_subs_subset_aux-1 nil 3847728275
   ("" (measure-induct "length(args2)" "args2")
    (("1" (skolem 1 "args2")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1"
              (name-replace "no_rep_args"
               "count_elem(null, null, args1, equal?)`1")
              (("1"
                (name-replace "coef"
                 "count_elem(null, null, args1, equal?)`2")
                (("1"
                  (name-replace "no_rep_args1"
                   "count_coef(args2, args1, equal?)`1")
                  (("1"
                    (name-replace "coef1"
                     "count_coef(args2, args1, equal?)`2")
                    (("1" (expand "no_rep_args1" 1)
                      (("1" (expand "count_coef" 1 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "subs" 1 2)
                              (("1"
                                (expand "count_vec" 1 2)
                                (("1"
                                  (expand "dot_product" 1 2)
                                  (("1"
                                    (case "null?(no_rep_args)")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (case "null?(args1)")
                                      (("1"
                                        (expand "no_rep_args" 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "subset?" -2)
                                        (("2"
                                          (inst -2 "car(args1)")
                                          (("1" (grind) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (name-replace "x" "car(args2)")
                              (("2"
                                (expand "subs" 2 2)
                                (("2"
                                  (expand "coef1" 2)
                                  (("2"
                                    (expand "count_coef" 2 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (case
                                             "count(x, args1, equal?) > 0")
                                            (("1"
                                              (expand "count_vec" 2 2)
                                              (("1"
                                                (expand
                                                 "dot_product"
                                                 2
                                                 2)
                                                (("1"
                                                  (use
                                                   "count_gt0_2[term]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skolem -1 "x1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (reveal
                                                           -5
                                                           -6)
                                                          (("1"
                                                            (rewrite
                                                             "count_elem2_cor"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "count_elem_mem_nth")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "equal?"
                                                                 "args1"
                                                                 "x1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "count_elem2_cor"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             "i")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lemma
                                                                                 "dot_product_nth")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "i"
                                                                                   "count_vec(subs(sigma)(no_rep_args), f)(s)"
                                                                                   "coef")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "nth(count_vec(subs(sigma)(no_rep_args), f)(s), i) * nth(coef, i) = count(s, subs(sigma)(x), f) * count(x, args1, equal?)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "count_vec_map")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "remove_map")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "subs_map"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "x2"
                                                                                                         "nth(no_rep_args, i)")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -14)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "cdr(args2)")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "remove(args1, x, equal?)"
                                                                                                                   "f"
                                                                                                                   "s"
                                                                                                                   "sigma")
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "count_elem2_cor"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "subs_map")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "count_vec_map")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "subs_remove")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "count_elem2(remove(args1, x, equal?), equal?)`1 = remove(no_rep_args, i) AND  count_elem2(remove(args1, x, equal?), equal?)`2 = remove(coef, i)")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2
                                                                                                                                         -3)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "count_coef_remove_no_effect[term]")
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (skolem
                                                                                                                                                 1
                                                                                                                                                 "y")
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "dif_elem?"
                                                                                                                                                     -11)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "member_nth2"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (skolem
                                                                                                                                                         -1
                                                                                                                                                         "j")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -11
                                                                                                                                                           "j+1"
                                                                                                                                                           "0")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "j")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "length"
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "nth"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "count_elem_remove")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "equal?"
                                                                                                                                       "i"
                                                                                                                                       "args1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "count_elem2_cor"
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -3)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -4)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "count_elem2_cor"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -6)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "remove_elem_eq[term]")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "equal?"
                                                                                                                                                             "args1"
                                                                                                                                                             "x"
                                                                                                                                                             "x2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2
                                                                                                                                                                     :dir
                                                                                                                                                                     rl)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   (-2
                                                                                                                                                                    -5
                                                                                                                                                                    1))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "equal?_trans")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "x"
                                                                                                                                                                       "x1"
                                                                                                                                                                       "x2")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -4)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "no_rep_args"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subset?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           "y")
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subset?"
                                                                                                                               -9)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -9
                                                                                                                                 "y")
                                                                                                                                (("2"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member"
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -9)
                                                                                                                                          (("1"
                                                                                                                                            (use
                                                                                                                                             "remove_elem_cor[term]")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "count0_eq[term]")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "x")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "equal?_ref")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (use
                                                                                                                                     "remove_elem_mem2[term]")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide
                                                                                                                       3)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "dif_elem?"
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           ("n1"
                                                                                                                            "n2"))
                                                                                                                          (("3"
                                                                                                                            (prop)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "dif_elem?"
                                                                                                                               -12)
                                                                                                                              (("3"
                                                                                                                                (inst
                                                                                                                                 -12
                                                                                                                                 "n1+1"
                                                                                                                                 "n2+1")
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     3)
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       3)
                                                                                                                                      (("3"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   3)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           3)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "count_vec_nth"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "subs_map"
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "map_nth_rw"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "x2"
                                                                                                       "nth(no_rep_args, i)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "count_eq[term]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "equal?"
                                                                                                           "args1"
                                                                                                           "x"
                                                                                                           "x1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "count_eq2")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "f"
                                                                                                                   "s"
                                                                                                                   "subs(sigma)(x)"
                                                                                                                   "subs(sigma)(x2)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "subs_equal?")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x2"
                                                                                                                           "sigma"
                                                                                                                           "x")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "equal?_trans")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "x"
                                                                                                                                 "x1"
                                                                                                                                 "x2")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (rewrite
                                                                                                   "subs_len")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "count_vec_len")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "subs_len")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("3"
                                                                                        (expand
                                                                                         "coef"
                                                                                         1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "no_rep_args"
                                                                                           -1)
                                                                                          (("3"
                                                                                            (use
                                                                                             "count_elem_len[term]")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "count(x, args1, equal?) = 0")
                                              (("1"
                                                (expand
                                                 "count_vec"
                                                 3
                                                 2)
                                                (("1"
                                                  (expand
                                                   "dot_product"
                                                   3
                                                   2)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (reveal -6)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(args2)")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     -5
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "subset?"
                                                                       1)
                                                                      (("2"
                                                                        (skolem
                                                                         1
                                                                         "y")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -4)
                                                                            (("2"
                                                                              (inst
                                                                               -4
                                                                               "y")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (use
                                                                                     "count0_eq[term]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "y")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "equal?_ref")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     3)
                                                                    (("3"
                                                                      (expand
                                                                       "dif_elem?"
                                                                       1)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "dif_elem?"
                                                                           -7)
                                                                          (("3"
                                                                            (inst
                                                                             -7
                                                                             "i+1 "
                                                                             "j+1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (rewrite "equal?_equiv") nil nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (equivalence? const-decl "bool" relations nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (string type-eq-decl nil strings nil)
    (count_vec def-decl "list[nat]" equality nil)
    (subs def-decl "args" substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (> const-decl "bool" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (count_elem2_cor formula-decl nil more_list_theory_props nil)
    (dot_product_nth formula-decl nil more_list_theory_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_map formula-decl nil map_theory nil)
    (subs_remove formula-decl nil substitution nil)
    (count_elem_remove formula-decl nil more_list_theory_props nil)
    (equal?_trans formula-decl nil equality nil)
    (remove_elem_eq formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (member_nth2 formula-decl nil list_theory nil)
    (count_coef_remove_no_effect formula-decl nil list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (remove_elem_mem2 formula-decl nil list_theory nil)
    (remove_elem_cor formula-decl nil list_theory nil)
    (equal?_ref formula-decl nil equality nil)
    (count0_eq formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (subs_map formula-decl nil substitution nil)
    (count_vec_map formula-decl nil equality nil)
    (count_vec_nth formula-decl nil equality nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (count_eq formula-decl nil list_theory nil)
    (count_eq2 formula-decl nil equality nil)
    (subs_equal? formula-decl nil substitution nil)
    (subs_len formula-decl nil substitution nil)
    (count_vec_len formula-decl nil equality nil)
    (count_elem_len formula-decl nil list_theory nil)
    (count_elem_mem_nth formula-decl nil more_list_theory_props nil)
    (count_gt0_2 formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (equal?_equiv formula-decl nil equality nil))
   shostak))
 (count_subs_subset 0
  (count_subs_subset-1 nil 3847728238
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (lemma "count_subs_count_elem")
          (("" (inst?)
            (("" (assert)
              (("" (replace -1)
                (("" (hide -1)
                  (("" (lemma "count_subs_subset_aux")
                    ((""
                      (inst -1 "get_args(f)(t)" "args1" "f" "s"
                       "sigma")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_subs_count_elem formula-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (count_subs_subset_aux formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (subs_inst 0
  (subs_inst-1 nil 3850211965
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "delta" "cons((X, t), null)")
        (("" (prop)
          (("" (expand "equal?" 1)
            (("" (skolem 1 "Z")
              (("" (case "Z = X")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (expand "subs" 1 1)
                      (("1" (expand "subs" 1 2)
                        (("1" (rewrite "subs_append2")
                          (("1" (expand "delta" 1)
                            (("1" (expand "subs" 1 3)
                              (("1"
                                (expand "subs" 1 4)
                                (("1"
                                  (expand "subs" 1 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subs" 2 2)
                  (("2" (rewrite "subs_append2")
                    (("2" (expand "delta" 2)
                      (("2" (expand "subs" 2 3)
                        (("2" (expand "subs" 2 4)
                          (("2" (expand "subs" 2 3)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "subs" 2 1)
                                  (("2" (use "equal?_ref") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_ref formula-decl nil equality nil)
    (subs const-decl "term" substitution nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (contained_append 0
  (contained_append-1 nil 3851181254
   ("" (skeep)
    (("" (expand "contained?")
      (("" (prop)
        (("1" (expand "subset?" 1)
          (("1" (skeep)
            (("1" (use "dom_append")
              (("1" (expand "subset?" -1)
                (("1" (inst -1 "x")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "vars_img_append")
          (("2" (expand "subset?" 1)
            (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((contained? const-decl "bool" substitution nil)
    (vars_img_append formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (dom_append formula-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (empty? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (contained_supset 0
  (contained_supset-1 nil 3851280430
   ("" (skeep)
    (("" (expand "contained?")
      (("" (prop)
        (("1" (expand "subset?" 1)
          (("1" (skeep)
            (("1" (expand "subset?") (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((contained? const-decl "bool" substitution nil)
    (subset? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (more_general_equal 0
  (more_general_equal-1 nil 3851254838
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "more_general?" -1)
          (("1" (skolem -1 "del1")
            (("1" (expand "more_general?")
              (("1" (inst 1 "del1")
                (("1" (lemma "equal_sub_trans")
                  (("1"
                    (inst -1 "sigma1" "sigma" "append(del1, delta)")
                    (("1" (assert)
                      (("1" (rewrite "equal_sub_sym") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "more_general?")
          (("2" (skolem -1 "del")
            (("2" (inst 1 "del")
              (("2" (lemma "equal_sub_trans")
                (("2" (inst -1 "sigma" "sigma1" "append(del, delta)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_sub_trans formula-decl nil substitution nil)
    (equal_sub_sym formula-decl nil substitution nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (more_general_append 0
  (more_general_append-1 nil 3851257011
   ("" (skeep)
    (("" (expand "more_general?" -1)
      (("" (skolem -1 "gamma")
        (("" (expand "more_general?" 1)
          (("" (inst 1 "gamma")
            (("" (expand "equal?" 1)
              (("" (skolem 1 "x")
                (("" (expand "subs")
                  (("" (rewrite "subs_append2")
                    (("" (rewrite "subs_append2")
                      (("" (rewrite "subs_append2")
                        (("" (lemma "equal_sub_equiv")
                          ((""
                            (inst -1 "sigma1" "append(gamma, sigma)"
                             "subs(delta)(variable(x))")
                            (("" (assert)
                              (("" (rewrite "subs_append2") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    nil (equal_sub_equiv formula-decl nil substitution nil)
    (append def-decl "list[T]" list_props nil)
    (subs const-decl "term" substitution nil) nil nil)
   shostak))
 (more_general_supset 0
  (more_general_supset-1 nil 3851191210
   ("" (skeep)
    (("" (expand "more_general?" -1)
      (("" (skolem -1 "sig1")
        (("" (expand "more_general?" 1)
          (("" (inst 1 "sig1")
            (("" (expand "equal?" 1)
              (("" (skolem 1 "x")
                (("" (prop)
                  (("" (expand "equal?" -1)
                    (("" (inst -1 "x")
                      (("" (expand "subset?" -2)
                        (("" (inst -2 "x")
                          (("" (assert)
                            (("" (assert)
                              ((""
                                (expand "subs")
                                ((""
                                  (rewrite "subs_append2")
                                  ((""
                                    (rewrite "subs_append2")
                                    ((""
                                      (case
                                       "subs(delta1)(subs(delta)(variable(x))) = subs(delta)(variable(x))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (lemma "subs_no_effect_t")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "disjoint?" 1)
                                                (("2"
                                                  (expand "empty?" 1)
                                                  (("2"
                                                    (skolem 1 "x1")
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "intersection")
                                                       -1)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (use
                                                           "vars_subs_t")
                                                          (("2"
                                                            (expand
                                                             "subset?"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   ("member"
                                                                    "union")
                                                                   -1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "disjoint?"
                                                                       -5)
                                                                      (("1"
                                                                        (expand
                                                                         "empty?"
                                                                         -5)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "x1")
                                                                          (("1"
                                                                            (expand
                                                                             ("member"
                                                                              "intersection")
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "contained?"
                                                                               -5)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subset?"
                                                                                   -6)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -6
                                                                                     "x1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "disjoint?"
                                                                       -5)
                                                                      (("2"
                                                                        (expand
                                                                         "empty?"
                                                                         -5)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "x1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_append2 formula-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil substitution nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (contained? const-decl "bool" substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs const-decl "term" substitution nil)
    (subset? const-decl "bool" sets nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

