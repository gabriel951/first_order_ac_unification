(apply_ac_step
 (input_apply_ac_step_TCC1 0
  (input_apply_ac_step_TCC2-1 nil 3831661915
   ("" (termination-tcc) nil nil) nil nil
   (input_apply_ac_step subtype "apply_ac_step.ac_results_subs"
    "(list_adt[[unification.unif_prb, substitution.sub]].cons?)")))
 (input_apply_ac_step_TCC2 0
  (input_apply_ac_step_TCC1-1 nil 3831661915
   ("" (termination-tcc) nil nil) nil nil
   (input_apply_ac_step termination
    "apply_ac_step.input_apply_ac_step(list_adt[[unification.unif_prb, substitution.sub]].cdr(apply_ac_step.ac_results_subs), apply_ac_step.unseen_unif_prb, apply_ac_step.seen_unif_prb, apply_ac_step.sigma, apply_ac_step.vars2avoid)"
    "nil")))
 (input_apply_ac_step_TCC3 0
  (input_apply_ac_step_TCC3-1 nil 3831826520 ("" (subtype-tcc) nil nil)
   nil nil
   (input_apply_ac_step subtype "apply_ac_step.ac_results_subs"
    "(list_adt[[unification.unif_prb, substitution.sub]].cons?)")))
 (apply_ac_step_TCC1 0
  (apply_ac_step_TCC1-1 nil 3831661915 ("" (subtype-tcc) nil nil) nil
   nil
   (apply_ac_step subtype "apply_ac_step.t"
    "(term_adt[constant, variable, f_symbol, ac_symbol].ac_app?)")))
 (apply_ac_step_TCC2 0
  (apply_ac_step_TCC2-1 nil 3831661915 ("" (subtype-tcc) nil nil) nil
   nil
   (apply_ac_step subtype "apply_ac_step.unseen_unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (apply_ac_step_TCC3 0
  (apply_ac_step_TCC4-1 nil 3831661915 ("" (termination-tcc) nil nil)
   nil nil
   (apply_ac_step termination-subtype "apply_ac_step.input_lst"
    "[{z: [unification.unif_prb, unification.unif_prb, substitution.sub, finite_set[variable]] | reals.<(list_props[unif_pair].length(z`1), list_props[unif_pair].length(apply_ac_step.unseen_unif_prb))} -> list_adt[ac_sol_simp].list]")))
 (apply_ac_step_TCC4 0
  (apply_ac_step_TCC5-1 nil 3831661915 ("" (subtype-tcc) nil nil) nil
   nil
   (apply_ac_step subtype "apply_ac_step.unseen_unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (add_subs_TCC1 0
  (add_subs_TCC1-1 nil 3831826520 ("" (subtype-tcc) nil nil) nil nil
   (add_subs subtype "apply_ac_step.ac_sol_simp_lst"
    "(list_adt[ac_sol_simp].cons?)")))
 (add_subs_TCC2 0
  (add_subs_TCC2-1 nil 3831826520 ("" (termination-tcc) nil nil) nil
   nil
   (add_subs termination
    "apply_ac_step.add_subs(list_adt[ac_sol_simp].cdr(apply_ac_step.ac_sol_simp_lst), apply_ac_step.sigma)"
    "nil")))
 (add_subs_TCC3 0
  (add_subs_TCC3-1 nil 3831826520 ("" (subtype-tcc) nil nil) nil nil
   (add_subs subtype "apply_ac_step.ac_sol_simp_lst"
    "(list_adt[ac_sol_simp].cons?)")))
 (add_subs_len 0
  (add_subs_len-1 nil 3831662314
   ("" (induct "ac_sol_simp_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "add_subs" 1)
            (("2" (expand "length" 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (add_subs def-decl "list[ac_sol_simp]" apply_ac_step nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (add_subs_nth_mem_TCC1 0
  (add_subs_nth_mem_TCC1-1 nil 3831662313 ("" (subtype-tcc) nil nil)
   nil nil
   (add_subs_nth_mem subtype "apply_ac_step.i"
    "below[length[ac_sol_simp](add_subs(ac_sol_simp_lst, sigma))]")))
 (add_subs_nth_mem 0
  (add_subs_nth_mem-1 nil 3831662407
   ("" (induct "ac_sol_simp_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "nth" 2 2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (expand "add_subs" 2)
                        (("2" (inst -1 "i-1" "sigma")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "add_subs_len") nil nil)) nil))
      nil))
    nil)
   ((add_subs_len formula-decl nil apply_ac_step nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (add_subs def-decl "list[ac_sol_simp]" apply_ac_step nil))
   shostak))
 (input_apply_ac_step_mem 0
  (input_apply_ac_step_mem-1 nil 3831826546
   ("" (measure-induct "length(ac_results_subs)" "ac_results_subs")
    (("" (skolem 1 "ac_results_subs")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "input_apply_ac_step" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (expand "member" -2) (("1" (propax) nil nil))
                    nil)
                   ("2" (expand "member" -1)
                    (("2" (prop)
                      (("1" (inst? 2)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (reveal -1)
                        (("2" (inst -1 "cdr(ac_results_subs)")
                          (("2" (prop)
                            (("1" (inst? -1)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (skolem -1 ("unif_prb1" "delta"))
                                    (("1"
                                      (inst 2 "unif_prb1" "delta")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (input_apply_ac_step def-decl
     "list[[unif_prb, unif_prb, sub, finite_set[variable]]]"
     apply_ac_step nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (input_apply_ac_step_sigma_null 0
  (input_apply_ac_step_sigma_null-2 nil 3832009669
   ("" (measure-induct "length(ac_results_subs)" "ac_results_subs")
    (("" (skolem 1 "ac_results_subs")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (prop)
              (("1" (expand "input_apply_ac_step" -1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand "member" -2) (("1" (propax) nil nil))
                      nil)
                     ("2" (expand "member" -1)
                      (("2" (prop)
                        (("1"
                          (inst 2
                           "(input`1, input`2, car(ac_results_subs)`2, input`4)")
                          (("1" (assert)
                            (("1" (expand "input_apply_ac_step" 2)
                              (("1"
                                (expand "member" 2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide 3)
                                    (("1"
                                      (rewrite "append_null")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "cdr(ac_results_subs)")
                            (("2" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 2 "input2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "input_apply_ac_step"
                                             2)
                                            (("1"
                                              (expand "member" 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "input_apply_ac_step" -1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "member" -2)
                        (("1" (propax) nil nil)) nil)
                       ("2" (expand "member" -1)
                        (("2" (prop)
                          (("1" (expand "input_apply_ac_step" 2)
                            (("1" (assert)
                              (("1"
                                (expand "member" 2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide 3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "append_null")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (decompose-equality 2)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "input_apply_ac_step" 2)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "member" 2)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (inst
                                           -1
                                           "cdr(ac_results_subs)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "input"
                                               "seen_unif_prb"
                                               "sigma"
                                               "unseen_unif_prb"
                                               "vars2avoid")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 3)
                                                  (("1"
                                                    (inst 1 "input2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (input_apply_ac_step def-decl
     "list[[unif_prb, unif_prb, sub, finite_set[variable]]]"
     apply_ac_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append_null formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (input_apply_ac_step_sigma_null-1 nil 3832008685
   ("" (measure-induct "length(unseen_unif_prb)" "unseen_unif_prb")
    (("" (skolem 1 "unseen_unif_prb")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (prop)
              (("1" (expand "input_apply_ac_step" -1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand "member" -2) (("1" (propax) nil nil))
                      nil)
                     ("2" (expand "member" -1)
                      (("2" (prop)
                        (("1"
                          (inst 2
                           "(input`1, input`2, car(ac_results_subs)`2, input`4)")
                          (("1" (assert)
                            (("1" (expand "input_apply_ac_step" 2)
                              (("1"
                                (expand "member" 2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide 3)
                                    (("1"
                                      (rewrite "append_null")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -1) (("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (apply_ac_step_sigma_null 0
  (apply_ac_step_sigma_null-1 nil 3832000949
   ("" (measure-induct "length(unseen_unif_prb)" "unseen_unif_prb")
    (("" (skolem 1 ("unseen_unif_prb"))
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (prop)
              (("1" (expand "apply_ac_step" -1 1)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "member" -1)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "member" -2)
                            (("1" (prop)
                              (("1"
                                (inst
                                 1
                                 "(seen_unif_prb, null, vars2avoid)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "append" 1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "member" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (name-replace "cur_vars2avoid"
                             "union(vars(unseen_unif_prb), union(vars2avoid, vars(seen_unif_prb)))")
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "member" -2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (name-replace
                                 "unif_pair"
                                 "car(unseen_unif_prb)")
                                (("2"
                                  (name-replace "t" "unif_pair`1")
                                  (("2"
                                    (name-replace "s" "unif_pair`2")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (name-replace
                                         "lst_vars2avoid"
                                         "finset2list[variable](cur_vars2avoid)")
                                        (("2"
                                          (name-replace
                                           "ac_results"
                                           "first_proj(solve_ac(t, s, lst_vars2avoid, ac_sym(t)))")
                                          (("2"
                                            (name-replace
                                             "new_vars2avoid"
                                             "vars(sec_proj(solve_ac(t, s, lst_vars2avoid, ac_sym(t))))")
                                            (("2"
                                              (name-replace
                                               "ac_results_subs"
                                               "instantiate_step(ac_results)")
                                              (("2"
                                                (name-replace
                                                 "input_lst"
                                                 "input_apply_ac_step(ac_results_subs, cdr(unseen_unif_prb), seen_unif_prb, sigma, new_vars2avoid)")
                                                (("2"
                                                  (lemma
                                                   "mem_flatten_map2[[unif_prb, unif_prb, sub, finite_set[variable]], ac_sol_simp]")
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skolem
                                                         -1
                                                         "input")
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "input_lst")
                                                              (("2"
                                                                (lemma
                                                                 "input_apply_ac_step_mem")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5)
                                                                        (("2"
                                                                          (reveal
                                                                           -18)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "input`1")
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "ac_sol"
                                                                                   "input`2"
                                                                                   "input`3"
                                                                                   "input`4")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         3
                                                                                         "(ac_sol1`1, append(ac_sol1`2, delta), ac_sol1`3)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -6)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "append_assoc")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "apply_ac_step"
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13
                                                                                                         -14
                                                                                                         -15
                                                                                                         -16
                                                                                                         -17
                                                                                                         -18
                                                                                                         -19)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -9
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -9)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -7)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -6)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -5)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -5)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -3)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (name-replace
                                                                                                                                               "input_lst2"
                                                                                                                                               "input_apply_ac_step(ac_results_subs, cdr(unseen_unif_prb), seen_unif_prb, null, new_vars2avoid)")
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "mem_flatten_map2[[unif_prb, unif_prb, sub, finite_set[variable]], ac_sol_simp]")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       4)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (reveal
                                                                                                                                                           -3)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -3)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "input_apply_ac_step_sigma_null")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (skolem
                                                                                                                                                                     -1
                                                                                                                                                                     "input2")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         1
                                                                                                                                                                         "input2")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (reveal
                                                                                                                                                                               -22)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -7
                                                                                                                                                                                 -8
                                                                                                                                                                                 -14)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "input2`1")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (prop)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "(ac_sol1`1, append(ac_sol1`2, delta), ac_sol1`3)"
                                                                                                                                                                                         "input2`2"
                                                                                                                                                                                         "input2`3"
                                                                                                                                                                                         "input2`4")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               1
                                                                                                                                                                                               "ac_sol1")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (reveal
                                                                                                                                                                                                   -11)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     -4)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (case
                                                                                                                                                                                                       "delta = input2`3")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                                         (-4
                                                                                                                                                                                                          1))
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "equal_append_implies_equal[basic_sub]")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst?
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1
                                                                                                                                                                                         1
                                                                                                                                                                                         :dir
                                                                                                                                                                                         rl)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (reveal
                                                                                                                                                                                           -8)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (rewrite
                                                                                                                                                                                               "apply_sub_len")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (reveal
                                                                                 -2)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "apply_sub_len")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "apply_ac_step" -1 1)
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (expand "member" -1)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "member" -2)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "apply_ac_step" 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality 1)
                                              (("1"
                                                (replace -5)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "member" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (name-replace "unif_pair"
                               "car(unseen_unif_prb)")
                              (("1"
                                (name-replace "t" "unif_pair`1")
                                (("1"
                                  (name-replace "s" "unif_pair`2")
                                  (("1"
                                    (name-replace
                                     "cur_vars2avoid"
                                     "union(vars(unseen_unif_prb), union(vars2avoid, vars(seen_unif_prb)))")
                                    (("1"
                                      (name-replace
                                       "lst_vars2avoid"
                                       "finset2list[variable](cur_vars2avoid)")
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "member" -2)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (name-replace
                                             "ac_results"
                                             "first_proj(solve_ac(t, s, lst_vars2avoid, ac_sym(t)))")
                                            (("2"
                                              (name-replace
                                               "new_vars2avoid"
                                               "vars(sec_proj(solve_ac(t, s, lst_vars2avoid, ac_sym(t))))")
                                              (("2"
                                                (name-replace
                                                 "ac_results_subs"
                                                 "instantiate_step(ac_results)")
                                                (("2"
                                                  (name-replace
                                                   "input_lst"
                                                   "input_apply_ac_step(ac_results_subs, cdr(unseen_unif_prb), seen_unif_prb, null, new_vars2avoid)")
                                                  (("2"
                                                    (lemma
                                                     "mem_flatten_map2[[unif_prb, unif_prb, sub, finite_set[variable]], ac_sol_simp]")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skolem
                                                           -1
                                                           "input")
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (expand
                                                               "input_lst"
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -3)
                                                                (("2"
                                                                  (hide
                                                                   -3)
                                                                  (("2"
                                                                    (lemma
                                                                     "input_apply_ac_step_mem")
                                                                    (("2"
                                                                      (inst?
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5)
                                                                            (("2"
                                                                              (reveal
                                                                               -19)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "input`1")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "ac_sol1"
                                                                                     "input`2"
                                                                                     "input`3"
                                                                                     "input`4")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         "ac_sol2")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -7
                                                                                             -8
                                                                                             -9)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "apply_ac_step"
                                                                                               3)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 -15
                                                                                                 -16
                                                                                                 -17
                                                                                                 -18
                                                                                                 -19
                                                                                                 -20
                                                                                                 -21
                                                                                                 -22)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -8)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -7)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -7)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -6)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -5)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -3)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (name-replace
                                                                                                                                       "input_lst2"
                                                                                                                                       "input_apply_ac_step(ac_results_subs, cdr(unseen_unif_prb), seen_unif_prb, sigma, new_vars2avoid)")
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "mem_flatten_map2[[unif_prb, unif_prb, sub, finite_set[variable]], ac_sol_simp]")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "input_lst2")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "(input`1, input`2, append(input`3, sigma), input`4)")
                                                                                                                                                  (("1"
                                                                                                                                                    (prop)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "input_apply_ac_step_sigma_null")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               1
                                                                                                                                                               "input")
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (reveal
                                                                                                                                                       -24)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "input`1")
                                                                                                                                                        (("2"
                                                                                                                                                          (prop)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "ac_sol"
                                                                                                                                                             "input`2"
                                                                                                                                                             "append(input`3, sigma)"
                                                                                                                                                             "input`4")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   1
                                                                                                                                                                   "ac_sol2")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (reveal
                                                                                                                                                                       -3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -4)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "append_assoc")
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (reveal
                                                                                                                                                             -7)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "apply_sub_len")
                                                                                                                                                                (("2"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (reveal
                                                                                     -2)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "apply_sub_len")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (apply_ac_step def-decl "list[ac_sol_simp]" apply_ac_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (input_lst2 skolem-const-decl
     "list[[unif_prb, unif_prb, sub, finite_set[variable]]]"
     apply_ac_step nil)
    (input_lst skolem-const-decl
     "list[[unif_prb, unif_prb, sub, finite_set[variable]]]"
     apply_ac_step nil)
    (all_ac_prb? const-decl "bool" unification nil)
    (ac_prb? const-decl "bool" unification nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finset2list def-decl "list[T]" list_theory nil)
    (every adt-def-decl "boolean" list_adt nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (input_apply_ac_step def-decl
     "list[[unif_prb, unif_prb, sub, finite_set[variable]]]"
     apply_ac_step nil)
    (input_apply_ac_step_mem formula-decl nil apply_ac_step nil)
    (append_assoc formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (equal_append_implies_equal formula-decl nil list_theory nil)
    (input_apply_ac_step_sigma_null formula-decl nil apply_ac_step nil)
    (input_lst skolem-const-decl
     "list[[unif_prb, unif_prb, sub, finite_set[variable]]]"
     apply_ac_step nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (instantiate_step def-decl "list[[unif_prb, sub]]" aux_unification
     nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (string type-eq-decl nil strings nil)
    (ac_sol type-eq-decl nil aux_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_unification nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil))
   shostak)))

