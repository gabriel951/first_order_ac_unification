(unification
 (vars_TCC1 0
  (vars_TCC2-1 nil 3823281024 ("" (subtype-tcc) nil nil) nil nil
   (vars subtype "unification.unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (vars_TCC2 0
  (vars_TCC1-1 nil 3823281024 ("" (termination-tcc) nil nil) nil nil
   (vars termination
    "unification.vars(list_adt[unif_pair].cdr(unification.unif_prb))"
    "nil")))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3823281753 ("" (subtype-tcc) nil nil) nil nil
   (vars subtype "unification.unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (size_app_unif_prb 0
  (size_app_unif_prb-1 nil 3824128807
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (size def-decl "nat" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subterms_mem 0
  (subterms_mem-1 nil 3823963076
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subterms" 1 1)
            (("2" (expand "member" 1 1)
              (("2" (expand "union" 1 1)
                (("2" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "t")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "unif_pair!1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skolem -1 "unif_pair1")
                    (("3" (flatten)
                      (("3" (expand "member" -2)
                        (("3" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst -3 "t")
                            (("2" (assert)
                              (("2"
                                (inst 3 "unif_pair1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (unifies?_append 0
  (unifies?_append-1 nil 3805641015
   ("" (measure-induct "length(unif_prb1)" "unif_prb1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "unifies?" 1 2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (lemma "list_cons_eta[unif_pair]")
                    (("2" (inst? -1)
                      (("1" (expand "append" 2 1)
                        (("1" (assert)
                          (("1" (expand "unifies?" 2 1)
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "cdr(lst1)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "sigma" "unif_prb2")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unifies? def-decl "bool" unification nil)
    (append def-decl "list[T]" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   SHOSTAK))
 (unifies?_pareate 0
  (unifies?_pareate-1 nil 3807735593
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "pareate" -2)
        (("1" (case "args2 = null")
          (("1" (grind) nil nil)
           ("2" (hide 2 -2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
                 ("2" (expand "unifies?" -1)
                  (("2" (flatten)
                    (("2" (expand "length" -4 2)
                      (("2" (assert)
                        (("2" (expand "subs" 2 2)
                          (("2" (expand "subs" 2 1)
                            (("2" (expand "equal?" 2)
                              (("2"
                                (expand "length" -4 1)
                                (("2"
                                  (inst? -3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unifies? const-decl "bool" unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (subs def-decl "args" substitution nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (unifies? def-decl "bool" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (apply_sub_elim_var_t 0
  (apply_sub_elim_var_t-1 nil 3823282112
   ("" (induct "t")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (rewrite "subs_const")
          (("1" (hide-all-but -2) (("1" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 "Y")
      (("2" (skeep)
        (("2" (case "X = Y")
          (("1" (replace -1)
            (("1" (hide -1)
              (("1" (expand "img" 1)
                (("1" (lemma "vars_correct")
                  (("1" (inst? -1)
                    (("1" (inst -1 "subs(sigma)(variable(Y))")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (expand "member" 1)
                            (("1" (inst 1 "Y")
                              (("1"
                                (expand "member" -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "subs" 1 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "img_TCC1")
                        (("2" (inst? -1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "vars_correct")
            (("2" (inst -1 "X" "img(sigma)" "subs(sigma)(variable(Y))")
              (("2" (assert)
                (("2" (hide 3)
                  (("2" (expand "img" 1)
                    (("2" (expand "member" 1)
                      (("2" (inst 1 "Y")
                        (("2" (expand "subs" 1 1)
                          (("2" (expand "dom" 1)
                            (("2" (assert)
                              (("2"
                                (expand "subs" 1 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "/=")
                                    (("2"
                                      (replace -1 -3)
                                      (("2"
                                        (hide -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (hide-all-but -2)
        (("3" (rewrite "subs_unit") (("3" (grind) nil nil)) nil)) nil))
      nil)
     ("4" (skolem 1 ("t1" "t2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (rewrite "subs_pair")
            (("4" (expand "vars" -4)
              (("4" (expand "member" -4)
                (("4" (expand "union" -4)
                  (("4" (prop)
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)
                     ("2" (hide -2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "arg"))
      (("5" (prop)
        (("5" (skeep)
          (("5" (rewrite "subs_app")
            (("5" (expand "vars" -3)
              (("5" (inst? -1) (("5" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("f" "arg"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (rewrite "subs_ac")
            (("6" (expand "vars" -3)
              (("6" (inst? -1) (("6" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (term_induction formula-decl nil term_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (subs_const formula-decl nil substitution nil)
    (/= const-decl "boolean" notequal nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (img_TCC1 subtype-tcc nil substitution nil)
    (vars_correct formula-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs_unit formula-decl nil substitution nil)
    (subs_pair formula-decl nil substitution nil)
    (empty? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subs_app formula-decl nil substitution nil)
    (pair type-eq-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil))
   shostak))
 (apply_sub_elim_var_unif_pair 0
  (apply_sub_elim_var_unif_pair-1 nil 3823281928
   ("" (skeep)
    (("" (expand "apply_sub" -2)
      (("" (expand "vars" -2)
        (("" (expand "member" -2)
          (("" (expand "union" -2)
            (("" (prop)
              (("1" (rewrite "apply_sub_elim_var_t") nil nil)
               ("2" (rewrite "apply_sub_elim_var_t") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars const-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (apply_sub_elim_var_t formula-decl nil unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (member const-decl "bool" sets nil)
    (apply_sub const-decl "unif_pair" unification nil))
   shostak))
 (apply_sub_elim_var 0
  (apply_sub_elim_var-1 nil 3823281548
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" -3)
            (("2" (expand "vars" -3)
              (("2" (expand "member" -3)
                (("2" (expand "union" -3)
                  (("2" (prop)
                    (("1" (hide -2)
                      (("1" (lemma "apply_sub_elim_var_unif_pair")
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X" "sigma")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (apply_sub_elim_var_unif_pair formula-decl nil unification nil)
    (union const-decl "set" sets nil))
   shostak)))

