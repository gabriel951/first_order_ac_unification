%
% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%

% File: termination_alg.pvs
% Description: Function necessary to prove termination of the algorithm 
% 

termination_alg: THEORY
BEGIN
	IMPORTING unification, list_theory[variable], list_theory[set[variable]],
		  aux_unification, list_theory2[unif_prb, sub], map_theory[unif_prb, [unif_prb, sub]],
		  map_theory[[unif_prb, sub], unif_prb], map_theory[list[unif_prb], unif_prb],
		  list_theory2[term, term]

under_ac: VAR bool 
sym: VAR string
	  
t, s: VAR term
args: VAR args

unif_pair: VAR unif_pair
unif_prb, unif_prb1, unif_prb2: VAR unif_prb
lst_unif_prb: VAR list[unif_prb] 

fin_set_t: VAR finite_set[term]

sigma: VAR sub
vars2avoid: VAR list[variable]

X: VAR variable

% vars_under2more
vars_under2more(unif_prb): finite_set[variable] =
    {X | EXISTS t, s: dif_func?(t, s) AND im_under?(X, t) and im_under?(X, s) AND
    member(t, subterms(unif_prb)) AND member(s, subterms(unif_prb))}

vars_under2more(lst_unif_prb): finite_set[variable] =
    {X | EXISTS t, s: dif_func?(t, s) AND im_under?(X, t) and im_under?(X, s) AND
    member(t, subterms(lst_unif_prb)) AND member(s, subterms(lst_unif_prb))}

% vars_not_ac
vars_not_ac(t): RECURSIVE finite_set[variable] = 
   CASES t OF
        const(a): emptyset,
	variable(X): emptyset, 
	unit: emptyset, 
	pair(t1, t2): union(vars_not_ac(t1), vars_not_ac(t2)),
	app(sym, arg): vars_not_ac(arg), 
	ac_app(sym, arg): Union(list2set(map(vars_not_ac)(get_args(sym)(t))))
    ENDCASES
MEASURE size(t)
    

vars_not_ac(fin_set_t): RECURSIVE finite_set[variable] = 
   IF empty?(fin_set_t) THEN emptyset
   ELSE union(vars_not_ac(choose(fin_set_t)), vars_not_ac(rest(fin_set_t)))
   ENDIF
MEASURE card(fin_set_t)

vars_not_ac(args): RECURSIVE finite_set[variable] = 
    IF null?(args) THEN emptyset
    ELSE LET t = car(args) IN
    	 union(vars_not_ac(t), vars_not_ac(cdr(args)))
    ENDIF
MEASURE args BY << 

vars_not_ac(unif_pair): finite_set[variable] = union(vars_not_ac(unif_pair`1), vars_not_ac(unif_pair`2))

vars_not_ac(unif_prb): RECURSIVE finite_set[variable] = 
    IF null?(unif_prb) THEN emptyset
    ELSE LET unif_pair = car(unif_prb) IN
    	 union(vars_not_ac(unif_pair), vars_not_ac(cdr(unif_prb)))
    ENDIF
MEASURE unif_prb BY << 


vars_not_ac(lst_unif_prb): finite_set[variable] =
    {X | EXISTS t: member(t, subterms(lst_unif_prb)) AND (NOT ac_app?(t)) AND
       	 (variable(X) = t OR im_under?(X, t))}

% vars_not_ac_var
vars_not_ac_var(t): finite_set[variable] = 
    {X | member(X, vars_not_ac(t)) AND NOT var?(t)}

vars_not_ac_var(fin_set_t): RECURSIVE finite_set[variable] =
   IF empty?(fin_set_t) THEN emptyset
   ELSE union(vars_not_ac_var(choose(fin_set_t)), vars_not_ac_var(rest(fin_set_t)))
   ENDIF
MEASURE card(fin_set_t)

vars_not_ac_var(args): RECURSIVE finite_set[variable] =
    IF null?(args) THEN emptyset
    ELSE LET t = car(args) IN
    	 union(vars_not_ac_var(t), vars_not_ac_var(cdr(args)))
    ENDIF
MEASURE args BY << 

vars_not_ac_var(unif_prb): finite_set[variable] =
    {X | EXISTS t: member(t, subterms(unif_prb)) AND (NOT ac_app?(t)) AND
       	 im_under?(X, t)}

% admissible_subterm
admissible_subterms(t): finite_set[term] = {s | member(s, prop_subterms(t)) AND NOT var?(s)}

admissible_subterms(unif_pair): finite_set[term] = 
    {s | EXISTS t: member(t, subterms(unif_pair)) AND member(s, admissible_subterms(t))}

admissible_subterms(unif_prb): finite_set[term] =
    {s | EXISTS t: member(t, subterms(unif_prb)) AND member(s, admissible_subterms(t))}

%%%%%%%%%%%%%%%%%%%%%
% vars_under2more
vars_under2more_null: LEMMA
    vars_under2more(null[unif_prb]) = emptyset

vars_not_ac_vars_t: LEMMA
    member(X, vars_not_ac(t)) IMPLIES member(X, vars(t))

vars_not_ac_vars_unif_pair: LEMMA
    member(X, vars_not_ac(unif_pair)) IMPLIES member(X, vars(unif_pair))

vars_not_ac_vars: LEMMA
    member(X, vars_not_ac(unif_prb)) IMPLIES member(X, vars(unif_prb))

vars_not_ac_unif_prb_mem: LEMMA
    member(X, vars_not_ac(unif_prb)) IFF
    EXISTS unif_pair:
    	   member(X, vars_not_ac(unif_pair)) AND member(unif_pair, unif_prb)

vars_not_ac_lst_unif_prb_mem: LEMMA
    member(unif_prb, lst_unif_prb) IMPLIES
    subset?(vars_not_ac(unif_prb), vars_not_ac(lst_unif_prb))

vars_not_ac_singleton: LEMMA
     vars_not_ac(singleton(t)) = vars_not_ac(t)

vars_not_ac_mem_finset: LEMMA
    member(t, fin_set_t) AND member(X, vars_not_ac(t)) IMPLIES
    member(X, vars_not_ac(fin_set_t))

vars_not_ac_not_var_args: LEMMA
    member(s, not_var_args(sym)(t)) IMPLIES
    subset?(vars_not_ac(s), vars_not_ac(t))


vars_not_ac_apply_sub_t: LEMMA
    subset?(vars_not_ac(subs(sigma)(t)), union(vars_not_ac(img(sigma)), vars_not_ac(t)))

vars_not_ac_apply_sub_args: CONJECTURE
    subset?(vars_not_ac(subs(sigma)(args)), union(vars_not_ac(img(sigma)), vars_not_ac(args)))

vars_not_ac_apply_sub_unif_pair: LEMMA
    subset?(vars_not_ac(apply_sub(sigma, unif_pair)), union(vars_not_ac(img(sigma)), vars_not_ac(unif_pair)))

vars_not_ac_apply_sub: LEMMA
    subset?(vars_not_ac(apply_sub(sigma, unif_prb)), union(vars_not_ac(img(sigma)), vars_not_ac(unif_prb)))

% wrong!
%vars_not_ac_var_apply_sub_t: CONJECTURE 
%    subset?(vars_not_ac_var(subs(sigma)(t)), union(vars_not_ac_var(img(sigma)), vars_not_ac_var(t)))

vars_not_ac_var_apply_sub_t: LEMMA
     subset?(vars_not_ac_var(subs(sigma)(t)), union(vars_not_ac(img(sigma)), vars_not_ac_var(t)))

vars_not_ac_var_apply_sub_args: CONJECTURE
     subset?(vars_not_ac_var(subs(sigma)(args)), union(vars_not_ac(img(sigma)), vars_not_ac_var(args)))

vars_not_ac_var_apply_sub: CONJECTURE
     subset?(vars_not_ac_var(apply_sub(sigma, unif_prb)), union(vars_not_ac(img(sigma)), vars_not_ac_var(unif_prb)))

% admissible subterms
admissible_subterms_mem: LEMMA
    member(t, admissible_subterms(unif_prb)) IFF
    EXISTS unif_pair:
    	   member(t, admissible_subterms(unif_pair)) AND member(unif_pair, unif_prb)

admissible_subterms_null: LEMMA
    admissible_subterms(null) = emptyset

% instantiate step / apply ac step
vars_not_ac_var_inst_step: LEMMA
    subset?(vars_not_ac(instantiate_step(unif_prb1, unif_prb2, sigma)`1),
	    union(union(vars_not_ac_var(sec_proj(unif_prb1)),
			vars_not_ac(first_proj(unif_prb1))), 
	    	  vars_not_ac(unif_prb2)))

apply_ac_step_vars_not_ac_aux: CONJECTURE
    member(unif_prb, first_proj(solve_ac(t, s, vars2avoid, sym)))
    IMPLIES
    subset?(vars_not_ac(instantiate_step(unif_prb, null, sigma)`1),
    	    union(vars_not_ac(t), vars_not_ac(s)))

inst_step_vars_not_ac: LEMMA
    all_ac_prb?(unif_prb) AND 
    member(unif_prb1, first_proj(instantiate_step(apply_ac_step(unif_prb)(lst_unif_prb))))
    IMPLIES subset?(vars_not_ac(unif_prb1),
		union(vars_not_ac(unif_prb),
		vars_not_ac(first_proj(instantiate_step(lst_unif_prb)))))

apply_ac_step_vars_under2more: CONJECTURE 
    all_ac_prb?(unif_prb) AND 
    member(unif_prb1, first_proj(instantiate_step(apply_ac_step(unif_prb)(lst_unif_prb))))
    IMPLIES subset?(vars_under2more(unif_prb1),
		union(vars_under2more(unif_prb), vars_under2more(lst_unif_prb)))

apply_ac_step_adm_subterms: CONJECTURE
    all_ac_prb?(unif_prb) AND NOT null?(unif_prb1) AND 
    member(unif_prb1, first_proj(instantiate_step(apply_ac_step(unif_prb)(null))))
    AND vars_under2more(unif_prb1) = vars_under2more(unif_prb)
    IMPLIES
    card(admissible_subterms(unif_prb1)) < card(admissible_subterms(unif_prb))
							

%inst_step_vars_under2more: CONJECTURE 
%    all_ac?(unif_prb) AND 
%    member(new_unif_prb, instantiate_step(apply_ac_step(unif_prb))(ac_results_so_far))
%    IMPLIES subset?(vars_under2more(new_unif_prb),
%		union(vars_under2more(unif_prb), vars_under2more(ac_results_so_far)))
%
%inst_step_admissible_subterms: CONJECTURE 
%    all_ac?(unif_prb) AND 
%    member(new_unif_prb, instantiate_step(apply_ac_step(unif_prb))(ac_results_so_far))
%    IMPLIES
%    (subset?(admissible_subterms(new_unif_prb),
%		union(admissible_subterms(unif_prb), admissible_subterms(ac_results_so_far)))
%      OR
%      strict_subset?(vars_under2more(new_unif_prb), 
%		union(vars_under2more(unif_prb), vars_under2more(ac_results_so_far))))
%
%inst_step_size: CONJECTURE 
%    all_ac?(unif_prb) AND all_ac_and_var_args?(unif_prb) 
%    member(new_unif_prb, instantiate_step(apply_ac_step(unif_prb))(ac_results_so_far))
%    IMPLIES 
%    member(new_unif_prb, instantiate_step(ac_result_so_far))
%
%inst_step_
%    all_ac?(unif_prb) AND NOT all_ac_and_var_args?(unif_prb) 
%    member(new_unif_prb, instantiate_step(apply_ac_step(unif_prb))(ac_results_so_far))
%    IMPLIES 
%    (strict_subset?(admissible_subterms(new_unif_prb),
%		union(admissible_subterms(unif_prb), admissible_subterms(ac_results_so_far)))
%      OR
%      strict_subset?(vars_under2more(new_unif_prb), 
%		union(vars_under2more(unif_prb), vars_under2more(ac_results_so_far))))
%
END termination_alg
