% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%

% File: Equality.pvs
% Description: Definition of equality between term and related lemmas
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

equality: THEORY
BEGIN
	IMPORTING term_properties, list_theory[args], list_theory[term]

t, t1, t2, t3, s: VAR term
args1, args2, args3, args4: VAR args
lst_args1, lst_args2: VAR list[args]
sym, f: VAR string

i, j, n: VAR nat
coef: VAR list[nat]


equal?(t, s): RECURSIVE bool =
    CASES t OF
        const(a): s = const(a),

	variable(X): s = variable(X), 
	
	unit: s = unit, 
	
	pair(t1, t2): pair?(s) AND equal?(t1, term1(s)) AND equal?(t2, term2(s)),

	app(sym, arg): app?(s) AND sym = f_sym(s) AND equal?(arg, arg(s)),

	ac_app(sym, arg):
	   LET n = num_arg(sym, t) IN
	   ac_app?(s) AND sym = ac_sym(s) AND
	   IF n = 2 THEN
	      (equal?(select(sym, t)(1), select(sym, s)(1)) AND
	         equal?(select(sym, t)(2), select(sym, s)(2)))
	      OR 
	      (equal?(select(sym, t)(1), select(sym, s)(2)) AND
	         equal?(select(sym, t)(2), select(sym, s)(1)))
	   ELSE EXISTS i, j: 
	   i > 0 AND i <= n AND j > 0 AND j <= n AND 
	   equal?(select(sym, t)(i), select(sym, s)(j)) AND 
	   equal?(delete(sym, t)(i), delete(sym, s)(j))
	   ENDIF
    ENDCASES
MEASURE size(t) 

% test if two list of arguments are equal
equal?(args1, args2): RECURSIVE bool =
    IF null?(args1) THEN null?(args2)
    ELSIF null?(args2) THEN FALSE
    ELSE LET t = car(args1), s = car(args2) IN
    	 equal?(t, s) AND equal?(cdr(args1), cdr(args2))
    ENDIF
MEASURE args1 BY << 

% test if args1 and args2 are permutations of each other, where the notion of equality is
% given by equal?
perm?(args1, args2): RECURSIVE bool =
    IF null?(args1) THEN null?(args2)
    ELSE EXISTS (i: below[length(args1)]), (j: below[length(args2)]):
    	 equal?(nth(args1, i), nth(args2, j)) AND
	 perm?(remove(args1, i), remove(args2, j))
    ENDIF
MEASURE length(args1) 

% receives two lists of arguments, "lst_args1" and "lst_args2"
% lst_args1 = [args11 ... args1n] and lst_args2 = [args21 ... args2n] 
perm?(lst_args1, lst_args2): bool =
    perm?(flatten(lst_args1), flatten(lst_args2)) 

%%%%%%%%%%%%%%% Theorem
equal?_len: LEMMA 
    equal?(args1, args2) IMPLIES length(args1) = length(args2) 

equal?_num_arg: LEMMA 
    equal?(t, s) IMPLIES num_arg(f, t) = num_arg(f, s) 

equal?_append: LEMMA 
    equal?(args1, args2) AND equal?(args3, args4) IMPLIES
    equal?(append(args1, args3), append(args2, args4))

equal?_get_repeat_lst: LEMMA 
    equal?(t, s) IMPLIES equal?(get_repeat_lst(t, n), get_repeat_lst(s, n))

equal?_get_lst_mult: LEMMA 
    equal?(args1, args2) IMPLIES
    equal?(get_lst_mult(args1, coef), get_lst_mult(args2, coef))

equal?_ref: LEMMA
    equal?(t, t) 

equal?_sym: LEMMA 
    equal?(t, s) IMPLIES equal?(s, t) 

equal?_ac: LEMMA
    are_ac?(t, s, f) AND equal?(t, s) IMPLIES
    FORALL i:
        i > 0 AND i <= num_arg(f, t) IMPLIES
        EXISTS j: 
	   j > 0 AND j <= num_arg(f, t) AND 
	   equal?(select(f, t)(i), select(f, s)(j)) AND
	   equal?(delete(f, t)(i), delete(f, s)(j))
	   
equal?_trans: LEMMA 
    equal?(t1, t2) AND equal?(t2, t3) IMPLIES equal?(t1, t3) 

equal?_equiv: LEMMA
    equivalence?[term](equal?)
    
equal?_select_delete: LEMMA
    equal?(t, s) IMPLIES EXISTS i, j:
    nice_ind?((: i+1, j+1:), num_arg(f, t)) AND
    equal?(select(f, t)(i+1), select(f, s)(j+1)) AND
    equal?(delete(f, t)(i+1), delete(f, s)(j+1))

perm?_len: LEMMA
    perm?(args1, args2) IMPLIES length(args1) = length(args2) 
    
perm?_append: LEMMA
    perm?(args1, args2) AND perm?(args3, args4) IMPLIES
    perm?(append(args1, args3), append(args2, args4))

perm?_append2: LEMMA
    perm?(args1, args2) AND perm?(args3, args4) IMPLIES
    perm?(append(args1, args3), append(args4, args2))

perm?_ref: LEMMA
    perm?(args1, args1)

perm?_sym: LEMMA
    perm?(args1, args2) IMPLIES perm?(args2, args1) 

perm?_trans_aux: LEMMA
     perm?(args1, args2) IMPLIES
     FORALL i:
        i < length(args1) IMPLIES
        EXISTS j:
	   j < length(args2) AND
	   equal?(nth(args1, i), nth(args2, j)) AND
	   perm?(remove(args1, i), remove(args2, j))
	   
perm?_trans: LEMMA
    perm?(args1, args2) AND perm?(args2, args3) IMPLIES perm?(args1, args3)

perm?_append3: LEMMA 
    perm?(args4, append(args2, args3)) IMPLIES 
    perm?(append(args1, args4), append(args2, append(args1, args3)))

equal?_perm: LEMMA
    equal?(args1, args2) IMPLIES perm?(args1, args2) 

perm?_equiv_same_count?: LEMMA
    perm?(args1, args2) IFF same_count?(args1, args2, equal?)

perm?_get_common: LEMMA
    LET (bool1, ind1) = pos?(t, args1, equal?),
        (bool2, ind2) = pos?(t, args2, equal?) IN
    bool1 AND bool2 IMPLIES
    perm?(get_common(args1, args2, equal?),
    	  cons(nth(args1, ind1), get_common(remove(args1, ind1), remove(args2, ind2), equal?)))

perm?_get_common_sym: LEMMA
    perm?(get_common(args1, args2, equal?), get_common(args2, args1, equal?))

perm?_remove_common_get_common: LEMMA
    perm?(args1, append(remove_common(args1, args2, equal?), get_common(args1, args2, equal?)))

perm?_get_lst_mult_count_elem: LEMMA
    LET (new_args, new_coef) = count_elem(args1, coef, args2, equal?) IN
    length(args1) = length(coef) IMPLIES
    perm?(append(args2, get_lst_mult(args1, coef)), get_lst_mult(new_args, new_coef))

ac_perm_args: LEMMA
    are_ac?(t, s, sym) AND equal?(t, s) IMPLIES perm?(get_args(sym)(t), get_args(sym)(s))

ac_perm_args2: LEMMA
    equal?(t, s) IMPLIES perm?(get_args(f)(t), get_args(f)(s))
   
perm_args_ac: LEMMA
    perm?(get_args(sym)(t), get_args(sym)(s)) AND are_ac?(t, s, sym) IMPLIES equal?(t, s) 

perm_args_ac2: LEMMA
    are_ac?(t, s, f) AND equal?(t, s) IMPLIES perm?(get_args(f)(t), get_args(f)(s)) 

perm?_map_get_args: LEMMA
    perm?(args1, args2) IMPLIES
    perm?(map(get_args(f))(args1), map(get_args(f))(args2))
     
perm?_get_args_flatten: LEMMA
    perm?(args1, args2) IMPLIES
    perm?(flatten(map(get_args(f))(args1)), flatten(map(get_args(f))(args2)))

perm?_get_ac_from_args_equal?: LEMMA
    perm?(args1, args2) IMPLIES
    equal?(get_ac_from_args(f)(args1), get_ac_from_args(f)(args2))

perm_get_ac_from_args: LEMMA
    perm?(args1, args2) IMPLIES 
    perm?(get_args(f)(get_ac_from_args(f)(args1)), get_args(f)(get_ac_from_args(f)(args2)))



END equality
