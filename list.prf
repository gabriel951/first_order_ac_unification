(list_nat_theory
 (dot_product_TCC1 0
  (dot_product_TCC1-1 nil 3809244265 ("" (subtype-tcc) nil nil) nil nil
   (dot_product subtype "list_nat_theory.lst_nat1"
    "(list_adt[nat].cons?)")))
 (dot_product_TCC2 0
  (dot_product_TCC1-1 nil 3809183868 ("" (subtype-tcc) nil nil) nil nil
   (dot_product subtype "list_nat_theory.lst_nat2"
    "(list_adt[nat].cons?)")))
 (dot_product_TCC3 0
  (dot_product_TCC2-1 nil 3809183868 ("" (termination-tcc) nil nil) nil
   nil
   (dot_product termination
    "list_nat_theory.dot_product(list_adt[nat].cdr(list_nat_theory.lst_nat1), list_adt[nat].cdr(list_nat_theory.lst_nat2))"
    "nil"))))
(list_theory
 (from_min2max_TCC1 0
  (from_min2max_TCC1-1 nil 3809199008 ("" (subtype-tcc) nil nil) nil
   nil
   (from_min2max subtype
    "real_defs.max(0, (number_fields.-)(list_theory.max, list_theory.min))"
    "naturalnumber")))
 (from_min2max_TCC2 0
  (from_min2max_TCC2-1 nil 3809199008 ("" (termination-tcc) nil nil)
   nil nil
   (from_min2max termination
    "list_theory.from_min2max((number_fields.+)(list_theory.min, 1), list_theory.max)"
    "nil")))
 (increment_TCC1 0
  (increment_TCC1-1 nil 3803367839 ("" (tcc)) nil nil
   (increment subtype "list_theory.lst_nat"
    "(list_adt[numfield].cons?)")))
 (increment_TCC2 0
  (increment_TCC2-1 nil 3803367839 ("" (tcc)) nil nil
   (increment subtype "list_adt[numfield].cdr(list_theory.lst_nat)"
    "list[nat]")))
 (increment_TCC3 0
  (increment_TCC3-1 nil 3803367839 ("" (tcc)) nil nil
   (increment subtype "list_theory.lst_nat" "(list_adt[nat].cons?)")))
 (increment_TCC4 0
  (increment_TCC4-1 nil 3803367839 ("" (tcc)) nil SHOSTAK
   (increment subtype "(number_fields.-)(list_theory.n, 1)" "nat")))
 (increment_TCC5 0
  (increment_TCC5-1 nil 3803367839 ("" (tcc)) nil nil
   (increment termination
    "list_theory.increment(list_adt[nat].cdr(list_theory.lst_nat), (number_fields.-)(list_theory.n, 1), list_theory.inc)"
    "nil")))
 (increment_TCC6 0
  (increment_TCC6-1 nil 3804618454 ("" (tcc)) nil nil
   (increment subtype "list_theory.lst_nat" "(list_adt[nat].cons?)")))
 (apply_TCC1 0
  (apply_TCC1-1 nil 3808932117 ("" (subtype-tcc) nil nil) nil nil
   (apply subtype "list_theory.lst2"
          "(list_adt[list_theory.T].cons?)")))
 (apply_TCC2 0
  (apply_TCC2-1 nil 3808932117 ("" (subtype-tcc) nil nil) nil nil
   (apply subtype "list_theory.lst1"
          "(list_adt[list_theory.T].cons?)")))
 (apply_TCC3 0
  (apply_TCC3-1 nil 3808932117 ("" (termination-tcc) nil nil) nil nil
   (apply termination
          "list_theory.apply(list_adt[list_theory.T].cdr(list_theory.lst1), list_adt[list_theory.T].cdr(list_theory.lst2), list_theory.f)"
          "nil")))
 (apply_TCC4 0
  (apply_TCC4-1 nil 3808932117 ("" (subtype-tcc) nil nil) nil nil
   (apply subtype "list_theory.lst1"
          "(list_adt[list_theory.T].cons?)")))
 (cartesian_product_aux_TCC1 0
  (cartesian_product_aux_TCC1-1 nil 3803367839 ("" (tcc)) nil nil
   (cartesian_product_aux subtype "list_theory.lst2"
    "(list_adt[list_theory.T].cons?)")))
 (cartesian_product_aux_TCC2 0
  (cartesian_product_aux_TCC2-1 nil 3803367839 ("" (tcc)) nil nil
   (cartesian_product_aux termination
    "list_theory.cartesian_product_aux(list_theory.x, list_adt[list_theory.T].cdr(list_theory.lst2))"
    "nil")))
 (cartesian_product_aux_TCC3 0
  (cartesian_product_aux_TCC3-1 nil 3803367839 ("" (tcc)) nil nil
   (cartesian_product_aux subtype "list_theory.lst2"
    "(list_adt[list_theory.T].cons?)")))
 (cartesian_product_TCC1 0
  (cartesian_product_TCC1-1 nil 3803367839 ("" (tcc)) nil nil
   (cartesian_product termination
    "list_theory.cartesian_product(list_adt[list_theory.T].cdr(list_theory.lst1), list_theory.lst2)"
    "nil")))
 (cartesian_product_TCC2 0
  (cartesian_product_TCC2-1 nil 3803367839 ("" (tcc)) nil nil
   (cartesian_product subtype "list_theory.lst1"
    "(list_adt[list_theory.T].cons?)")))
 (finset2list_TCC1 0
  (finset2list_TCC2-1 nil 3830365958 ("" (subtype-tcc) nil nil) nil nil
   (finset2list subtype "list_theory.fin_set"
    "(sets[list_theory.T].nonempty?)")))
 (finset2list_TCC2 0
  (finset2list_TCC3-1 nil 3830365958
   ("" (skeep)
    (("" (lemma "card_rest[T]")
      (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
    nil)
   nil nil
   (finset2list termination
    "list_theory.finset2list(sets[list_theory.T].rest(list_theory.fin_set))"
    "nil")))
 (flatten_TCC1 0
  (flatten_TCC1-1 nil 3803367839 ("" (tcc)) nil nil
   (flatten subtype "list_theory.lst_of_lsts"
            "(list_adt[list_adt[list_theory.T].list].cons?)")))
 (flatten_TCC2 0
  (flatten_TCC2-1 nil 3803367839 ("" (tcc)) nil nil
   (flatten termination
            "list_theory.flatten(list_adt[list_adt[list_theory.T].list].cdr(list_theory.lst_of_lsts))"
            "nil")))
 (flatten_TCC3 0
  (flatten_TCC3-1 nil 3803367839 ("" (tcc)) nil nil
   (flatten subtype "list_theory.lst_of_lsts"
            "(list_adt[list_adt[list_theory.T].list].cons?)")))
 (ind_flatten_TCC1 0
  (ind_flatten_TCC1-1 nil 3807442007 ("" (grind) nil nil) nil nil
   (ind_flatten subtype "list_theory.lst_of_lsts"
    "(list_adt[list_adt[list_theory.T].list].cons?)")))
 (ind_flatten_TCC2 0
  (ind_flatten_TCC2-1 nil 3807442007 ("" (subtype-tcc) nil nil) nil nil
   (ind_flatten subtype "(number_fields.-)(list_theory.i, 1)" "nat")))
 (ind_flatten_TCC3 0
  (ind_flatten_TCC3-1 nil 3807442007
   ("" (skeep)
    (("" (skeep)
      (("" (expand "<<" 3)
        (("" (lift-if) (("" (prop) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (ind_flatten termination
    "list_theory.ind_flatten(list_adt[list_adt[list_theory.T].list].cdr(list_theory.lst_of_lsts), (number_fields.-)(list_theory.i, 1), list_theory.j)"
    "nil")))
 (ind_flatten_TCC4 0
  (ind_flatten_TCC4-1 nil 3807444627 ("" (termination-tcc) nil nil) nil
   nil
   (ind_flatten subtype "list_theory.lst_of_lsts"
    "(list_adt[list_adt[list_theory.T].list].cons?)")))
 (no_null_entries?_TCC1 0
  (no_null_entries?_TCC1-1 nil 3809117233
   ("" (termination-tcc) nil nil) nil nil
   (no_null_entries? termination
    "list_theory.no_null_entries?(list_adt[list_adt[list_theory.T].list].cdr(list_theory.lst_of_lsts))"
    "nil")))
 (count_elem_TCC1 0
  (count_elem_TCC1-1 nil 3803367839 ("" (tcc)) nil nil
   (count_elem termination
    "list_theory.count_elem(list_theory.lst1, list_theory.new_coef, list_adt[list_theory.T].cdr(list_theory.lst2), list_theory.equal?)"
    "nil")))
 (count_elem_TCC2 0
  (count_elem_TCC2-1 nil 3803367839 ("" (tcc)) nil nil
   (count_elem termination
    "list_theory.count_elem(list_theory.new_lst1, list_theory.new_coef, list_adt[list_theory.T].cdr(list_theory.lst2), list_theory.equal?)"
    "nil")))
 (get_repeat_lst_TCC1 0
  (get_repeat_lst_TCC1-1 nil 3804618454 ("" (tcc)) nil nil
   (get_repeat_lst subtype "(number_fields.-)(list_theory.n, 1)"
    "nat")))
 (get_repeat_lst_TCC2 0
  (get_repeat_lst_TCC2-1 nil 3804618454 ("" (tcc)) nil nil
   (get_repeat_lst termination
    "list_theory.get_repeat_lst(list_theory.x, (number_fields.-)(list_theory.n, 1))"
    "nil")))
 (select_greater_TCC1 0
  (select_greater_TCC1-1 nil 3804618454 ("" (tcc)) nil nil
   (select_greater termination
    "list_theory.select_greater(list_adt[nat].cdr(list_theory.lst_nat))"
    "nil")))
 (matrix?_TCC1 0
  (matrix?_TCC1-1 nil 3808145793 ("" (termination-tcc) nil nil) nil nil
   (matrix? termination
    "list_theory.matrix?(list_adt[list_adt[list_theory.T].list].cdr(list_theory.lst_of_lsts), list_theory.n)"
    "nil")))
 (get_col_i_TCC1 0
  (get_col_i_TCC1-1 nil 3804618454 ("" (tcc)) nil SHOSTAK
   (get_col_i subtype "(number_fields.-)(list_theory.i, 1)"
    "below[length[T](lst)]")))
 (get_lst_after_n_TCC1 0
  (get_lst_after_n_TCC1-1 nil 3805569188 ("" (tcc)) nil nil
   (get_lst_after_n subtype "(number_fields.-)(list_theory.n, 1)"
    "nat")))
 (get_lst_after_n_TCC2 0
  (get_lst_after_n_TCC2-1 nil 3805569188 ("" (tcc)) nil nil
   (get_lst_after_n termination
    "list_theory.get_lst_after_n(list_adt[list_theory.T].cdr(list_theory.lst), (number_fields.-)(list_theory.n, 1))"
    "nil")))
 (snd_proj_TCC1 0
  (snd_proj_TCC1-1 nil 3805569188 ("" (tcc)) nil nil
   (snd_proj subtype "list_theory.lst_pair"
    "(list_adt[[list_theory.T, list_theory.T]].cons?)")))
 (snd_proj_TCC2 0
  (snd_proj_TCC2-1 nil 3805569188 ("" (tcc)) nil nil
   (snd_proj termination
    "list_theory.snd_proj(list_adt[[list_theory.T, list_theory.T]].cdr(list_theory.lst_pair))"
    "nil")))
 (snd_proj_TCC3 0
  (snd_proj_TCC3-1 nil 3805569188 ("" (tcc)) nil nil
   (snd_proj subtype "list_theory.lst_pair"
    "(list_adt[[list_theory.T, list_theory.T]].cons?)")))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3807478748 ("" (subtype-tcc) nil nil) nil nil
   (remove subtype "(number_fields.-)(list_theory.i, 1)" "nat")))
 (member_append 0
  (member_append-1 nil 3803909084
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" 2 1)
                  (("2" (case "x = car(lst1)")
                    (("1" (grind) nil nil)
                     ("2" (assert)
                      (("2" (inst -1 "cdr(lst1)")
                        (("2" (prop)
                          (("1" (inst -1 "lst2" "x")
                            (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (member_append_nat 0
  (member_append_nat-1 nil 3808938183
   ("" (induct "lst_nat1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil SHOSTAK))
 (member_append2 0
  (member_append2-1 nil 3803910765
   ("" (measure-induct "length(lst_pair1)" "lst_pair1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skolem 1 ("lst2" "x" "y"))
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" 2 1)
                  (("2" (inst -1 "cdr(lst1)")
                    (("2" (prop)
                      (("1" (inst -1 "lst2" "x" "y")
                        (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (null_append 0
  (null_append-1 nil 3805570561
   ("" (induct "lst1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (null_append_nat 0
  (null_append_nat-1 nil 3805812221
   ("" (induct "lst_nat1")
    (("1" (skeep)
      (("1" (expand "append" 1) (("1" (propax) nil nil)) nil)) nil)
     ("2" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (cdr_append_TCC1 0
  (cdr_append_TCC1-1 nil 3805618390 ("" (tcc)) nil nil
   (cdr_append subtype
    "list_props[list_theory.T].append(list_theory.lst1, list_theory.lst2)"
    "(list_adt[list_theory.T].cons?)")))
 (cdr_append 0
  (cdr_append-1 nil 3805618391
   ("" (induct "lst1")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (lst2set_append_mem 0
  (lst2set_append_mem-1 nil 3830008330
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (lst2set_is_finite 0
  (lst2set_is_finite-1 nil 3830467295
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (expand "list2set" 1)
          (("2" (lemma "finite_add[T]") (("2" (inst? -1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nth_append_TCC1 0
  (nth_append_TCC1-1 nil 3805617232
   ("" (skeep) (("" (rewrite "length_append") nil nil)) nil) nil
   SHOSTAK
   (nth_append subtype "list_theory.i"
    "below[length[T](append[T](lst1, lst2))]")))
 (nth_append_TCC2 0
  (nth_append_TCC2-1 nil 3805617232 ("" (tcc)) nil nil
   (nth_append subtype
    "(number_fields.-)(list_theory.i, list_props[list_theory.T].length(list_theory.lst1))"
    "below[length[T](lst2)]")))
 (nth_append 0
  (nth_append-1 nil 3805617233
   ("" (measure-induct "length(lst1)" "lst1")
    (("1" (skolem 1 "lst1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "nth" 1 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide -3)
                      (("1" (grind)
                        (("1" (lemma "list_cons_eta[T]")
                          (("1" (inst -1 "lst1")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "cdr_append")
                      (("2" (inst? -1)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (replace -1 2 nil t)
                              (("1"
                                (case "null?(lst1)")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "nth" 3 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (reveal -2)
                                      (("2"
                                        (inst -1 "cdr(lst1)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -1 "i-1" "lst2")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1 4)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 1)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (case "lst1 = null")
                        (("1" (replace -1 1)
                          (("1" (hide -1)
                            (("1" (assert)
                              (("1"
                                (expand "length" 1)
                                (("1"
                                  (expand "append" 1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (case "null?(lst1)")
                        (("1" (expand "append" 2 1)
                          (("1" (assert)
                            (("1" (expand "length" 2)
                              (("1"
                                (expand "nth" 2 2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "cdr_append")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (replace -1 3)
                                (("2"
                                  (inst -2 "cdr(lst1)")
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -1 "i-1" "lst2")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -2 3)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -1 4)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "length_append") nil nil)) nil))
      nil))
    nil)
   nil SHOSTAK))
 (equal_lst_nth_TCC1 0
  (equal_lst_nth_TCC1-1 nil 3805573073 ("" (tcc)) nil nil
   (equal_lst_nth subtype "list_theory.n" "below[length[T](lst2)]")))
 (equal_lst_nth 0
  (equal_lst_nth-1 nil 3805573130
   ("" (measure-induct "length(lst1)" "lst1")
    (("1" (skolem 1 "lst1")
      (("1" (flatten)
        (("1" (skeep)
          (("1" (case "null?(lst1)")
            (("1" (grind) nil nil)
             ("2" (case "lst1 = cons(car(lst1), cdr(lst1))")
              (("1" (replace -1 2)
                (("1" (hide -1)
                  (("1" (case "null?(lst2)")
                    (("1" (grind) nil nil)
                     ("2" (case "lst2 = cons(car(lst2), cdr(lst2))")
                      (("1" (replace -1 3)
                        (("1" (hide -1)
                          (("1" (inst -3 "0")
                            (("1" (expand "nth" -3)
                              (("1"
                                (inst -1 "cdr(lst1)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "cdr(lst2)")
                                    (("1"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (reveal -3)
                                          (("3"
                                            (inst -1 "n+1")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (typepred "n")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma "list_cons_eta[T]")
                          (("2" (inst? -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma "list_cons_eta[T]")
                  (("2" (grind) nil nil)) nil))
                nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil))
    nil)
   nil SHOSTAK))
 (member_nth 0
  (member_nth-1 nil 3804680155
   ("" (induct "lst")
    (("1" (skeep) (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst? -1)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (expand "member" 2)
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "length" -1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (member_nth2 0
  (member_nth2-1 nil 3805569744
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "member" 1)
            (("2" (assert)
              (("2" (case "x = head")
                (("1" (assert)
                  (("1" (inst 1 "0")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "member(x, tail)")
                    (("1" (assert)
                      (("1" (inst -2 "x")
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (inst 2 "n+1")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (skeep)
                        (("2" (inst -1 "x")
                          (("2" (assert)
                            (("2" (case "n = 0")
                              (("1" (grind) nil nil)
                               ("2"
                                (inst 4 "n-1")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (grind)
                                  (("2"
                                    (typepred "n")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (dot_product_sym 0
  (dot_product_sym-1 nil 3809284971
   ("" (induct "lst_nat1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "dot_product" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "dot_product" 2 2)
                  (("2" (lift-if)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_product def-decl "nat" list_nat_theory nil)) SHOSTAK))
 (dot_product_sum_lsts 0
  (dot_product_sum_lsts-1 nil 3809199014
   ("" (induct "coef")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "sum_lsts" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "dot_product" 1 1)
                  (("1" (expand "dot_product" 1 1)
                    (("1" (assert)
                      (("1" (expand "dot_product" 1)
                        (("1" (lift-if) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "dot_product" 1 1)
                  (("2" (expand "dot_product" 1 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "dot_product" 1)
                          (("2" (lift-if) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "dot_product" 3 1)
                  (("3" (expand "dot_product" 3 2)
                    (("3" (assert)
                      (("3" (expand "dot_product" 3 3)
                        (("3" (inst -1 "cdr(lst_nat1)" "cdr(lst_nat2)")
                          (("3" (assert)
                            (("3" (expand "length" -1)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil))
   SHOSTAK))
 (dot_product_zero_lst 0
  (dot_product_zero_lst-1 nil 3809245361
   ("" (induct "lst_nat1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "dot_product" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("2" (inst -2 "hd")
                  (("2" (expand "member" -2)
                    (("2" (assert)
                      (("2" (replace -2 2)
                        (("2" (assert)
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (reveal -2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -1 "n")
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_product def-decl "nat" list_nat_theory nil)) SHOSTAK))
 (cart_prod_aux_mem 0
  (cart_prod_aux_mem-1 nil 3803911867
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "cartesian_product_aux" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" 2 2)
                  (("2" (inst -1 "cdr(lst)")
                    (("2" (prop)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (cart_prod_aux_mem2 0
  (cart_prod_aux_mem2-1 nil 3803912731
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "cartesian_product_aux" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" -1)
                  (("2" (assert)
                    (("2" (inst -2 "cdr(lst)") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (cart_prod_mem 0
  (cart_prod_mem-1 nil 3803908371
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "cartesian_product" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "member_append2")
                  (("2" (inst? -1)
                    (("2" (replace -1 2)
                      (("2" (hide -1)
                        (("2" (case "x = car(lst1)")
                          (("1" (assert)
                            (("1" (expand "member" 2 1)
                              (("1"
                                (lemma "cart_prod_aux_mem")
                                (("1"
                                  (inst -1 "lst2" "x" "y")
                                  (("1"
                                    (replace -1 2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member" 3 1)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -1 "cdr(lst1)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "lst2" "x" "y")
                                      (("1"
                                        (replace -1 3 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "cart_prod_aux_mem2")
                                            (("1"
                                              (inst? -1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (finset2list_mem 0
  (finset2list_mem-1 nil 3830697835
   ("" (measure-induct "card(fin_set)" "fin_set")
    (("" (skolem 1 "fin_set")
      (("" (prop)
        (("" (skeep)
          (("" (prop)
            (("1" (expand "finset2list" -1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "member" -1)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst -2 "rest(fin_set)")
                        (("2" (prop)
                          (("1" (inst -1 "x")
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (rewrite "card_rest")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "finset2list" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (lemma "choose_rest_or[T]")
                    (("2" (inst? -1)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (inst -3 "rest(fin_set)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "card_rest")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose_rest_or formula-decl nil sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_rest formula-decl nil finite_sets nil)
    (rest const-decl "set" sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (finset2list def-decl "list[T]" list_theory nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (null_flatten_nth 0
  (null_flatten_nth-1 nil 3807298117
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" -3)
            (("2" (rewrite "null_append")
              (("2" (flatten)
                (("2" (expand "nth" 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("2" (inst -1 "i-1")
                        (("1" (grind) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (flatten_append 0
  (flatten_append-1 nil 3807646186
   ("" (induct "lst_of_lsts1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1 2)
            (("2" (expand "append" 1 1)
              (("2" (expand "flatten" 1 1)
                (("2" (inst? -1)
                  (("2" (replace -1 1)
                    (("2" (rewrite "append_assoc") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (len0_ind_flatten 0
  (len0_ind_flatten-1 nil 3807452554
   ("" (induct "lst_of_lsts")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "ind_flatten" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "flatten" -3)
                  (("1" (rewrite "length_append")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (expand "flatten" -2)
                  (("2" (rewrite "length_append")
                    (("2" (assert)
                      (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (ind_flatten_len 0
  (ind_flatten_len-1 nil 3807444911
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1)
            (("2" (rewrite "length_append")
              (("2" (expand "ind_flatten" 1)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil)
                       ("3" (expand "nth" -3)
                        (("3" (assert)
                          (("3" (inst? -1) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (nth_flatten_TCC1 0
  (nth_flatten_TCC1-1 nil 3807442007
   ("" (skeep)
    (("" (lemma "ind_flatten_len")
      (("" (inst -1 "i" "j" "lst_of_lsts") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil
   (nth_flatten subtype
    "list_theory.ind_flatten(list_theory.lst_of_lsts, list_theory.i, list_theory.j)"
    "below[length[T](flatten(lst_of_lsts))]")))
 (nth_flatten 0
  (nth_flatten-1 nil 3807442034
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1 2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "ind_flatten" 1)
                  (("1" (assert)
                    (("1" (expand "nth" -4)
                      (("1" (assert)
                        (("1" (expand "flatten" 1)
                          (("1" (lemma "nth_append")
                            (("1" (inst -1 "j" "lst" "flatten(tail)")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "flatten" 2)
                  (("2" (expand "ind_flatten" 2)
                    (("2" (assert)
                      (("2" (lemma "nth_append")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "nth" -3)
                                    (("1"
                                      (inst? -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1)
                                (("2"
                                  (lemma "ind_flatten_len")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "ind_flatten_len")
          (("3" (inst? -1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (flatten_mem 0
  (flatten_mem-1 nil 3808406898
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" -2)
            (("2" (rewrite "member_append")
              (("2" (prop)
                (("1" (inst 1 "0")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (inst -2 "x")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst 1 "n+1")
                        (("1" (expand "nth" 1) (("1" (propax) nil nil))
                          nil)
                         ("2" (typepred "n") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (no_null_entries?_nth 0
  (no_null_entries?_nth-1 nil 3809260540
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("1" (expand "no_null_entries?" 1)
          (("1" (prop)
            (("1" (inst -3 "0") (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (inst -3 "n+1") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (from_min2max_len 0
  (from_min2max_len-1 nil 3809117274
   ("" (measure-induct "max(0, n-i)" ("n" "i"))
    (("1" (skolem 1 ("n" "i"))
      (("1" (prop)
        (("1" (expand "from_min2max" 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (inst -1 "n" "i+1") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (from_min2max_len1 0
  (from_min2max_len1-1 nil 3805753929
   ("" (lemma "from_min2max_len")
    (("" (inst -1 "1" "_") (("" (skeep) (("" (grind) nil nil)) nil))
      nil))
    nil)
   nil SHOSTAK))
 (from_min2max_car_TCC1 0
  (from_min2max_car_TCC1-1 nil 3805803487 ("" (subtype-tcc) nil nil)
   nil nil
   (from_min2max_car subtype
    "list_theory.from_min2max(list_theory.i, list_theory.j)"
    "(list_adt[nat].cons?)")))
 (from_min2max_car 0
  (from_min2max_car-1 nil 3805804665
   ("" (measure-induct "j" "j")
    (("1" (skolem 1 "j")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "from_min2max" 2)
            (("1" (lift-if)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (nth_from_min2max 0
  (nth_from_min2max-1 nil 3805754960
   ("" (measure-induct "n" "n")
    (("" (skolem 1 "n")
      (("" (prop)
        (("" (skeep)
          (("" (expand "from_min2max" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (expand "nth" 2)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (grind) nil nil)
                             ("2" (flatten)
                              (("2"
                                (inst -1 "n-1")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "i+1" "j")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "from_min2max" -1)
                                        (("1"
                                          (expand "length" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (nth_from_min2max2 0
  (nth_from_min2max2-1 nil 3805988277
   ("" (skeep)
    (("" (lemma "nth_from_min2max")
      (("" (inst -1 "1" "j" "n") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil SHOSTAK))
 (from_min2max_mem 0
  (from_min2max_mem-1 nil 3830465465
   ("" (measure-induct "max(0, j-i)" ("j" "i"))
    (("1" (skolem 1 ("j" "i"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (split)
            (("1" (flatten)
              (("1" (expand "from_min2max" -1)
                (("1" (lift-if)
                  (("1" (split -1)
                    (("1" (hide-all-but -1) (("1" (grind) nil nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2" (inst -2 "j" "i+1")
                            (("2" (split -2)
                              (("1"
                                (inst -1 "n")
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (prop)
              (("2" (expand "from_min2max" 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (inst -3 "j" "1+i")
                      (("3" (prop)
                        (("1" (inst -1 "n")
                          (("1" (split)
                            (("1" (expand "member" 2)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   nil shostak))
 (increment_len 0
  (increment_len-1 nil 3808406085
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "increment" 1) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "increment" 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (increment_mantains_gt0 0
  (increment_mantains_gt0-1 nil 3808937412
   ("" (induct "coef")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (skeep)
            (("2" (expand "increment" -3)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "member" -2)
                    (("1" (prop)
                      (("1" (inst -4 "hd") (("1" (grind) nil nil)) nil)
                       ("2" (inst -4 "i")
                        (("2" (expand "member" -4)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "member" -1)
                    (("2" (prop)
                      (("1" (inst -3 "hd")
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (inst -2 "n-1")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (inst -1 "i")
                              (("1" (assert) nil nil)) nil)
                             ("2" (skeep)
                              (("2"
                                (inst -3 "i!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pos?_len 0
  (pos?_len-1 nil 3808413542
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" 1) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pos?_cor_TCC1 0
  (pos?_cor_TCC1-1 nil 3808412186
   ("" (skeep) (("" (rewrite "pos?_len") nil nil)) nil) nil nil
   (pos?_cor subtype
    "list_theory.pos?(list_theory.x, list_theory.lst, list_theory.equal?)`2"
    "below[length[T](lst)]")))
 (pos?_cor 0
  (pos?_cor-1 nil 3808414220
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "pos?_len") nil nil)) nil)) nil))
    nil)
   nil SHOSTAK))
 (pos?_cor2 0
  (pos?_cor2-1 nil 3808515431
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" -2)
            (("2" (prop)
              (("1" (expand "pos?" -4 1)
                (("1" (assert)
                  (("1" (expand "pos?" -4)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide -3 -4)
                          (("1" (typepred "equal?")
                            (("1" (expand "equivalence?" -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "symmetric?" -2)
                                  (("1"
                                    (inst -2 "y" "hd")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "transitive?" -3)
                                        (("1"
                                          (inst -3 "x" "hd" "y")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "pos?" -4)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (assert) nil nil)
                       ("2" (assert)
                        (("2" (expand "pos?" -4)
                          (("2" (inst -3 "equal?" "x" "y")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pos?_equal 0
  (pos?_equal-1 nil 3808496130
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" -3)
            (("2" (prop)
              (("1" (expand "pos?" 1)
                (("1" (prop)
                  (("1" (hide 2)
                    (("1" (hide -2)
                      (("1" (typepred "equal?")
                        (("1" (expand "equivalence?" -1)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (expand "symmetric?")
                                (("1"
                                  (inst -1 "x" "y")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (inst -2 "y" "x" "hd")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "pos?" 2)
                (("2" (prop)
                  (("2" (inst -2 "equal?" "x" "y")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pos?_equal2 0
  (pos?_equal2-1 nil 3808506283
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "pos?" 1)
                  (("1" (assert)
                    (("1" (hide -2 2)
                      (("1" (typepred "equal?")
                        (("1" (expand "equivalence?" -1)
                          (("1" (flatten)
                            (("1" (expand "symmetric?" -2)
                              (("1"
                                (inst -2 "x" "y")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "transitive?" -3)
                                    (("1"
                                      (inst -3 "y" "x" "hd")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "pos?" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 1)
                        (("1" (typepred "equal?")
                          (("1" (expand "equivalence?" -1)
                            (("1" (flatten)
                              (("1"
                                (expand "transitive?" -3)
                                (("1"
                                  (inst -3 "x" "y" "hd")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pos?_remove 0
  (pos?_remove-1 nil 3808414522
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil SHOSTAK))
 (pos?_remove_nth 0
  (pos?_remove_nth-1 nil 3808414576
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "remove" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "pos?" 2 2)
                        (("2" (assert)
                          (("2" (expand "nth" 2)
                            (("2" (inst? -1) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pos?_remove_ind_lt 0
  (pos?_remove_ind_lt-1 nil 3808421964
   ("" (induct "lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3"
            (name-replace "bool" "pos?(x, cons(hd, tail), equal?)`1")
            (("3"
              (name-replace "ind" "pos?(x, cons(hd, tail), equal?)`2")
              (("3" (expand "remove" 1)
                (("3" (lift-if)
                  (("3" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "pos?" 2)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "ind" 1)
                            (("1" (grind) nil nil)) nil)
                           ("2" (expand "ind" 2)
                            (("2" (expand "pos?" 2 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "bool" -1)
                                      (("2"
                                        (expand "ind" -2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pos?_remove_ind_gt 0
  (pos?_remove_ind_gt-1 nil 3808422295
   ("" (induct "lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (expand "remove" 1 1)
            (("3" (lift-if)
              (("3" (prop)
                (("1" (expand "pos?" 1 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (grind) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "pos?" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "pos?" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (inst? -1)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (count_elem_len 0
  (count_elem_len-1 nil 3808404840
   ("" (induct "lst2")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (expand "count_elem" 1 1)
            (("3" (lift-if)
              (("3" (prop)
                (("1" (expand "count_elem" 1 2)
                  (("1" (assert)
                    (("1" (inst? -2)
                      (("1" (assert)
                        (("1" (hide 1)
                          (("1" (rewrite "increment_len") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "count_elem" 2 2)
                  (("2" (assert)
                    (("2" (inst? -1)
                      (("2" (assert)
                        (("2" (hide 1 2)
                          (("2" (rewrite "length_append")
                            (("2" (lemma "length_append[nat]")
                              (("2"
                                (inst -1 "coef" "_")
                                (("2"
                                  (inst -1 "cons(1, null)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (count_elem_null1 0
  (count_elem_null1-1 nil 3808747951
   ("" (induct "lst2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_elem" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst? -3)
                  (("1" (assert)
                    (("1" (expand "count_elem" -2)
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst? -2)
                    (("2" (assert)
                      (("2" (expand "count_elem" -1)
                        (("2" (grind)
                          (("2" (rewrite "null_append") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (count_elem_null2 0
  (count_elem_null2-1 nil 3808748243
   ("" (induct "lst2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_elem" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst? -3)
                  (("1" (assert)
                    (("1" (rewrite "increment_len")
                      (("1" (assert)
                        (("1" (expand "count_elem" -2)
                          (("1" (expand "increment" -2)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "pos?" -2)
                                      (("1"
                                        (expand "length" -4)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst? -2)
                  (("2" (rewrite "length_append")
                    (("2" (rewrite "length_append")
                      (("2" (assert)
                        (("2" (expand "length" -2 1)
                          (("2" (expand "length" -2 2)
                            (("2" (expand "length" -2 2)
                              (("2"
                                (expand "length" -2 3)
                                (("2"
                                  (expand "count_elem" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "null_append_nat")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (count_elem_gt0 0
  (count_elem_gt0-1 nil 3808749278
   ("" (induct "lst2")
    (("1" (skeep)
      (("1" (expand "count_elem" -2)
        (("1" (inst -1 "n") (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_elem" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst? -3)
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (lemma "increment_mantains_gt0")
                        (("1" (inst? -1)
                          (("1" (skeep)
                            (("1" (prop)
                              (("1"
                                (inst? -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst? -2)
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (rewrite "member_append_nat")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (count_elem_mem 0
  (count_elem_mem-1 nil 3829224951
   ("" (measure-induct "length(lst2)" "lst2")
    (("" (skolem 1 "lst2")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (inst -3 "cdr(lst2)")
                  (("1" (prop)
                    (("1" (inst? -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (inst -2 "cdr(lst2)")
                  (("2" (prop)
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (lemma "member_append")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (put_in_head_matrix? 0
  (put_in_head_matrix?-1 nil 3808236164
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "matrix?" -2)
            (("2" (prop)
              (("2" (expand "put_in_head" 1)
                (("2" (expand "matrix?" 1)
                  (("2" (prop)
                    (("1" (inst? -4) (("1" (assert) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (put_in_head_mem 0
  (put_in_head_mem-1 nil 3808236251
   ("" (induct "matrix")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" -2)
            (("2" (expand "member" -2)
              (("2" (split -2)
                (("1" (hide -2) (("1" (grind) nil nil)) nil)
                 ("2" (inst? -2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil))
    nil)
   nil SHOSTAK))
 (put_in_head_mem2_TCC1 0
  (put_in_head_mem2_TCC1-1 nil 3825081844 ("" (subtype-tcc) nil nil)
   nil nil
   (put_in_head_mem2 subtype "list_theory.lst"
    "(list_adt[list_theory.T].cons?)")))
 (put_in_head_mem2 0
  (put_in_head_mem2-1 nil 3825106186
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" -2)
            (("2" (expand "member" -2)
              (("2" (split -2)
                (("1" (grind) nil nil)
                 ("2" (inst -2 "lst" "lst2") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil))
    nil)
   nil shostak))
 (put_in_head_mem3 0
  (put_in_head_mem3-1 nil 3827491143
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (expand "put_in_head" -2) (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" -3)
            (("2" (expand "member" -3)
              (("2" (prop)
                (("1" (replace -1 -3)
                  (("1" (hide -1 -2) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (inst -2 "lst" "lst2" "x")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (get_repeat_lst_len 0
  (get_repeat_lst_len-1 nil 3805973910
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   nil SHOSTAK))
 (get_repeat_lst_append 0
  (get_repeat_lst_append-1 nil 3807737981
   ("" (induct "i") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   nil SHOSTAK))
 (get_repeat_lst_nth_TCC1 0
  (get_repeat_lst_nth_TCC1-1 nil 3807907575
   ("" (skeep) (("" (rewrite "get_repeat_lst_len") nil nil)) nil) nil
   nil
   (get_repeat_lst_nth subtype "list_theory.i"
    "below[length[T](get_repeat_lst(x, n))]")))
 (get_repeat_lst_nth 0
  (get_repeat_lst_nth-1 nil 3807907586
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "nth" 1)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "get_repeat_lst" 2)
                (("2" (inst? -1)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "get_repeat_lst_len") nil nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_repeat_lst_mem 0
  (get_repeat_lst_mem-1 nil 3809246189
   ("" (induct "n")
    (("1" (grind) nil nil) ("2" (skeep) (("2" (grind) nil nil)) nil))
    nil)
   nil SHOSTAK))
 (get_repeat_lst_count 0
  (get_repeat_lst_count-1 nil 3808606919
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   nil SHOSTAK))
 (select_greater_lt 0
  (select_greater_lt-1 nil 3830805045
   ("" (measure-induct "length(lst_nat)" "lst_nat")
    (("" (skolem 1 "lst_nat")
      (("" (prop)
        (("" (skeep)
          (("" (expand "member" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -2 "cdr(lst_nat)")
                  (("2" (prop)
                    (("1" (inst -1 "n")
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (select_greater def-decl "nat" list_theory nil)
    (<= const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (select_greater_plus_one_not_mem 0
  (select_greater_plus_one_not_mem-1 nil 3830804418
   ("" (measure-induct "length(lst_nat)" "lst_nat")
    (("" (skolem 1 "lst_nat")
      (("" (prop)
        (("" (expand "select_greater" -2)
          (("" (lift-if)
            (("" (prop)
              (("1" (grind) nil nil)
               ("2" (hide -2)
                (("2" (expand "max" -1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "member" -2)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (reveal -1)
                              (("2"
                                (inst? -1)
                                (("2"
                                  (prop)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "member" -1)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (lemma "select_greater_lt")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (select_greater def-decl "nat" list_theory nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (select_greater_lt formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (matrix_append 0
  (matrix_append-1 nil 3808146106
   ("" (induct "lst_of_lsts1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   nil SHOSTAK))
 (matrix_mem 0
  (matrix_mem-1 nil 3808146514
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "member" -3)
            (("2" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "matrix?" -3)
                (("2" (prop)
                  (("2" (inst -4 "lst" "n") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (count_gt0 0
  (count_gt0-1 nil 3808596362
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst 1 "0")
                  (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (inst -2 "equal?" "x")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst 2 "i+1")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (count_append 0
  (count_append-1 nil 3808606758
   ("" (induct "lst1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (get_repeat_lst_count_flatten 0
  (get_repeat_lst_count_flatten-1 nil 3809082278
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "get_repeat_lst" 1)
          (("2" (expand "map" 1)
            (("2" (expand "flatten" 1)
              (("2" (rewrite "count_append")
                (("2" (assert) (("2" (inst? -1) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pareate_append 0
  (pareate_append-1 nil 3805570156
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "pareate" 1 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (prop)
                      (("1" (rewrite "null_append")
                        (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
                       ("2" (rewrite "null_append")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (case "null?(lst1)")
                      (("1" (expand "append" 3 1)
                        (("1" (assert)
                          (("1" (case "null?(new_lst1)")
                            (("1" (assert)
                              (("1"
                                (expand "append" 3 2)
                                (("1"
                                  (expand "append" 3 1)
                                  (("1"
                                    (expand "append" 3 1)
                                    (("1"
                                      (expand "pareate" 3 2)
                                      (("1"
                                        (expand "append" 3)
                                        (("1"
                                          (expand "pareate" 3 2)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (rewrite
                                                     "null_append")
                                                    (("1"
                                                      (rewrite
                                                       "null_append")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 3 4) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "append" 4 1)
                        (("2" (assert)
                          (("2" (case "null?(new_lst1)")
                            (("1" (hide -3 2 3 4)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand "append" 5 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "pareate" 5 2)
                                  (("2"
                                    (expand "append" 5 3)
                                    (("2"
                                      (hide 1 2 3 4)
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (inst -1 "cdr(lst1)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "lst2"
                                               "cdr(new_lst1)"
                                               "new_lst2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (pareate_mem 0
  (pareate_mem-1 nil 3829162328
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd1" "tail1"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -2)
            (("2" (lift-if)
              (("2" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (inst -2 "cdr(lst2)" "pair")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (len_get_lst_until_n 0
  (len_get_lst_until_n-1 nil 3805615260
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_until_n" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (prop)
                  (("2" (expand "length" 3)
                    (("2" (assert)
                      (("2" (inst -1 "cdr(lst)")
                        (("2" (prop)
                          (("1" (inst -1 "n-1")
                            (("1" (replace -1 3)
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (nth_get_lst_until_n_TCC1 0
  (nth_get_lst_until_n_TCC1-1 nil 3805626352
   ("" (skeep)
    (("" (lemma "len_get_lst_until_n") (("" (grind) nil nil)) nil))
    nil)
   nil SHOSTAK
   (nth_get_lst_until_n subtype "list_theory.i"
    "below[length[T](lst)]")))
 (nth_get_lst_until_n 0
  (nth_get_lst_until_n-1 nil 3805630671
   ("" (measure-induct "length(lst)" "lst")
    (("1" (skolem 1 ("lst"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "nth" 1 2)
            (("1" (assert)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (expand "nth" 1)
                    (("1" (assert)
                      (("1" (expand "get_lst_until_n" 1)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (hide -3)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nth" 2 1)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "get_lst_until_n" 2)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (inst -1 "cdr(lst)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "i-1" "n-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 4)
                                          (("1"
                                            (expand
                                             "get_lst_until_n"
                                             -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "len_get_lst_until_n") (("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_lst_until_n_append 0
  (get_lst_until_n_append-1 nil 3805732972
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_until_n" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (expand "append" 3 1)
                  (("3" (lift-if)
                    (("3" (split)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (lemma "list_cons_eta[T]")
                            (("2" (inst? -1)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (inst -2 "cdr(lst1)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (expand "length" 2 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (len_get_lst_after_n 0
  (len_get_lst_after_n-1 nil 3805615894
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_after_n")
            (("" (lift-if)
              (("" (split)
                (("1" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (inst -1 "cdr(lst)")
                    (("2" (prop)
                      (("1" (inst -1 "n-1")
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (nth_get_lst_after_n_TCC1 0
  (nth_get_lst_after_n_TCC1-1 nil 3805626352 ("" (tcc)) nil nil
   (nth_get_lst_after_n subtype
    "(number_fields.-)(list_theory.i, list_props[list_theory.T].length(list_theory.lst1))"
    "below[length[T](lst2)]")))
 (nth_get_lst_after_n_TCC2 0
  (nth_get_lst_after_n_TCC2-1 nil 3805626352
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "len_get_lst_until_n")
        (("" (inst? -1)
          (("" (lemma "len_get_lst_after_n")
            (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK
   (nth_get_lst_after_n subtype "list_theory.i"
    "below[length[T](lst)]")))
 (nth_get_lst_after_n 0
  (nth_get_lst_after_n-1 nil 3805626359
   ("" (measure-induct "length(lst)" "lst")
    (("1" (skolem 1 ("lst"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (name-replace "lst4" "get_lst_after_n(lst, n)")
            (("1" (name-replace "lst3" "get_lst_until_n(lst, n)")
              (("1" (expand "nth" 1 2)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (case "lst3 = null")
                        (("1" (replace -2)
                          (("1" (replace -1)
                            (("1" (hide -1 -2)
                              (("1"
                                (expand "length" 1)
                                (("1"
                                  (expand "nth" 1)
                                  (("1"
                                    (expand "lst4")
                                    (("1"
                                      (case "n=0")
                                      (("1"
                                        (expand "get_lst_after_n" 1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (reveal -1 -3)
                                        (("2"
                                          (expand "get_lst_until_n" -2)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (expand
                                                     "get_lst_after_n"
                                                     -4)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 -4 2) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "lst4" 2)
                        (("2" (expand "get_lst_after_n" 2)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "lst3" 1)
                                    (("1"
                                      (expand "get_lst_until_n" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" 1)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (hide 1 -2)
                                        (("2"
                                          (expand ("lst3" "lst4"))
                                          (("2"
                                            (lemma
                                             "len_get_lst_after_n")
                                            (("2"
                                              (lemma
                                               "len_get_lst_until_n")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "lst3")
                                    (("2"
                                      (expand "get_lst_until_n" 3)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 3)
                                            (("2"
                                              (reveal -1)
                                              (("2"
                                                (inst -1 "cdr(lst)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "i-1"
                                                     "n-1")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 4)
                                                        (("2"
                                                          (expand
                                                           "get_lst_until_n"
                                                           -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 4)
                                                        (("3"
                                                          (hide -1)
                                                          (("3"
                                                            (expand
                                                             "lst4")
                                                            (("3"
                                                              (expand
                                                               "get_lst_until_n"
                                                               -1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (lemma "len_get_lst_until_n")
            (("2" (inst? -1)
              (("2" (lemma "len_get_lst_after_n")
                (("2" (inst? -1) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_lst_after_n_append 0
  (get_lst_after_n_append-1 nil 3805733653
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_after_n" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "append" 1) (("1" (grind) nil nil)) nil)
                 ("2" (rewrite "null_append") (("2" (grind) nil nil))
                  nil)
                 ("3" (expand "append" 3 1)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (grind) nil nil)
                       ("2" (assert)
                        (("2" (inst -1 "cdr(lst1)")
                          (("2" (prop)
                            (("1" (inst? -1) (("1" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (split_cor 0
  (split_cor-1 nil 3805572482
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 ("lst"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "equal_lst_nth")
            (("" (inst? -1)
              (("" (assert)
                (("" (hide 2)
                  (("" (prop)
                    (("1" (rewrite "length_append")
                      (("1" (expand "split" 1 1)
                        (("1" (expand "split" 1 1)
                          (("1" (lemma "len_get_lst_after_n")
                            (("1" (hide -2)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "len_get_lst_until_n")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 "i")
                      (("2" (lemma "nth_append")
                        (("2" (expand "split" 1 1)
                          (("2" (expand "split" 1 1)
                            (("2" (inst? -1)
                              (("2"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -2 1)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (lemma
                                             "nth_get_lst_until_n")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1 2)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (lemma
                                             "nth_get_lst_after_n")
                                            (("2"
                                              (inst -1 "i" "lst" "n")
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (rewrite
                                                     "length_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2"
                                    (rewrite "length_append")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (split_append 0
  (split_append-1 nil 3805732598
   ("" (skeep)
    (("" (expand "split" 1)
      (("" (prop)
        (("1" (lemma "get_lst_until_n_append")
          (("1" (inst? -1) nil nil)) nil)
         ("2" (lemma "get_lst_after_n_append")
          (("2" (inst? -1) nil nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (split_append_pair 0
  (split_append_pair-1 nil 3807887700
   ("" (skeep)
    (("" (prop)
      (("1" (expand "append_pair" 1)
        (("1" (lemma "split_append")
          (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "append_pair" 1)
        (("2" (lemma "split_append")
          (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (split_matrix_len 0
  (split_matrix_len-1 nil 3807805875
   ("" (induct "matrix") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (split_matrix_nth_TCC1 0
  (split_matrix_nth_TCC1-1 nil 3807887388
   ("" (skeep)
    (("" (lemma "split_matrix_len")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil nil
   (split_matrix_nth subtype "list_theory.i"
    "below[length[list[T]](split_matrix(matrix, n)`1)]")))
 (split_matrix_nth 0
  (split_matrix_nth-1 nil 3807887411
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split_matrix" 1)
            (("2" (expand "nth" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "nth" 2 2)
                    (("2" (assert)
                      (("2" (inst? -1)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "split_matrix_len")
          (("3" (inst? -1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (split_matrix_nth2_TCC1 0
  (split_matrix_nth2_TCC1-1 nil 3807902504
   ("" (skeep)
    (("" (lemma "split_matrix_len")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil nil
   (split_matrix_nth2 subtype "list_theory.i"
    "below[length[list[T]](split_matrix(matrix, n)`2)]")))
 (split_matrix_nth2 0
  (split_matrix_nth2-1 nil 3807902504
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split_matrix" 1)
            (("2" (expand "nth" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "nth" 2 2)
                    (("2" (assert)
                      (("2" (inst? -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "split_matrix_len")
          (("3" (inst? -1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (split_matrix_preserves_matrix 0
  (split_matrix_preserves_matrix-1 nil 3809247656
   ("" (induct "matrix" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split_matrix" 1)
            (("2" (expand "matrix?" 1)
              (("2" (prop)
                (("1" (expand "matrix?" -4)
                  (("1" (prop)
                    (("1" (inst? -4) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "matrix?" -3)
                  (("2" (prop)
                    (("2" (expand "split" 1)
                      (("2" (lemma "len_get_lst_until_n")
                        (("2" (inst? -1) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (split_matrix_preserves_matrix2_TCC1 0
  (split_matrix_preserves_matrix2_TCC1-1 nil 3809248000
   ("" (subtype-tcc) nil nil) nil nil
   (split_matrix_preserves_matrix2 subtype
    "(number_fields.-)(list_theory.n, list_theory.i)" "nat")))
 (split_matrix_preserves_matrix2 0
  (split_matrix_preserves_matrix2-1 nil 3809248001
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("row" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split_matrix" 1)
            (("2" (expand "matrix?" 1)
              (("2" (prop)
                (("1" (expand "matrix?" -4)
                  (("1" (prop)
                    (("1" (inst? -4) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "split" 1)
                  (("2" (lemma "len_get_lst_after_n")
                    (("2" (inst? -1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   nil SHOSTAK))
 (snd_proj_pareate 0
  (snd_proj_pareate-1 nil 3805734405
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "pareate" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "snd_proj" 3)
                    (("2" (inst -1 "cdr(lst1)")
                      (("2" (prop)
                        (("1" (inst -1 "cdr(lst2)")
                          (("1" (prop)
                            (("1" (replace -1 3)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "list_cons_eta[T]")
                                  (("1" (inst -1 "lst2") nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (snd_proj_pareate2 0
  (snd_proj_pareate2-1 nil 3809084025
   ("" (induct "lst2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide 1) (("1" (grind) nil nil)) nil)
                 ("2" (expand "snd_proj" 2)
                  (("2" (inst? -1) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_lst_mult_count_increment 0
  (get_lst_mult_count_increment-1 nil 3808603783
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skeep)
            (("2" (prop)
              (("1" (expand "increment" 1 1)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "get_lst_mult" 1 1)
                        (("2" (rewrite "count_append")
                          (("2" (expand "nth")
                            (("2" (assert)
                              (("2"
                                (lemma "get_repeat_lst_count")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1 1)
                                      (("2"
                                        (expand "get_lst_mult" 1 2)
                                        (("2"
                                          (rewrite "count_append")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma
                                               "get_repeat_lst_count")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "nth" -1 1)
                        (("3" (assert)
                          (("3" (expand "get_lst_mult" 2 1)
                            (("3" (rewrite "count_append")
                              (("3"
                                (lemma "get_repeat_lst_count")
                                (("3"
                                  (inst? -1)
                                  (("3"
                                    (prop)
                                    (("1"
                                      (replace -2 2)
                                      (("1"
                                        (expand "get_lst_mult" 2 2)
                                        (("1"
                                          (rewrite "count_append")
                                          (("1"
                                            (replace -2 2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal -2)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cdr(coef)"
                                                   "equal?"
                                                   "i-1"
                                                   "inc"
                                                   "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1 3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "get_lst_mult" 3 2)
                                          (("2"
                                            (rewrite "count_append" 3)
                                            (("2"
                                              (replace -1 3)
                                              (("2"
                                                (reveal -2)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "cdr(coef)"
                                                   "equal?"
                                                   "i-1"
                                                   "inc"
                                                   "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "increment" 2 1)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (expand "get_lst_mult" 2 1)
                              (("1"
                                (rewrite "count_append")
                                (("1"
                                  (lemma "get_repeat_lst_count")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "get_lst_mult" 2 2)
                                            (("1"
                                              (rewrite "count_append")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "get_repeat_lst_count")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "increment" 3 1)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("2" (expand "get_lst_mult" 2 1)
                              (("2"
                                (rewrite "count_append")
                                (("2"
                                  (expand "get_lst_mult" 2 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "count_append")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (reveal -1)
                                          (("2"
                                            (inst
                                             -1
                                             "cdr(coef)"
                                             "equal?"
                                             "i-1"
                                             "inc"
                                             "x")
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_lst_mult_null 0
  (get_lst_mult_null-1 nil 3809368395
   ("" (skeep)
    (("" (expand "get_lst_mult" -1)
      (("" (lift-if)
        (("" (prop)
          (("" (rewrite "null_append")
            (("" (prop)
              (("" (expand "get_repeat_lst" -1)
                (("" (lift-if)
                  (("" (prop)
                    (("1" (typepred "lst_pos_nat")
                      (("1" (hide -3 -4 1 2 3 4)
                        (("1" (grind)
                          (("1" (expand "every" -1)
                            (("1" (grind)
                              (("1"
                                (reveal -2)
                                (("1"
                                  (reveal 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_lst_mult_append 0
  (get_lst_mult_append-1 nil 3808938249
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (expand "append" 1 1)
        (("1" (expand "length" -1)
          (("1" (assert)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "length" -2)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (assert)
                    (("2" (expand "append" 2 2)
                      (("2" (expand "get_lst_mult" 2 1)
                        (("2" (expand "get_lst_mult" 2 2)
                          (("2" (rewrite "append_assoc")
                            (("2" (inst? -2) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_lst_mult_count_append 0
  (get_lst_mult_count_append-1 nil 3808658710
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (expand "append" 1)
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "get_lst_mult" 1 3) (("1" (grind) nil nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skeep)
            (("2" (expand "append" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide 1) (("1" (grind) nil nil)) nil)
                   ("2" (expand "get_lst_mult" 2 1)
                    (("2" (rewrite "count_append")
                      (("2" (reveal -1)
                        (("2"
                          (inst -1 "cdr(coef1)" "coef2" "equal?" "lst2"
                           "x")
                          (("2" (prop)
                            (("1" (replace -1 2)
                              (("1"
                                (hide -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "get_lst_mult" 2 2)
                                    (("1"
                                      (rewrite "count_append")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_lst_mult_count 0
  (get_lst_mult_count-1 nil 3809081885
   ("" (induct "lst" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "dot_product" 1)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (rewrite "map_append")
                  (("2" (rewrite "flatten_append")
                    (("2" (rewrite "count_append")
                      (("2" (expand "map" 2 4)
                        (("2" (expand "map" 2 3)
                          (("2" (expand "dot_product" 2 1)
                            (("2" (assert)
                              (("2"
                                (inst? -1)
                                (("2"
                                  (replace -1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "get_repeat_lst_count_flatten")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "count" 2 2)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_product def-decl "nat" list_nat_theory nil)) SHOSTAK))
 (remove_len 0
  (remove_len-1 nil 3806760066
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "length" 2)
                  (("2" (inst -1 "i-1")
                    (("1" (grind) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (gt_nth_remove_TCC1 0
  (gt_nth_remove_TCC1-1 nil 3807099381
   ("" (skeep)
    (("" (lemma "remove_len")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil nil
   (gt_nth_remove subtype "list_theory.n"
    "below[length[T](remove(lst, i))]")))
 (gt_nth_remove_TCC2 0
  (gt_nth_remove_TCC2-1 nil 3807099381 ("" (subtype-tcc) nil nil) nil
   nil
   (gt_nth_remove subtype "list_theory.n" "below[length[T](lst)]")))
 (gt_nth_remove 0
  (gt_nth_remove-1 nil 3807099381
   ("" (induct "lst")
    (("1" (skeep) (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -2 1) (("1" (grind) nil nil)) nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "nth" 2 2)
                        (("2" (assert)
                          (("2" (inst -1 "i-1" "n-1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "remove_len")
          (("4" (inst? -1) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (gt_nth_remove2_TCC1 0
  (gt_nth_remove2_TCC1-1 nil 3807099381
   ("" (skeep)
    (("" (lemma "remove_len")
      (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
    nil)
   nil nil
   (gt_nth_remove2 subtype "(number_fields.-)(list_theory.i, 1)"
    "below[length[T](remove(lst, n))]")))
 (gt_nth_remove2 0
  (gt_nth_remove2-1 nil 3807104525
   ("" (induct "lst")
    (("1" (skeep) (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "nth" 1 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (hide -3 1) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 1) (("1" (grind) nil nil)) nil)
                       ("2" (expand "nth" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (hide -2 1) (("1" (grind) nil nil))
                              nil)
                             ("2" (inst -1 "i-1" "n-1")
                              (("1" (grind) nil nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (assert)
          (("3" (lemma "remove_len")
            (("3" (inst? -1) (("3" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (gt_remove_remove_TCC1 0
  (gt_remove_remove_TCC1-1 nil 3807099381 ("" (subtype-tcc) nil nil)
   nil nil
   (gt_remove_remove subtype "(number_fields.-)(list_theory.i, 1)"
    "nat")))
 (gt_remove_remove 0
  (gt_remove_remove-1 nil 3807105130
   ("" (measure-induct "length(lst)" "lst")
    (("1" (skolem 1 "lst")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (expand "remove" 1 2)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (hide 1) (("1" (grind) nil nil)) nil)
                   ("2" (expand "remove" 1 3)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "remove" 1 2)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "remove" 2 1)
                    (("3" (lift-if)
                      (("3" (prop)
                        (("1" (hide 1) (("1" (grind) nil nil)) nil)
                         ("2" (expand "remove" 2 4)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (expand "remove" 2 3)
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (inst -1 "cdr(lst)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -1 "i-1" "n-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 3)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
    nil)
   nil SHOSTAK))
 (remove_append_TCC1 0
  (remove_append_TCC1-1 nil 3807517007 ("" (subtype-tcc) nil nil) nil
   nil
   (remove_append subtype
    "(number_fields.-)(list_theory.i, list_props[list_theory.T].length(list_theory.lst1))"
    "nat")))
 (remove_append 0
  (remove_append-1 nil 3807517008
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (lift-if)
        (("1" (prop)
          (("1" (hide 1) (("1" (grind) nil nil)) nil)
           ("2" (expand "append" 2)
            (("2" (expand "length" 2) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skeep)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "append" 1 1)
                  (("1" (expand "remove" 1 1)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (flatten)
                          (("1" (expand "remove" 1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "remove" 2 2)
                            (("2" (assert)
                              (("2"
                                (expand "append" 2 2)
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (inst -1 "i-1" "lst2")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "append" 2 1)
                  (("2" (expand "remove" 2 1)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide 1) (("1" (grind) nil nil)) nil)
                           ("2" (expand "append" 2 2)
                            (("2" (reveal -1)
                              (("2"
                                (inst -1 "i-1" "lst2")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (expand "length" 3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (expand "length" 2 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   nil SHOSTAK))
 (flatten_remove 0
  (flatten_remove-1 nil 3807478749
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (replace -1 1)
                  (("1" (expand "remove" 1 2)
                    (("1" (expand "flatten" 1 2)
                      (("1" (expand "ind_flatten" 1)
                        (("1" (lift-if)
                          (("1" (expand "length" 1 1)
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "flatten" 1 1)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (lemma "remove_append")
                                      (("1"
                                        (inst
                                         -1
                                         "j"
                                         "hd"
                                         "flatten(tail)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "length(hd) = 1")
                                                        (("1"
                                                          (expand
                                                           "flatten"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "append_null")
                                                              (("1"
                                                                (expand
                                                                 "remove"
                                                                 1)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide
                                                                       -4
                                                                       -7)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2 -5)
                                                        (("2"
                                                          (case
                                                           "length(hd) = 1")
                                                          (("1"
                                                            (expand
                                                             "remove"
                                                             2)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (case
                                                                         "cdr(hd) = null")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "length"
                                                                           -2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -3)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "flatten"
                                                     2
                                                     2)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2)
                  (("2" (expand "remove" 2 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "flatten" 2 2)
                          (("2" (expand "flatten" 2 1)
                            (("2" (expand "ind_flatten" 2)
                              (("2"
                                (lemma "remove_append")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1 2)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (reveal -3)
                                          (("2"
                                            (inst -1 "i-1" "j")
                                            (("2"
                                              (expand "length" -3)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (count_remove 0
  (count_remove-1 nil 3808596619
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (prop)
              (("1" (expand "count" 1 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "remove" 1)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("2" (expand "count" 2 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "cdr(lst)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "equal?" "i-1" "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "nth" -3)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "remove" 2)
                      (("3" (lift-if)
                        (("3" (assert)
                          (("3" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "count" 2 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "cdr(lst)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "equal?" "i-1" "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "nth" -2)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "count" 2 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "remove" 1)
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (expand "nth" 3)
                              (("1" (assert) nil nil)) nil)
                             ("2" (expand "count" 2 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "cdr(lst)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "nth" 4)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "remove" 2 1)
                      (("3" (lift-if)
                        (("3" (assert)
                          (("3" (prop)
                            (("3" (expand "count" 2 2)
                              (("3"
                                (reveal -1)
                                (("3"
                                  (inst -1 "cdr(lst)")
                                  (("3"
                                    (prop)
                                    (("1"
                                      (inst -1 "equal?" "i-1" "x")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "nth" 5 1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (remove_common_mem 0
  (remove_common_mem-1 nil 3829225264
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove_common" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -3 "cdr(lst1)")
                  (("2" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (expand "member" -1)
                  (("3" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -2 "cdr(lst1)")
                      (("2" (prop)
                        (("1" (inst? -1)
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (get_common_null 0
  (get_common_null-1 nil 3808412191
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_common" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide 1) (("1" (grind) nil nil)) nil)
                 ("2" (inst? -1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_common_remove_nth 0
  (get_common_remove_nth-1 nil 3808412255
   ("" (induct "lst2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_common" 2 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "get_common" 1 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (assert)
                        (("1"
                          (case "get_common(tail, remove(remove(lst1, n), pos?(hd, remove(lst1, n), equal?)`2),
                                 equal?) = get_common(tail, remove(lst1, pos?(hd, lst1, equal?)`2),
                                  equal?)")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (hide -3 -5)
                              (("2"
                                (name-replace
                                 "pos"
                                 "pos?(hd, lst1, equal?)`2")
                                (("2"
                                  (name-replace
                                   "pos_rem"
                                   "pos?(hd, remove(lst1, n), equal?)`2")
                                  (("2"
                                    (reveal -3)
                                    (("2"
                                      (inst
                                       -1
                                       "equal?"
                                       "remove(lst1, pos)"
                                       "_")
                                      (("2"
                                        (case "n > pos")
                                        (("1"
                                          (case "pos_rem = pos")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (inst -3 "n-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "gt_remove_remove")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "remove_len")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "gt_nth_remove2")
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -2 2 3)
                                            (("2"
                                              (expand "pos" 1)
                                              (("2"
                                                (expand "pos_rem")
                                                (("2"
                                                  (lemma
                                                   "pos?_remove_ind_lt")
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "pos"
                                                         -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n = pos")
                                          (("1"
                                            (hide -2 2)
                                            (("1"
                                              (lemma "pos?_cor")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "pos?" 2)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (expand
                                                           "pos"
                                                           1)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             2
                                                             3)
                                                            (("1"
                                                              (typepred
                                                               "equal?")
                                                              (("1"
                                                                (expand
                                                                 "equivalence?"
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "symmetric?"
                                                                     -2)
                                                                    (("1"
                                                                      (inst?
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n < pos")
                                            (("1"
                                              (hide 1 2)
                                              (("1"
                                                (case
                                                 "pos_rem = pos -1")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (inst -3 "n")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (rewrite
                                                           "gt_remove_remove"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "pos"
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "pos?_len")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "remove_len")
                                                          (("1"
                                                            (case
                                                             "pos < length(lst1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "pos"
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "pos?_len")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "pos"
                                                             1)
                                                            (("2"
                                                              (rewrite
                                                               "pos?_len")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (rewrite
                                                           "gt_nth_remove")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "pos"
                                                             1)
                                                            (("2"
                                                              (rewrite
                                                               "pos?_len")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 2 3)
                                                  (("2"
                                                    (lemma
                                                     "pos?_remove_ind_gt")
                                                    (("2"
                                                      (expand "pos")
                                                      (("2"
                                                        (expand
                                                         "pos_rem")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -2 2 3)
                        (("2" (lemma "pos?_remove")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "get_common" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (lemma "pos?_remove_nth")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (hide -3)
                              (("1"
                                (hide 1 2)
                                (("1"
                                  (expand "pos?" 1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -2 -3 2)
                                      (("1"
                                        (typepred "equal?")
                                        (("1"
                                          (expand "equivalence?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "symmetric?" -2)
                                              (("1"
                                                (inst? -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst? -1)
                        (("2" (assert)
                          (("2" (expand "pos?" 4)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_common_bool 0
  (get_common_bool-1 nil 3808492684
   ("" (induct "lst1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (name-replace "bool2" "pos?(x, lst2, equal?)`1")
            (("3"
              (name-replace "bool1"
               "pos?(x, cons(hd, tail), equal?)`1")
              (("3"
                (name-replace "bool12"
                 "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`1")
                (("3" (expand "bool1")
                  (("3" (expand "pos?" 1)
                    (("3" (lift-if)
                      (("3" (split)
                        (("1" (flatten)
                          (("1" (expand "bool2")
                            (("1" (expand "bool12")
                              (("1"
                                (expand "get_common" 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "pos?_equal")
                                        (("1"
                                          (inst
                                           -1
                                           "equal?"
                                           "lst2"
                                           "hd"
                                           "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "pos?" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -4 1)
                                                (("2"
                                                  (typepred "equal?")
                                                  (("2"
                                                    (expand
                                                     "equivalence?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "symmetric?"
                                                         -2)
                                                        (("2"
                                                          (inst? -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "equal?")
                                                (("3"
                                                  (expand
                                                   "equivalence?"
                                                   -1)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide -4 -5 -7)
                                                      (("3"
                                                        (expand
                                                         "symmetric?"
                                                         -2)
                                                        (("3"
                                                          (inst? -2)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma "pos?_equal")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (inst -1 "x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst? -3)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "bool2")
                            (("2" (expand "bool12")
                              (("2"
                                (expand "get_common" 2 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "pos?" 1 3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -4
                                                 "equal?"
                                                 "lst2"
                                                 "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (reveal -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "equal?"
                                                       "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                       "x")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (lemma
                                                             "pos?_remove_nth")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "pos?_cor")
                                                                    (("1"
                                                                      (inst?
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -3
                                                                           -6)
                                                                          (("1"
                                                                            (typepred
                                                                             "equal?")
                                                                            (("1"
                                                                              (expand
                                                                               "equivalence?"
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "symmetric?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "hd"
                                                                                     "_")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "nth(lst2, pos?(hd, lst2, equal?)`2)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "transitive?"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -3
                                                                                             "x"
                                                                                             "nth(lst2, pos?(hd, lst2, equal?)`2)"
                                                                                             "hd")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "pos?_len")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 -3
                                                 "equal?"
                                                 "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                 "x")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst
                                                 -3
                                                 "equal?"
                                                 "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                 "x")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide -3 -1)
                                                      (("3"
                                                        (lemma
                                                         "pos?_remove")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "lst2"
                                                           "pos?(hd, lst2, equal?)`2"
                                                           "x")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst -1 "equal?" "lst2" "x")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (get_common_remove 0
  (get_common_remove-1 nil 3808504191
   ("" (induct "lst1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3"
            (name-replace "ind12"
             "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`2")
            (("3"
              (name-replace "ind1" "pos?(x, cons(hd, tail), equal?)`2")
              (("3" (name-replace "ind2" "pos?(x, lst2, equal?)`2")
                (("3"
                  (name-replace "bool12"
                   "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`1")
                  (("3" (expand "get_common" 1 1)
                    (("3" (lift-if)
                      (("3" (prop)
                        (("1" (expand "remove" 1 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "ind12")
                                (("1"
                                  (expand "pos?" -1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "bool12")
                                          (("1"
                                            (hide -2 -3 1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1)
                                          (("2"
                                            (expand "get_common" -1)
                                            (("2"
                                              (case "ind1 = 0")
                                              (("1"
                                                (expand "remove" 1 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "ind2")
                                                    (("1"
                                                      (lemma
                                                       "pos?_equal2")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "equal?"
                                                         "lst2"
                                                         "x"
                                                         "hd")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "ind1")
                                                (("2"
                                                  (expand "pos?" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "remove" 2 3)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (expand "ind1" -1)
                                        (("1"
                                          (expand "pos?" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "ind12")
                                                  (("1"
                                                    (expand
                                                     "get_common"
                                                     1)
                                                    (("1"
                                                      (expand "pos?" 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "get_common" 2 2)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case
                                               "remove(get_common(tail, remove(lst2, pos?(hd, lst2, equal?)`2), equal?), ind12 - 1) = get_common(remove(tail, ind1 - 1), remove(remove(lst2, ind2), pos?(hd, remove(lst2, ind2), equal?)`2), equal?)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (name-replace
                                                   "ind_hd_lst2"
                                                   "pos?(hd, lst2, equal?)`2")
                                                  (("2"
                                                    (name-replace
                                                     "ind_hd_remlst2"
                                                     "pos?(hd, remove(lst2, ind2), equal?)`2")
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "equal?"
                                                       "remove(lst2, ind_hd_lst2)"
                                                       "x")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (case
                                                           "pos?(x, get_common(tail, remove(lst2, ind_hd_lst2), equal?), equal?)`2 = ind12 -1")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (case
                                                               "pos?(x, tail, equal?)`2  = ind1 -1")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -3)
                                                                (("1"
                                                                  (case
                                                                   "remove(remove(lst2, ind_hd_lst2), pos?(x, remove(lst2, ind_hd_lst2), equal?)`2) = remove(remove(lst2, ind2), ind_hd_remlst2)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "ind_hd_remlst2")
                                                                        (("2"
                                                                          (case
                                                                           "ind_hd_lst2 < ind2")
                                                                          (("1"
                                                                            (lemma
                                                                             "pos?_remove_ind_lt")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "equal?"
                                                                               "lst2"
                                                                               "ind2"
                                                                               "hd")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -7)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "pos?_remove_ind_gt")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "equal?"
                                                                                               "lst2"
                                                                                               "ind_hd_lst2"
                                                                                               "x")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "gt_remove_remove")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ind2"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "pos?_len")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "bool12")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "get_common_bool")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "bool12")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "get_common_bool")
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     "ind2")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "ind_hd_lst2"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "ind_hd_lst2 = ind2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "pos?(x, remove(lst2, ind_hd_lst2), equal?)`2 = pos?(hd, remove(lst2, ind2), equal?)`2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   3
                                                                                   2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ind_hd_lst2"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ind2"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "pos?_cor2")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "equal?"
                                                                                             "lst2"
                                                                                             "x"
                                                                                             "hd")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "pos?_equal2")
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "bool12")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "get_common_bool")
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "ind_hd_lst2 > ind2")
                                                                              (("1"
                                                                                (hide
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "pos?_remove_ind_gt")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "equal?"
                                                                                     "lst2"
                                                                                     "ind2"
                                                                                     "hd")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -7)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "gt_remove_remove")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "ind_hd_lst2"
                                                                                                     "lst2"
                                                                                                     "ind2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "pos?(x, remove(lst2, ind_hd_lst2), equal?)`2 = ind2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "ind2")
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "pos?_remove_ind_lt")
                                                                                                                  (("2"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "bool12")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "get_common_bool")
                                                                                                                            (("2"
                                                                                                                              (inst?
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "ind_hd_lst2")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "pos?_len")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "ind1"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "pos?"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "ind1"
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "pos?"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (prop)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "ind12"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "get_common"
                                                               1
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "pos?"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (expand
                                                                           "ind12"
                                                                           3)
                                                                          (("2"
                                                                            (expand
                                                                             "get_common"
                                                                             3)
                                                                            (("2"
                                                                              (expand
                                                                               "pos?"
                                                                               3
                                                                               1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ind_hd_lst2")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "bool12"
                                                           -3)
                                                          (("2"
                                                            (expand
                                                             "get_common"
                                                             -3)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "pos?"
                                                                   -3
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "ind12"
                                                                     4)
                                                                    (("2"
                                                                      (expand
                                                                       "get_common"
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "pos?"
                                                                         4
                                                                         1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (expand
                                                                               "ind_hd_lst2"
                                                                               4)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil)
                                               ("4" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide -2 2)
                                              (("2"
                                                (lemma
                                                 "pos?_remove_nth")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "ind2")
                                                        (("1"
                                                          (lemma
                                                           "pos?_cor")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "ind1"
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "pos?"
                                                                   2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (typepred
                                                                             "equal?")
                                                                            (("1"
                                                                              (expand
                                                                               "equivalence?"
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "symmetric?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "hd"
                                                                                     "nth(lst2, pos?(x, lst2, equal?)`2)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "transitive?"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -3
                                                                                           "x"
                                                                                           "nth(lst2, pos?(x, lst2, equal?)`2)"
                                                                                           "hd")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "bool12")
                                                                (("2"
                                                                  (lemma
                                                                   "get_common_bool")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "pos?_len")
                                                      (("2"
                                                        (expand "ind2")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "bool12")
                                                              (("2"
                                                                (lemma
                                                                 "get_common_bool")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "remove" 2 2)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1"
                                (expand "ind1")
                                (("1"
                                  (expand "pos?" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "bool12")
                                          (("1"
                                            (hide -2 1)
                                            (("1"
                                              (lemma "get_common_bool")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma
                                                         "pos?_equal")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "lst2"
                                                           "x"
                                                           "hd")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "get_common" 2 2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lemma "pos?_remove")
                                      (("1"
                                        (inst? -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "equal?" "lst2" "x")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (case
                                           "pos?(x, get_common(tail, lst2, equal?), equal?)`2 = ind12")
                                          (("1"
                                            (replace -1 -2)
                                            (("1"
                                              (case
                                               "pos?(x, tail, equal?)`2 = ind1 - 1")
                                              (("1"
                                                (replace -1 -3)
                                                (("1"
                                                  (expand "ind2" 2)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "ind1" 1)
                                                (("2"
                                                  (expand "pos?" 1 2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (expand "ind1" 4)
                                                      (("2"
                                                        (expand
                                                         "pos?"
                                                         4)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (prop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "ind12" 1)
                                            (("2"
                                              (expand "get_common" 1 2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "bool12")
                                          (("2"
                                            (expand "get_common" -1)
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (same_count?_get_lst_mul 0
  (same_count?_get_lst_mul-1 nil 3808601717
   ("" (induct "lst2")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (expand "same_count?" 1)
            (("3" (skeep)
              (("3" (expand "count_elem" 1 1)
                (("3" (lift-if)
                  (("3" (prop)
                    (("1" (hide -2)
                      (("1" (expand "count_elem" 1 2)
                        (("1" (assert)
                          (("1"
                            (name-replace "ind_hd"
                             "pos?(hd, lst1, equal?)`2")
                            (("1" (reveal -2)
                              (("1"
                                (inst
                                 -1
                                 "increment(coef, ind_hd, 1)"
                                 "equal?"
                                 "lst1")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "same_count?" -1)
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (rewrite "count_append")
                                            (("1"
                                              (rewrite "count_append")
                                              (("1"
                                                (expand "count" 1 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "get_lst_mult_count_increment")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "coef"
                                                           "equal?"
                                                           "ind_hd"
                                                           "1"
                                                           "lst1"
                                                           "x")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "ind_hd")
                                                                (("2"
                                                                  (lemma
                                                                   "pos?_cor")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "equal?")
                                                                        (("2"
                                                                          (expand
                                                                           "equivalence?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (expand
                                                                                 "transitive?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x"
                                                                                   "hd"
                                                                                   "nth(lst1, pos?(hd, lst1, equal?)`2)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "ind_hd"
                                                               1)
                                                              (("3"
                                                                (lemma
                                                                 "pos?_len")
                                                                (("3"
                                                                  (inst?
                                                                   -1)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (expand
                                                               "ind_hd"
                                                               1)
                                                              (("4"
                                                                (lemma
                                                                 "pos?_len")
                                                                (("4"
                                                                  (inst?
                                                                   -1)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "get_lst_mult_count_increment")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "coef"
                                                         "equal?"
                                                         "ind_hd"
                                                         "1"
                                                         "lst1"
                                                         "x")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (lemma
                                                                 "pos?_cor")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "equal?")
                                                                      (("1"
                                                                        (expand
                                                                         "equivalence?"
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "symmetric?"
                                                                             -2)
                                                                            (("1"
                                                                              (reveal
                                                                               -6)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -5)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "hd"
                                                                                   "nth(lst1, ind_hd)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "transitive?"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -4
                                                                                         "x"
                                                                                         "nth(lst1, ind_hd)"
                                                                                         "hd")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             3)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "ind_hd")
                                                            (("3"
                                                              (lemma
                                                               "pos?_len")
                                                              (("3"
                                                                (inst?
                                                                 -1)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             "ind_hd"
                                                             1)
                                                            (("4"
                                                              (lemma
                                                               "pos?_len")
                                                              (("4"
                                                                (inst?
                                                                 -1)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "increment_len")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "count_elem" 2 2)
                      (("2" (assert)
                        (("2"
                          (inst -1 "append(coef, cons[nat](1, null))"
                           "equal?" "append(lst1, cons(hd, null))")
                          (("2" (prop)
                            (("1" (expand "same_count?" -1)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (replace -1 2 rl)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (rewrite "count_append")
                                      (("1"
                                        (rewrite "count_append")
                                        (("1"
                                          (expand "count" 2 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "get_lst_mult_count_append")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "get_lst_mult"
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "count_append")
                                                                (("1"
                                                                  (expand
                                                                   "get_lst_mult"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "count"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (lemma
                                                                       "get_repeat_lst_count")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "get_lst_mult_count_append")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1 2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "get_lst_mult"
                                                             2)
                                                            (("2"
                                                              (rewrite
                                                               "count_append")
                                                              (("2"
                                                                (lemma
                                                                 "get_repeat_lst_count")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (rewrite "length_append")
                                (("2"
                                  (rewrite "length_append")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (mem_lst2set 0
  (mem_lst2set-1 nil 3823877038
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   nil shostak))
 (mem_lst2set_2 0
  (mem_lst2set_2-1 nil 3830008764
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   nil shostak))
 (is_fin_lst2set 0
  (is_fin_lst2set-1 nil 3819398855
   ("" (induct "lst_of_fin_sets")
    (("1" (expand "list2set" 1) (("1" (propax) nil nil)) nil)
     ("2" (skeep)
      (("2" (expand "list2set" 1)
        (("2" (rewrite "finite_add") nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (mem_union_lst2set 0
  (mem_union_lst2set-1 nil 3823879127
   ("" (induct "lst_of_fin_sets")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (case "member(x, hd)")
              (("1" (hide -2 -3)
                (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)) nil)
               ("2" (inst -2 "x")
                (("2" (flatten)
                  (("2" (hide -3)
                    (("2" (prop)
                      (("1" (skolem -1 "fin_set")
                        (("1" (inst 2 "fin_set")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (expand "list2set" -1)
                          (("2" (lemma "Union_member[T]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "Union_member[T]")
                                    (("2"
                                      (inst
                                       -1
                                       "extend[setof[T], finite_set[T], bool, FALSE]
                       (add(hd, list2set(tail)))"
                                       "x")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (inst 1 "a")
                                              (("2"
                                                (typepred "a")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -2)
                (("2" (prop)
                  (("1" (hide -3) (("1" (grind) nil nil)) nil)
                   ("2" (inst -3 "x")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (hide -2 -3)
                              (("1"
                                (expand "member" 1)
                                (("1"
                                  (expand "Union" 1)
                                  (("1"
                                    (expand "member" -1)
                                    (("1"
                                      (expand "Union" -1)
                                      (("1"
                                        (skolem -1 "A")
                                        (("1"
                                          (inst 1 "A")
                                          (("1"
                                            (typepred "A")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 1 "fin_set")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (card_surj_aux 0
  (card_surj_aux-1 nil 3826485264
   ("" (skeep)
    (("" (skolem -1 "f1")
      (("" (skolem -2 "f2")
        (("" (inst 1 "o(f2, f1)")
          (("" (expand "surjective?" 1)
            (("" (skeep)
              (("" (expand "surjective?" -2)
                (("" (inst -2 "y")
                  (("" (skolem -2 "mid")
                    (("" (expand "surjective?" -1)
                      (("" (inst -1 "mid")
                        (("" (skeep)
                          (("" (inst 1 "x") (("" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (card_surj 0
  (card_surj-1 nil 3826400681
   ("" (skeep)
    (("" (rewrite "card_def")
      (("" (rewrite "card_def")
        (("" (rewrite "Card_surjection")
          (("" (hide 2)
            (("" (name-replace "n2" "Card(fin_set2)")
              (("" (hide -1)
                (("" (lemma "Card_bijection[T]")
                  (("" (inst -1 "fin_set2" "Card[T](fin_set2)")
                    (("" (assert)
                      (("" (lemma "card_surj_aux")
                        (("" (inst? -1)
                          (("" (inst -1 "fin_set2")
                            (("" (prop)
                              ((""
                                (hide -2 2)
                                ((""
                                  (expand "bijective?" -1)
                                  ((""
                                    (skeep)
                                    (("" (inst 1 "f") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))
(list_theory2
 (first_proj_TCC1 0
  (first_proj_TCC1-1 nil 3821910421 ("" (subtype-tcc) nil nil) nil nil
   (first_proj subtype "list_theory2.lst_pair"
    "(list_adt[[list_theory2.T1, list_theory2.T2]].cons?)")))
 (first_proj_TCC2 0
  (first_proj_TCC2-1 nil 3821910421 ("" (termination-tcc) nil nil) nil
   nil
   (first_proj termination
    "list_theory2.first_proj(list_adt[[list_theory2.T1, list_theory2.T2]].cdr(list_theory2.lst_pair))"
    "nil")))
 (first_proj_TCC3 0
  (first_proj_TCC3-1 nil 3821910421 ("" (subtype-tcc) nil nil) nil nil
   (first_proj subtype "list_theory2.lst_pair"
    "(list_adt[[list_theory2.T1, list_theory2.T2]].cons?)")))
 (first_proj_TCC4 0
  (first_proj_TCC4-1 nil 3830612215 ("" (subtype-tcc) nil nil) nil nil
   (first_proj subtype "list_theory2.lst_pair_"
    "(list_adt[[list_adt[list_theory2.T1].list, list_theory2.T2]].cons?)")))
 (first_proj_TCC5 0
  (first_proj_TCC5-1 nil 3830612215 ("" (termination-tcc) nil nil) nil
   nil
   (first_proj termination
    "list_theory2.first_proj(list_adt[[list_adt[list_theory2.T1].list, list_theory2.T2]].cdr(list_theory2.lst_pair_))"
    "nil")))
 (sec_proj_TCC1 0
  (sec_proj_TCC1-1 nil 3825875223 ("" (termination-tcc) nil nil) nil
   nil
   (sec_proj termination
    "list_theory2.sec_proj(list_adt[[list_theory2.T1, list_theory2.T2]].cdr(list_theory2.lst_pair))"
    "nil")))
 (first_proj_nth_mem 0
  (first_proj_nth_mem-1 nil 3824997093
   ("" (induct "lst_pair")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -2)
            (("2" (expand "nth" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -1 "n-1")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_proj_is_map 0
  (first_proj_is_map-1 nil 3825166760
   ("" (inst 1 "first_proj")
    (("" (induct "lst_pair")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (first_proj_mem 0
  (first_proj_mem-1 nil 3830366047
   ("" (induct "lst_pair")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "first_proj" 1)
            (("2" (prop)
              (("1" (expand "member" -1)
                (("1" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "x")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "pair") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "x")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "pair")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_proj_mem_flatten 0
  (first_proj_mem_flatten-1 nil 3830612318
   ("" (induct "lst_pair_")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "first_proj" 1)
            (("2" (expand "flatten" 1)
              (("2" (prop)
                (("1" (rewrite "member_append")
                  (("1" (prop)
                    (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                     ("2" (inst -2 "x")
                      (("2" (assert)
                        (("2" (skolem -2 "pair_")
                          (("2" (inst 1 "pair_")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem -1 "pair_")
                  (("2" (prop)
                    (("2" (rewrite "member_append")
                      (("2" (expand "member" -1)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst -3 "x")
                            (("2" (prop)
                              (("2"
                                (inst 1 "pair_")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append formula-decl nil list_theory nil)
    (flatten def-decl "list[T]" list_theory nil))
   shostak)))
(map_theory
 (map_append 0
  (map_append-1 nil 3807643644
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (assert)
            (("2" (expand "append" 1 1)
              (("2" (expand "map" 1 1)
                (("2" (expand "map" 1 2)
                  (("2" (expand "append" 1 2)
                    (("2" (inst -1 "f" "l2") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil SHOSTAK))
 (map_append2 0
  (map_append2-1 nil 3807736141
   ("" (induct "l1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   nil SHOSTAK))
 (map_member 0
  (map_member-1 nil 3823891542
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1)
            (("2" (expand "member" 1 1)
              (("2" (expand "member" 1 2)
                (("2" (inst -1 "f_set" "fin_set")
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (hide -2)
                          (("1" (hide -2) (("1" (inst 1 "hd") nil nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (skolem -2 "y")
                            (("2" (inst 1 "y") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (prop)
                      (("2" (skolem -1 "y")
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst 1 "y") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (map_member2 0
  (map_member2-1 nil 3823896686
   ("" (induct "l1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   nil shostak))
 (map_member3 0
  (map_member3-1 nil 3823958229
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (case "member(x, map(f)(cons(hd, tail)))")
            (("1" (assert)
              (("1" (expand "map" -1)
                (("1" (expand "member" -1)
                  (("1" (prop)
                    (("1" (inst 1 "0")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (inst? -2)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "n+1")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "EXISTS (n: below[length(cons(hd, tail))]):
         x = f(nth(cons(hd, tail), n))")
              (("1" (skeep)
                (("1" (expand "nth" -1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst? -2)
                        (("2" (inst -2 "x")
                          (("2" (assert)
                            (("2" (expand "map" 2)
                              (("2"
                                (expand "member" 2)
                                (("2"
                                  (prop)
                                  (("2"
                                    (assert)
                                    (("2" (inst 4 "n-1") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (map_member4 0
  (map_member4-1 nil 3824300311
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1)
            (("2" (expand "member" 1)
              (("2" (case "x = f(hd)")
                (("1" (assert) (("1" (inst 1 "hd") nil nil)) nil)
                 ("2" (assert)
                  (("2" (inst -1 "f" "x")
                    (("2" (prop)
                      (("1" (skeep)
                        (("1" (inst 1 "y") (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (skeep) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (mem_union_map 0
  (mem_union_map-1 nil 3823889075
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "Union" -1)
              (("1" (expand "member" -1)
                (("1" (skolem -1 "A")
                  (("1" (typepred "A")
                    (("1" (expand "extend" -1)
                      (("1" (prop)
                        (("1" (expand "map" -2)
                          (("1" (expand "list2set" -2)
                            (("1" (expand "add" -2)
                              (("1"
                                (prop)
                                (("1"
                                  (inst 1 "hd")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (inst -4 "f_set" "x")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (skolem -2 "y")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst 1 "y")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 1 3)
                                      (("2"
                                        (expand "member" 1)
                                        (("2"
                                          (expand "Union" 1)
                                          (("2"
                                            (inst 1 "A")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "y")
              (("2" (prop)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (expand "member" 1)
                      (("1" (expand "Union" 1)
                        (("1" (inst 1 "f_set(y)")
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst? -3)
                      (("2" (inst -3 "x")
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (hide -2 -3 -4)
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "Union" -1)
                                  (("1"
                                    (skolem -1 "A")
                                    (("1"
                                      (typepred "A")
                                      (("1"
                                        (expand "Union" 1)
                                        (("1"
                                          (inst 1 "A")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 1 "y") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (mem_flatten_map 0
  (mem_flatten_map-1 nil 3824238534
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "f_lst" "y1")
            (("2" (assert)
              (("2" (expand "map" -2)
                (("2" (expand "flatten" -2)
                  (("2" (rewrite "member_append")
                    (("2" (prop)
                      (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                       ("2" (skeep) (("2" (grind) nil nil)) nil)
                       ("3" (inst 2 "hd") (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append formula-decl nil list_theory nil)
    (flatten def-decl "list[T]" list_theory nil))
   shostak))
 (mem_flatten_map2 0
  (mem_flatten_map2-1 nil 3825074485
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "f_lst3" "x")
            (("2" (expand "map" 1)
              (("2" (expand "flatten" 1 1)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (rewrite "member_append")
                      (("1" (split -1)
                        (("1" (inst 1 "hd") (("1" (grind) nil nil))
                          nil)
                         ("2" (assert)
                          (("2" (skeep)
                            (("2" (inst 1 "y") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (rewrite "member_append" 1)
                      (("2" (prop)
                        (("2" (skeep)
                          (("2" (inst 1 "y") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append formula-decl nil list_theory nil)
    (flatten def-decl "list[T]" list_theory nil))
   shostak))
 (func_flatten_map 0
  (func_flatten_map-1 nil 3825003188
   ("" (induct "lst_of_lsts")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (inst -1 "null") (("1" (grind) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1 1)
            (("2" (skeep)
              (("2" (inst -2 "append(hd, flatten(tail))")
                (("2" (replace -2 1)
                  (("2" (expand "map" 1 2)
                    (("2" (expand "flatten" 1 2)
                      (("2" (rewrite "map_append2")
                        (("2" (case "map(f)(hd) = f_lst2(hd)")
                          (("1" (replace -1 1)
                            (("1"
                              (case "map(f)(flatten(tail)) = flatten(map(f_lst2)(tail))")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (inst -1 "f_lst2")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (reveal -3)
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (replace -1 1 :dir rl)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 2 "f")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (reveal -4)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (reveal -1)
                            (("2" (inst -1 "hd")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((flatten def-decl "list[T]" list_theory nil)) shostak))
 (func_flatten_map2 0
  (func_flatten_map2-1 nil 3825089208
   ("" (induct "lst_of_lsts")
    (("1" (skeep)
      (("1" (expand "map" 1)
        (("1" (expand "flatten" 1) (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1 1)
            (("2" (expand "map" 1)
              (("2" (expand "flatten" 1 2)
                (("2" (inst -3 "hd" "flatten(tail)")
                  (("2" (replace -3 1)
                    (("2" (inst -1 "f_lst2")
                      (("2" (assert)
                        (("2" (reveal -2) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((flatten def-decl "list[T]" list_theory nil)) shostak)))
(more_list_theory_props
 (get_repeat_lst_map_count 0
  (get_repeat_lst_map_count-1 nil 3809245337
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((get_repeat_lst def-decl "list[T]" list_theory nil)
    (count const-decl "nat" list_theory nil)
    (equiv type-eq-decl nil list_theory nil))
   SHOSTAK))
 (map_split 0
  (map_split-1 nil 3809104597
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split" 1)
            (("2" (expand "map" 1 1)
              (("2" (expand "get_lst_until_n" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "get_lst_until_n" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (expand "map" 2 2)
                            (("2" (inst? -1)
                              (("2"
                                (inst -1 "n-1")
                                (("2"
                                  (expand "split" -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (split const-decl "[list[T], list[T]]" list_theory nil))
   SHOSTAK))
 (map_split2 0
  (map_split2-1 nil 3809278221
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split" 1)
            (("2" (expand "map" 1 1)
              (("2" (expand "get_lst_after_n" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "get_lst_after_n" 1)
                      (("1" (assert)
                        (("1" (expand "map" 1 2)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "get_lst_after_n" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (inst? -1)
                            (("2" (inst -1 "n-1")
                              (("2"
                                (expand "split" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (split const-decl "[list[T], list[T]]" list_theory nil))
   SHOSTAK))
 (split_no_null_entries?1 0
  (split_no_null_entries?1-1 nil 3809285089
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split" 1)
            (("2" (expand "get_lst_until_n" 1)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "no_null_entries?" -2)
                  (("2" (prop)
                    (("2" (expand "no_null_entries?" 3)
                      (("2" (prop)
                        (("2" (expand "split" -2)
                          (("2" (inst? -2)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (no_null_entries? def-decl "bool" list_theory nil))
   SHOSTAK))
 (split_no_null_entries?2 0
  (split_no_null_entries?2-1 nil 3809285044
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split" 1)
            (("2" (expand "get_lst_after_n")
              (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (no_null_entries? def-decl "bool" list_theory nil))
   SHOSTAK)))

