(termination_alg
 (vars_under2more_TCC1 0
  (vars_under2more_TCC1-1 nil 3819316174 ("" (tcc))
   ((injective? const-decl "bool" functions nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (vars_under2more subtype
    "{X | EXISTS t, s:      term_properties.dif_func?(termination_alg.t, termination_alg.s) AND term_properties.im_under?(termination_alg.X, termination_alg.t) AND term_properties.im_under?(termination_alg.X, termination_alg.s) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.t, unification.subterms(termination_alg.unif_prb)) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, unification.subterms(termination_alg.unif_prb))}"
    "finite_set[variable]")))
 (vars_under2more_TCC2 0
  (vars_under2more_TCC2-1 nil 3824482821 ("" (subtype-tcc) nil nil) nil
   nil
   (vars_under2more subtype
    "{X | EXISTS t, s:      term_properties.dif_func?(termination_alg.t, termination_alg.s) AND term_properties.im_under?(termination_alg.X, termination_alg.t) AND term_properties.im_under?(termination_alg.X, termination_alg.s) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.t, unification.subterms(termination_alg.lst_unif_prb)) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, unification.subterms(termination_alg.lst_unif_prb))}"
    "finite_set[variable]")))
 (vars_not_ac_TCC1 0
  (vars_not_ac_TCC1-1 nil 3825583706 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.t1)" "nil")))
 (vars_not_ac_TCC2 0
  (vars_not_ac_TCC2-1 nil 3825583706 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.t2)" "nil")))
 (vars_not_ac_TCC3 0
  (vars_not_ac_TCC4-1 nil 3825583706 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.arg)" "nil")))
 (vars_not_ac_TCC4 0
  (vars_not_ac_TCC5-1 nil 3825583706 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination-subtype
    "term_properties.not_var_args(termination_alg.sym)(termination_alg.t)"
    "[{z: term_adt[constant, variable, f_symbol, ac_symbol].term | reals.<(term_properties.size(z), term_properties.size(termination_alg.t))} -> finite_set[variable]]")))
 (vars_not_ac_TCC5 0
  (vars_not_ac_TCC2-1 nil 3825262936 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.fin_set_t"
    "(sets[term[constant, variable, f_symbol, ac_symbol]].nonempty?)")))
 (vars_not_ac_TCC6 0
  (vars_not_ac_TCC7-1 nil 3825594969 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(sets[term[constant, variable, f_symbol, ac_symbol]].rest(termination_alg.fin_set_t))"
    "nil")))
 (vars_not_ac_TCC7 0
  (vars_not_ac_TCC4-1 nil 3825262936 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.args"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (vars_not_ac_TCC8 0
  (vars_not_ac_TCC9-1 nil 3825594969 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(termination_alg.args))"
    "nil")))
 (vars_not_ac_TCC9 0
  (vars_not_ac_TCC10-1 nil 3825594969 ("" (subtype-tcc) nil nil) nil
   nil
   (vars_not_ac subtype "termination_alg.args"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (vars_not_ac_TCC10 0
  (vars_not_ac_TCC5-1 nil 3824129283 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (vars_not_ac_TCC11 0
  (vars_not_ac_TCC12-1 nil 3825597481 ("" (termination-tcc) nil nil)
   nil nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(list_adt[unif_pair].cdr(termination_alg.unif_prb))"
    "nil")))
 (vars_not_ac_TCC12 0
  (vars_not_ac_TCC7-1 nil 3824129283 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (vars_not_ac_TCC13 0
  (vars_not_ac_TCC1-1 nil 3819454827 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars_not_ac subtype "termination_alg.lst_unif_prb"
    "(list_adt[unification.unif_prb].cons?)")))
 (vars_not_ac_TCC14 0
  (vars_not_ac_TCC14-1 nil 3825603375 ("" (termination-tcc) nil nil)
   nil nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(list_adt[unification.unif_prb].cdr(termination_alg.lst_unif_prb))"
    "nil")))
 (vars_not_ac_TCC15 0
  (vars_not_ac_TCC8-1 nil 3824407778 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.lst_unif_prb"
    "(list_adt[unification.unif_prb].cons?)")))
 (vars_not_ac_var_TCC1 0
  (vars_not_ac_var_TCC1-1 nil 3825174514 ("" (subtype-tcc) nil nil) nil
   nil
   (vars_not_ac_var subtype
    "{X | booleans.AND(sets[variable].member(termination_alg.X, termination_alg.vars_not_ac(termination_alg.t)), (booleans.NOT)(term_adt[constant, variable, f_symbol, ac_symbol].var?(termination_alg.t)))}"
    "finite_set[variable]")))
 (admissible_subterms_TCC1 0
  (admissible_subterms_TCC1-1 nil 3819316174
   ("" (skeep)
    (("" (lemma "finite_subset[term]")
      (("" (inst -1 "prop_subterms(t)" "_")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "subset?" 1)
                (("" (skeep) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak
   (admissible_subterms subtype
    "{s | booleans.AND(sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, term_properties.prop_subterms(termination_alg.t)), (booleans.NOT)(term_adt[constant, variable, f_symbol, ac_symbol].var?(termination_alg.s)))}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (admissible_subterms_TCC2 0
  (admissible_subterms_TCC2-1 nil 3825433197 ("" (subtype-tcc) nil nil)
   nil nil
   (admissible_subterms subtype
    "{s | EXISTS t: booleans.AND(sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.t, unification.subterms(termination_alg.unif_pair)), sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, termination_alg.admissible_subterms(termination_alg.t)))}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (admissible_subterms_TCC3 0
  (admissible_subterms_TCC3-1 nil 3825433197 ("" (subtype-tcc) nil nil)
   nil nil
   (admissible_subterms subtype
    "{s | EXISTS t: booleans.AND(sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.t, unification.subterms(termination_alg.unif_prb)), sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, termination_alg.admissible_subterms(termination_alg.t)))}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (vars_not_ac_vars_t 0
  (vars_not_ac_vars_t-1 nil 3823286315
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "member" -2)
                  (("4" (expand "union" -2)
                    (("4" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (prop)
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "vars" 4)
                                (("1"
                                  (expand "member" 4)
                                  (("1"
                                    (expand "union" 4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (prop)
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "vars" 4)
                                (("1"
                                  (expand "member" 4)
                                  (("1"
                                    (expand "union" 4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst -3 "arg(t)")
                  (("5" (prop)
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (expand "vars" 5)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 2 3 4 5)
                    (("1" (lemma "mem_union_map[term, variable]")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (skolem -1 "ti")
                            (("1" (flatten)
                              (("1"
                                (hide -4)
                                (("1"
                                  (expand "vars" 1)
                                  (("1"
                                    (lemma
                                     "mem_union_map[term, variable]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (inst 1 "ti")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "not_var_args_get_args")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -4 "ti")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst -1 "X")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "not_var_args_get_args")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "get_args_size")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 7) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (not_var_args const-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (not_var_args_get_args formula-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (vars_not_ac_vars_fin_set_t 0
  (vars_not_ac_vars_fin_set_t-1 nil 3827435943
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide-all-but -2) (("1" (grind) nil nil)) nil)
                 ("2" (expand "member" -1)
                  (("2" (expand "union" -1)
                    (("2" (prop)
                      (("1" (expand "vars" 2)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "union" 2)
                              (("1"
                                (expand "member" 2 1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "vars_not_ac_vars_t")
                                    (("1"
                                      (inst? -1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "vars" 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (expand "union" 2)
                              (("2"
                                (expand "member" 2 1)
                                (("2"
                                  (prop)
                                  (("2"
                                    (lemma "vars_not_ac_vars_t")
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (inst -2 "rest(fin_set_t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (lemma "card_rest[term]")
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (prop)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (vars_not_ac_vars_t formula-decl nil termination_alg nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_rest formula-decl nil finite_sets nil)
    (rest const-decl "set" sets nil) (union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_not_ac_vars_unif_pair 0
  (vars_not_ac_vars_unif_pair-1 nil 3823286219
   ("" (skeep)
    (("" (expand "vars" 1)
      (("" (expand "vars_not_ac" -1)
        (("" (expand "member")
          (("" (expand "union")
            (("" (prop)
              (("1" (lemma "vars_not_ac_vars_t")
                (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
               ("2" (lemma "vars_not_ac_vars_t")
                (("2" (inst -1 "X" "unif_pair`2")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (vars_not_ac_vars_t formula-decl nil termination_alg nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (vars const-decl "finite_set[variable]" unification nil))
   shostak))
 (vars_not_ac_vars 0
  (vars_not_ac_vars-1 nil 3823285901
   ("" (induct "unif_prb" 1)
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "vars_not_ac" -2)
            (("2" (expand "member" -2)
              (("2" (expand "union" -2)
                (("2" (prop)
                  (("1" (expand "vars" 1)
                    (("1" (expand "member" 1)
                      (("1" (expand "union" 1)
                        (("1" (prop)
                          (("1" (lemma "vars_not_ac_vars_unif_pair")
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "vars" 1)
                    (("2" (expand "member" 1)
                      (("2" (expand "union" 1)
                        (("2" (prop)
                          (("2" (inst? -2) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (vars_not_ac_vars_unif_pair formula-decl nil termination_alg nil))
   shostak))
 (vars_not_ac_unif_prb_mem 0
  (vars_not_ac_unif_prb_mem-1 nil 3824130542
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "X")
            (("2" (expand "vars_not_ac" 1 1)
              (("2" (expand "member" 1 1)
                (("2" (expand "union" 1 1)
                  (("2" (prop)
                    (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (inst 1 "unif_pair")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (inst 1 "hd") (("3" (grind) nil nil)) nil)
                     ("4" (skeep)
                      (("4" (inst 3 "unif_pair")
                        (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_unif_prb_mem2 0
  (vars_not_ac_unif_prb_mem2-1 nil 3827700390
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars_not_ac" -1)
              (("1" (expand "union" -1)
                (("1" (expand "member" -1 1)
                  (("1" (prop)
                    (("1" (expand "vars_not_ac" -1)
                      (("1" (expand "union" -1)
                        (("1" (expand "member" -1 1)
                          (("1" (prop)
                            (("1" (inst 1 "hd`1")
                              (("1" (grind) nil nil)) nil)
                             ("2" (inst 1 "hd`2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst? -2)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "t") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst? -3)
                (("2" (flatten)
                  (("2" (hide -3)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst 1 "t") (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_unif_prb_append 0
  (vars_not_ac_unif_prb_append-1 nil 3829077973
   ("" (measure-induct "length(unif_prb1)" "unif_prb1")
    (("" (skolem 1 "unif_prb1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "append " 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "vars_not_ac" 2 1)
                  (("2" (expand "vars_not_ac" 2 3)
                    (("2" (assert)
                      (("2" (inst -1 "cdr(unif_prb1)")
                        (("2" (prop)
                          (("1" (inst? -1)
                            (("1" (inst -1 "X") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (append def-decl "list[T]" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_not_ac_lst_unif_prb_mem 0
  (vars_not_ac_lst_unif_prb_mem-1 nil 3825154719
   ("" (induct "lst_unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "member" -2)
            (("2" (prop)
              (("1" (expand "subset?" 1)
                (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
               ("2" (inst -2 "unif_prb")
                (("2" (assert)
                  (("2" (expand "subset?" 1)
                    (("2" (skeep)
                      (("2" (expand "subset?" -2)
                        (("2" (inst -2 "x")
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   shostak))
 (vars_not_ac_singleton 0
  (vars_not_ac_singleton-1 nil 3824130760
   ("" (skeep)
    (("" (expand "vars_not_ac" 1 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide 1) (("1" (grind) nil nil)) nil)
           ("2" (lemma "rest_singleton[term]")
            (("2" (inst? -1)
              (("2" (replace -1 2)
                (("2" (expand "vars_not_ac" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (lemma "union_empty[variable]")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (replace -1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "choose_singleton[term]")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest_singleton formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (singleton? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   shostak))
 (vars_not_ac_mem_finset 0
  (vars_not_ac_mem_finset-1 nil 3824224755
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "choose_rest_or[term]")
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (prop)
                        (("1" (inst -2 "rest(fin_set_t)")
                          (("1" (prop)
                            (("1" (inst -1 "X" "t")
                              (("1" (grind) nil nil)) nil)
                             ("2" (lemma "card_rest[term]")
                              (("2"
                                (inst? -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_rest formula-decl nil finite_sets nil)
    (rest const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (choose_rest_or formula-decl nil sets_lemmas nil))
   shostak))
 (vars_not_ac_not_var_args 0
  (vars_not_ac_not_var_args-1 nil 3824385387
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "vars_not_ac" 1 2)
              (("" (lift-if)
                (("" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil)
                   ("4" (expand "not_var_args" -2)
                    (("4" (lemma "term_pair_eta")
                      (("4" (inst? -1)
                        (("4" (replace -1 -3 :dir rl)
                          (("4" (rewrite "get_args_pair")
                            (("4" (rewrite "not_var_args_append")
                              (("4"
                                (rewrite "member_append")
                                (("4"
                                  (prop)
                                  (("1"
                                    (reveal -2)
                                    (("1"
                                      (inst -1 "term1(t)")
                                      (("1"
                                        (expand "size" -1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -1 "s" "sym")
                                              (("1"
                                                (expand
                                                 "not_var_args"
                                                 -1)
                                                (("1"
                                                  (hide -2 -3 2 3 4)
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -1 "x")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -2)
                                    (("2"
                                      (inst -1 "term2(t)")
                                      (("2"
                                        (expand "size" -1 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (inst -1 "sym")
                                                (("2"
                                                  (expand
                                                   "not_var_args"
                                                   -1)
                                                  (("2"
                                                    (hide -2 2 3 4)
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst -1 "x")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2 3 4 5)
                    (("5" (expand "not_var_args" -2)
                      (("5" (lemma "get_args_not_pair_ac")
                        (("5" (inst? -1)
                          (("5" (assert)
                            (("5" (expand "is_ac_sym?" -1)
                              (("5"
                                (replace -1)
                                (("5"
                                  (expand "not_var_args" -3)
                                  (("5"
                                    (expand "not_var_args" -3)
                                    (("5"
                                      (expand "member" -3)
                                      (("5"
                                        (assert)
                                        (("5"
                                          (prop)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (expand
                                               "vars_not_ac"
                                               1
                                               1)
                                              (("1"
                                                (lemma
                                                 "subset_reflexive[variable]")
                                                (("1"
                                                  (inst? -1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_app?(t)")
                    (("1" (expand "subset?" 2)
                      (("1" (skeep)
                        (("1" (hide 1 3 4 5 6)
                          (("1" (case "sym = ac_sym(t)")
                            (("1"
                              (lemma "mem_union_map[term, variable]")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (inst 1 "s")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "not_var_args" -3)
                              (("2"
                                (lemma "get_args_not_pair_ac")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "is_ac_sym?" -1)
                                      (("2"
                                        (replace -1 -4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (args type-eq-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list2set def-decl "set[T]" list2set nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (Union const-decl "set" sets nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (subset_reflexive formula-decl nil sets_lemmas nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (get_args_pair formula-decl nil term_properties nil)
    (member_append formula-decl nil list_theory nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (not_var_args_append formula-decl nil term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (num_arg def-decl "nat" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (not_var_args def-decl "args" term_properties nil))
   shostak))
 (vars_not_ac_apply_sub_t 0
  (vars_not_ac_apply_sub_t-1 nil 3824132734
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" 1 3)
            (("" (lift-if)
              (("" (prop)
                (("1" (lemma "term_const_eta")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 :dir rl)
                      (("1" (hide -1)
                        (("1" (rewrite "subs_const")
                          (("1" (expand "vars_not_ac" 1 1)
                            (("1" (lemma "subset_emptyset[variable]")
                              (("1" (inst? -1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "subs(sigma)(V(t)) = t")
                  (("1" (expand "subs" -1)
                    (("1" (lemma "term_variable_eta")
                      (("1" (inst? -1)
                        (("1" (replace -1)
                          (("1" (hide -1)
                            (("1" (replace -1 1)
                              (("1"
                                (expand "vars_not_ac" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(subs(sigma)(t), img(sigma))")
                    (("1" (expand "subset?" 2)
                      (("1" (skeep)
                        (("1" (expand "member" 2)
                          (("1" (expand "union" 2)
                            (("1" (prop)
                              (("1"
                                (hide 4)
                                (("1"
                                  (lemma "vars_not_ac_mem_finset")
                                  (("1"
                                    (inst
                                     -1
                                     "x"
                                     "img(sigma)"
                                     "subs(sigma)(t)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 3 4)
                      (("2" (expand "member" 1)
                        (("2" (expand "img" 1)
                          (("2" (inst 1 "V(t)")
                            (("2" (prop)
                              (("1"
                                (expand "member" 1)
                                (("1"
                                  (expand "dom" 1)
                                  (("1"
                                    (lemma "term_variable_eta")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "subs" 1 1)
                                (("2"
                                  (lemma "term_variable_eta")
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "subs_unit")
                  (("3" (inst? -1)
                    (("3" (lemma "term_unit_extensionality")
                      (("3" (inst -1 "unit" "t")
                        (("3" (replace -1 1 :dir rl)
                          (("3" (replace -2 1)
                            (("3" (hide -1 -2)
                              (("3"
                                (expand "vars_not_ac" 1 1)
                                (("3"
                                  (lemma "subset_emptyset[variable]")
                                  (("3" (inst? -1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (lemma "term_pair_eta")
                  (("4" (inst -1 "t")
                    (("4" (lemma "subs_pair")
                      (("4" (replace -2 1 :dir rl)
                        (("4" (rewrite "subs_pair")
                          (("4" (assert)
                            (("4" (hide 2 3 4)
                              (("4"
                                (expand "subset?" 1)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (hide -1)
                                    (("4"
                                      (expand "vars_not_ac" -3)
                                      (("4"
                                        (expand "member" -3)
                                        (("4"
                                          (expand "union" -3)
                                          (("4"
                                            (prop)
                                            (("1"
                                              (inst -4 "term1(t)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 "sigma")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -4 "term2(t)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst -1 "sigma")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma "term_app_eta")
                  (("5" (inst? -1)
                    (("5" (replace -1 1 :dir rl)
                      (("5" (rewrite "subs_app")
                        (("5" (hide 2 3 4 5)
                          (("5" (expand "vars_not_ac" 1 1)
                            (("5" (inst -3 "arg(t)")
                              (("5"
                                (prop)
                                (("1" (inst -1 "sigma") nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 3 4 5 6)
                    (("1" (lemma "mem_union_map[term, variable]")
                      (("1" (expand "subset?" 1)
                        (("1" (skeep)
                          (("1" (expand "member" 1)
                            (("1" (expand "union" 1)
                              (("1"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 3)
                                      (("1"
                                        (lemma "term_ac_app_eta")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (replace -1 -3 :dir rl)
                                            (("1"
                                              (rewrite "subs_ac")
                                              (("1"
                                                (expand
                                                 "vars_not_ac"
                                                 -3)
                                                (("1"
                                                  (lemma
                                                   "mem_union_map[term, variable]")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -4)
                                                        (("1"
                                                          (skolem
                                                           -1
                                                           "ti")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "not_var_args_get_args2")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (rewrite
                                                                         "subs_ac"
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           "args_subs_ac")
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "mem_flatten_map[term, variable]")
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         "tj_sub")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -3)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -6)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "map_member4[term, term]")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (skolem
                                                                                                       -1
                                                                                                       "tj")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "tj")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "sigma")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subset?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "x")
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "union"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               2
                                                                                                                               "tj")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "not_var_args_get_args2")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "ac_sym(t)"
                                                                                                                                     "tj"
                                                                                                                                     "t")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "subs(sigma)(tj) = tj")
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -5
                                                                                                                                             -6)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "get_args_not_pair_ac")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "ac_sym(t)"
                                                                                                                                                 "tj")
                                                                                                                                                (("1"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (lemma
                                                                                                                                           "vars_not_ac_mem_finset")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "x"
                                                                                                                                             "img(sigma)"
                                                                                                                                             "tj_sub")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "member"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "img"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "V(tj)")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "subs"
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "term_variable_eta")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "tj")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "member"
                                                                                                                                                                   1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "dom"
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "subs"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "vars_not_ac_not_var_args")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "ti"
                                                                                                                                                     "ac_sym(t)"
                                                                                                                                                     "tj_sub")
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "not_var_args_get_args2")
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "not_var_args"
                                                                                                                                                         -2)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "ac_sym(t)"
                                                                                                                                                           "ti"
                                                                                                                                                           "tj_sub")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "not_var_args"
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "subset?"
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -2
                                                                                                                                                                     "x")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "vars_not_ac_not_var_args")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "ti"
                                                                                                                               "ac_sym(t)"
                                                                                                                               "tj_sub")
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "not_var_args_get_args2")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "ac_sym(t)"
                                                                                                                                   "ti"
                                                                                                                                   "tj_sub")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "subset?"
                                                                                                                                       -2)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -2
                                                                                                                                         "x")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "get_args_size")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "ac_sym(t)"
                                                                                                                     "tj"
                                                                                                                     "t")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "is_ac_sym?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3 -1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (emptyset const-decl "set" sets nil)
    (subset_emptyset formula-decl nil sets_lemmas nil)
    (subs_const formula-decl nil substitution nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (term_const_eta formula-decl nil term_adt nil)
    (vars_not_ac_mem_finset formula-decl nil termination_alg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (term_unit_extensionality formula-decl nil term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair type-eq-decl nil term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (term_app_eta formula-decl nil term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, pair] -> (ac_app?)]"
     term_adt nil)
    (get_args const-decl "args" term_properties nil)
    (map_member4 formula-decl nil map_theory nil)
    (num_arg def-decl "nat" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (member def-decl "bool" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (vars_not_ac_not_var_args formula-decl nil termination_alg nil)
    (get_args_size formula-decl nil term_properties nil)
    (mem_flatten_map formula-decl nil map_theory nil)
    (args_subs_ac formula-decl nil substitution nil)
    (not_var_args_get_args2 formula-decl nil term_properties nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (vars_not_ac_apply_sub_args 0
  (vars_not_ac_apply_sub_args-1 nil 3825603438
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subs" 1)
            (("2" (expand "subset?" 1)
              (("2" (skeep)
                (("2" (expand "vars_not_ac" -2)
                  (("2" (expand "union" -2)
                    (("2" (expand "member" -2 1)
                      (("2" (prop)
                        (("1" (hide -2)
                          (("1" (lemma "vars_not_ac_apply_sub_t")
                            (("1" (inst -1 "sigma" "hd")
                              (("1"
                                (expand "subset?" -1)
                                (("1"
                                  (inst -1 "x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand "union" -1)
                                        (("1"
                                          (expand "member" -1 1)
                                          (("1"
                                            (expand "union" 1)
                                            (("1"
                                              (expand "member" 1 1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "sigma")
                          (("2" (expand "subset?" -2)
                            (("2" (inst -2 "x")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "union" -2)
                                  (("2"
                                    (expand "member" -2 1)
                                    (("2"
                                      (expand "union" 1)
                                      (("2"
                                        (expand "member" 1 1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (vars_not_ac_apply_sub_t formula-decl nil termination_alg nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (union const-decl "set" sets nil)
    (subs def-decl "args" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_apply_sub_unif_pair 0
  (vars_not_ac_apply_sub_unif_pair-1 nil 3824132490
   ("" (skeep)
    (("" (expand "apply_sub" 1)
      (("" (expand "subset?" 1)
        (("" (skolem 1 "X")
          (("" (prop)
            (("" (lemma "vars_not_ac_apply_sub_t")
              (("" (expand "vars_not_ac" -2)
                (("" (expand "member" -2)
                  (("" (expand "union" -2)
                    (("" (prop)
                      (("1" (inst -2 "sigma" "unif_pair`1")
                        (("1" (expand "subset?" -2)
                          (("1" (inst -2 "X")
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -2 "sigma" "unif_pair`2")
                        (("2" (expand "subset?" -2)
                          (("2" (inst -2 "X")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (union const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (empty? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (vars_not_ac_apply_sub_t formula-decl nil termination_alg nil)
    (apply_sub const-decl "unif_pair" unification nil))
   shostak))
 (vars_not_ac_apply_sub 0
  (vars_not_ac_apply_sub-1 nil 3824131326
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "vars_not_ac" 1 1)
              (("2" (expand "subset?" 1)
                (("2" (skolem 1 "X")
                  (("2" (prop)
                    (("2" (expand "member" -2)
                      (("2" (expand "union" -2)
                        (("2" (prop)
                          (("1"
                            (lemma "vars_not_ac_apply_sub_unif_pair")
                            (("1" (inst? -1)
                              (("1"
                                (expand "subset?" -1)
                                (("1"
                                  (inst -1 "X")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "sigma")
                            (("2" (expand "subset?" -2)
                              (("2"
                                (inst -2 "X")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (vars_not_ac_apply_sub_unif_pair formula-decl nil termination_alg
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg
     nil))
   shostak))
 (vars_not_ac_var_finset 0
  (vars_not_ac_var_finset-1 nil 3827845019
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (prop)
            (("1" (expand "vars_not_ac_var" -1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "union" -1)
                    (("2" (expand "member" -1 1)
                      (("2" (prop)
                        (("1" (inst 2 "choose(fin_set_t)")
                          (("1" (grind) nil nil)) nil)
                         ("2" (inst -2 "rest(fin_set_t)")
                          (("2" (prop)
                            (("1" (inst -1 "X")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "t")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "card_rest[term]")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "vars_not_ac_var" 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "union" 2)
                      (("2" (expand "member" 2 1)
                        (("2" (prop)
                          (("2" (lemma "choose_rest_or[term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -4 "rest(fin_set_t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst 1 "t")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "card_rest[term]")
                                      (("2"
                                        (inst? -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (union const-decl "set" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_not_ac_var_args 0
  (vars_not_ac_var_args-1 nil 3829162460
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args")
      (("" (prop)
        (("" (skeep)
          (("" (prop)
            (("1" (expand "vars_not_ac_var" -1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "union" -1)
                    (("2" (expand "member" -1 1)
                      (("2" (prop)
                        (("1" (inst 2 "car(args)")
                          (("1" (grind) nil nil)) nil)
                         ("2" (inst -2 "cdr(args)")
                          (("2" (prop)
                            (("1" (inst? -1)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "t")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "cdr(args)")
                      (("2" (prop)
                        (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (union const-decl "set" sets nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_not_ac_var_unif_prb 0
  (vars_not_ac_var_unif_prb-1 nil 3827873100
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars_not_ac_var" -1)
              (("1" (expand "union" -1)
                (("1" (expand "member" -1 1)
                  (("1" (prop)
                    (("1" (expand "vars_not_ac_var" -1)
                      (("1" (expand "union" -1)
                        (("1" (expand "member" -1 1)
                          (("1" (prop)
                            (("1" (inst 1 "hd`1")
                              (("1" (grind) nil nil)) nil)
                             ("2" (inst 1 "hd`2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst? -2)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "t") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (inst -3 "X")
                    (("3" (flatten)
                      (("3" (hide -3)
                        (("3" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst 1 "t") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_var_unif_prb2 0
  (vars_not_ac_var_unif_prb2-1 nil 3829163172
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb")
      (("" (prop)
        (("" (skeep)
          (("" (assert)
            (("" (prop)
              (("1" (expand "vars_not_ac_var" -1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "member" -1)
                      (("2" (expand "union" -1)
                        (("2" (prop)
                          (("1" (inst 2 "car(unif_prb)")
                            (("1" (grind) nil nil)) nil)
                           ("2" (inst -2 "cdr(unif_prb)")
                            (("2" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 2 "unif_pair")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "member" -2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst -3 "cdr(unif_prb)")
                        (("2" (prop)
                          (("1" (inst -1 "X")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (inst 1 "unif_pair")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_not_ac_var_lst_unif_prb 0
  (vars_not_ac_var_lst_unif_prb-1 nil 3827872806
   ("" (induct "lst_unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars_not_ac_var" -1)
              (("1" (expand "union" -1)
                (("1" (expand "member" -1 1)
                  (("1" (prop)
                    (("1" (lemma "vars_not_ac_var_unif_prb")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (inst 1 "t") (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "t") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (lemma "vars_not_ac_var_unif_prb")
                    (("1" (inst -1 "X" "hd")
                      (("1" (flatten)
                        (("1" (hide -1)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "t") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -3 "X")
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst 1 "t") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (vars_not_ac_var_unif_prb formula-decl nil termination_alg nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   shostak))
 (vars_not_ac_var_lst_unif_prb2 0
  (vars_not_ac_var_lst_unif_prb2-1 nil 3829080202
   ("" (induct "lst_unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "X")
            (("2" (prop)
              (("1" (expand "vars_not_ac_var" -1)
                (("1" (expand "member" -1)
                  (("1" (expand "union" -1)
                    (("1" (prop)
                      (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                       ("2" (skeep)
                        (("2" (inst 1 "unif_prb")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil)
               ("4" (skeep)
                (("4" (inst 2 "unif_prb") (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (vars_not_ac_var_subset_var 0
  (vars_not_ac_var_subset_var-1 nil 3827701022
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (expand "subset?" 1)
          (("" (skeep)
            (("" (expand "vars_not_ac_var" -2)
              (("" (lift-if)
                (("" (prop)
                  (("1" (hide-all-but -2) (("1" (grind) nil nil)) nil)
                   ("2" (expand "member" -1)
                    (("2" (expand "union" -1)
                      (("2" (prop)
                        (("1" (expand "vars" 2)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "union" 2)
                                (("1"
                                  (expand "member" 2 1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "vars_not_ac_var" -1)
                                      (("1"
                                        (expand "member" -1 1)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (lemma
                                             "vars_not_ac_vars_t")
                                            (("1"
                                              (inst? -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "rest(fin_set_t)")
                          (("2" (prop)
                            (("1" (expand "subset?" -1)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "vars" 2)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "member" 2)
                                          (("1"
                                            (expand "union" 2)
                                            (("1" (prop) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "card_rest[term]")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil) (rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (vars_not_ac_vars_t formula-decl nil termination_alg nil)
    (subset? const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_not_ac_var_subterms 0
  (vars_not_ac_var_subterms-1 nil 3827843562
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst? -1)
              (("" (prop)
                (("1" (hide -2) (("1" (grind) nil nil)) nil)
                 ("2" (hide -2) (("2" (grind) nil nil)) nil)
                 ("3" (hide -2) (("3" (grind) nil nil)) nil)
                 ("4" (expand "subterms" -4)
                  (("4" (assert)
                    (("4" (expand "union" -4)
                      (("4" (expand "member" -4 1)
                        (("4" (prop)
                          (("1" (inst -3 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "vars_not_ac_var" 1)
                                    (("1"
                                      (expand "member" 1 1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "subterms" -4)
                  (("5" (assert)
                    (("5" (expand "union" -4)
                      (("5" (expand "member" -4 1)
                        (("5" (prop)
                          (("1" (hide -3) (("1" (grind) nil nil)) nil)
                           ("2" (inst -3 "arg(t)")
                            (("2" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "vars_not_ac_var" 1)
                                    (("1"
                                      (expand "member" 1 1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (expand "subterms" -4)
                  (("6" (assert)
                    (("6" (expand "member" -4)
                      (("6" (expand "union" -4)
                        (("6" (prop)
                          (("1" (hide -2 -3) (("1" (grind) nil nil))
                            nil)
                           ("2" (lemma "mem_union_map[term, term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (skolem -1 "ti")
                                    (("2"
                                      (prop)
                                      (("2"
                                        (inst -4 "ti")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "vars_not_ac_var"
                                                 1)
                                                (("1"
                                                  (expand "member" 1 1)
                                                  (("1"
                                                    (expand
                                                     "vars_not_ac"
                                                     1)
                                                    (("1"
                                                      (lemma
                                                       "mem_union_map[term, variable]")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "ti")
                                                              (("1"
                                                                (expand
                                                                 "vars_not_ac_var"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (lemma
                                                                       "not_var_args_get_args2")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "get_args_size")
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "is_ac_sym?")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (term_opt formula-decl nil term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (mem_union_map formula-decl nil map_theory nil)
    (get_args_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (not_var_args_get_args2 formula-decl nil term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (get_args const-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_var_subs 0
  (vars_not_ac_var_subs-1 nil 3827332030
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "term_opt")
              (("" (inst? -1)
                (("" (prop)
                  (("1" (replace -1 -2)
                    (("1" (hide -3 1 2 3)
                      (("1" (rewrite "subs_const")
                        (("1" (expand "vars_not_ac_var" -2)
                          (("1" (expand "member" -2 1)
                            (("1" (expand "vars_not_ac" -2)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(V(t), dom(sigma))")
                    (("1" (lemma "vars_not_ac_var_finset")
                      (("1" (inst -1 "Y" "img(sigma)")
                        (("1" (assert)
                          (("1" (hide 2 3 4)
                            (("1" (inst 1 "subs(sigma)(t)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "member" 1)
                                  (("1"
                                    (expand "img" 1)
                                    (("1"
                                      (inst 1 "V(t)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "subs" 1 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member" 1)
                      (("2" (expand "dom" 1)
                        (("2" (flatten)
                          (("2" (expand "subs" -1)
                            (("2" (replace -2 -1 :dir rl)
                              (("2"
                                (replace -1 -3)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -3 1 2 3)
                    (("3" (replace -1 -2)
                      (("3" (rewrite "subs_unit")
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (replace -1 -2)
                    (("4" (rewrite "subs_pair")
                      (("4" (expand "vars_not_ac_var" -2)
                        (("4" (expand "member" -2 1)
                          (("4" (expand "vars_not_ac" -2)
                            (("4" (expand "union" -2)
                              (("4"
                                (expand "member" -2 1)
                                (("4"
                                  (prop)
                                  (("1"
                                    (reveal -2)
                                    (("1"
                                      (inst -1 "term1(t)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst -1 "Y" "sigma")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skolem -1 "X")
                                                (("1"
                                                  (inst 1 "X")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "vars_not_ac_var"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "vars_not_ac"
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "union"
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "vars_not_ac_var"
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       -2
                                                                       1)
                                                                      (("1"
                                                                        (flatten)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "vars_not_ac_var"
                                                 3)
                                                (("2"
                                                  (expand "member" 3 1)
                                                  (("2"
                                                    (expand
                                                     "vars_not_ac"
                                                     3)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "union"
                                                         3)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "vars_not_ac_var"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               -1
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand
                                                 "vars_not_ac_var"
                                                 1)
                                                (("3"
                                                  (expand "member" 1 1)
                                                  (("3"
                                                    (expand
                                                     "vars_not_ac"
                                                     -2)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         "member"
                                                         -2)
                                                        (("3"
                                                          (expand
                                                           "singleton"
                                                           -2)
                                                          (("3"
                                                            (expand
                                                             "vars_not_ac_var"
                                                             3)
                                                            (("3"
                                                              (expand
                                                               "member"
                                                               3
                                                               1)
                                                              (("3"
                                                                (expand
                                                                 "vars_not_ac"
                                                                 3)
                                                                (("3"
                                                                  (expand
                                                                   "member"
                                                                   3)
                                                                  (("3"
                                                                    (expand
                                                                     "union"
                                                                     3)
                                                                    (("3"
                                                                      (prop)
                                                                      (("3"
                                                                        (lemma
                                                                         "subs_var")
                                                                        (("3"
                                                                          (inst?
                                                                           -1)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (case
                                                                               "member(V(term1(t)), dom(sigma))")
                                                                              (("1"
                                                                                (expand
                                                                                 "member"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "dom"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       2
                                                                                       "V(term1(t))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subs"
                                                                                             1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "term_variable_eta")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "term1(t)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "term_variable_eta")
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "subs"
                                                                                             1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "term_variable_eta")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "term1(t)")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     3
                                                                                                     4
                                                                                                     5)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -4
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "term_variable_eta")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "subs(sigma)(term1(t))")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             2
                                                                                             3
                                                                                             4
                                                                                             5)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "vars_not_ac_var"
                                                                                               1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "vars_not_ac"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "union"
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (prop)
                                                                                                        (("3"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("3"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "member"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "dom"
                                                                                   1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "subs"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "term_variable_eta")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "term1(t)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             -2)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   1
                                                                                                   2
                                                                                                   4)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -3 2 3 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -2)
                                    (("2"
                                      (inst -1 "term2(t)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "vars_not_ac_var"
                                               -1
                                               1)
                                              (("1"
                                                (expand "member" -1 1)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 2 "X")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 1 3 4)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 1 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "term_variable_eta")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "subs(sigma)(term2(t))")
                                                      (("3"
                                                        (lemma
                                                         "subs_var")
                                                        (("3"
                                                          (inst? -1)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (lemma
                                                               "term_variable_eta")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "term2(t)")
                                                                (("3"
                                                                  (expand
                                                                   "vars_not_ac"
                                                                   -5)
                                                                  (("3"
                                                                    (expand
                                                                     "member"
                                                                     -5)
                                                                    (("3"
                                                                      (expand
                                                                       "singleton"
                                                                       -5)
                                                                      (("3"
                                                                        (case
                                                                         "member(V(term2(t)), dom(sigma))")
                                                                        (("1"
                                                                          (expand
                                                                           "member"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "dom"
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 2
                                                                                 "V(term2(t))")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subs"
                                                                                     1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2
                                                                                       3
                                                                                       -8)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     3
                                                                                     4
                                                                                     -7)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     -7)
                                                                                    (("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "member"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "dom"
                                                                             1)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subs"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1
                                                                                           2)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (replace -1 -2)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "vars_not_ac_var" -2)
                        (("5" (expand "member" -2 1)
                          (("5" (expand "vars_not_ac" -2)
                            (("5" (reveal -2)
                              (("5"
                                (inst -1 "arg(t)")
                                (("5"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 2 "X")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -5 3 4)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1 2)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (expand "vars_not_ac_var" 1)
                                          (("3"
                                            (expand "member" 1 1)
                                            (("3"
                                              (lemma "subs_var")
                                              (("3"
                                                (inst? -1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (lemma
                                                     "term_variable_eta")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "subs(sigma)(arg(t))")
                                                      (("3"
                                                        (lemma
                                                         "term_variable_eta")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "arg(t)")
                                                          (("3"
                                                            (case
                                                             "member(V(arg(t)), dom(sigma))")
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "dom"
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "V(arg(t))")
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       -6)
                                                                      (("1"
                                                                        (expand
                                                                         "vars_not_ac"
                                                                         -6)
                                                                        (("1"
                                                                          (expand
                                                                           "singleton"
                                                                           -6)
                                                                          (("1"
                                                                            (hide
                                                                             3
                                                                             4)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "dom"
                                                                 1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (replace -1 -2)
                    (("6" (rewrite "subs_ac")
                      (("6" (expand "vars_not_ac_var" -2)
                        (("6" (expand "member" -2 1)
                          (("6" (expand "vars_not_ac" -2)
                            (("6"
                              (lemma "mem_union_map[term, variable]")
                              (("6"
                                (inst? -1)
                                (("6"
                                  (assert)
                                  (("6"
                                    (hide -3)
                                    (("6"
                                      (skolem -1 "ti_sigma")
                                      (("6"
                                        (prop)
                                        (("6"
                                          (lemma
                                           "not_var_args_get_args2")
                                          (("6"
                                            (inst? -1)
                                            (("6"
                                              (assert)
                                              (("6"
                                                (hide -2)
                                                (("6"
                                                  (prop)
                                                  (("6"
                                                    (rewrite
                                                     "get_args_ac")
                                                    (("6"
                                                      (lemma
                                                       "mem_get_args_subs")
                                                      (("6"
                                                        (inst? -1)
                                                        (("6"
                                                          (assert)
                                                          (("6"
                                                            (prop)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               "ti")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -3)
                                                                    (("1"
                                                                      (reveal
                                                                       -8)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "ti")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "vars_not_ac_var"
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "member"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         3
                                                                                         "X")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1
                                                                                             -4
                                                                                             -5
                                                                                             -7
                                                                                             1
                                                                                             2
                                                                                             4
                                                                                             5)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "vars_not_ac_var"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "vars_not_ac"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "mem_union_map[term, variable]")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "ti")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "vars_not_ac_var"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "member"
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "not_var_args_get_args2")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -3
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "get_args_ac")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -3
                                                                                       -4
                                                                                       -6
                                                                                       1
                                                                                       2
                                                                                       3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vars_not_ac_var")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member"
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member"
                                                                                               2
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "vars_not_ac"
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "mem_union_map[term, variable]")
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "ti")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "not_var_args_get_args2")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "get_args_ac")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "get_args_size")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "ac_sym(t)"
                                                                               "ti"
                                                                               "t")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   2
                                                                                   3
                                                                                   4
                                                                                   5
                                                                                   6)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "is_ac_sym?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -4
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "get_args_ac")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               4
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 "subterm_fin_set")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skolem
                                                                       -1
                                                                       "s")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lemma
                                                                           "vars_not_ac_var_subterms")
                                                                          (("2"
                                                                            (inst?
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "Y")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "vars_not_ac_var"
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member"
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "vars_not_ac_var_finset")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "s")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (idempotent? const-decl "bool" substitution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (ac_app adt-constructor-decl "[[ac_symbol, pair] -> (ac_app?)]"
     term_adt nil)
    (not_var_args const-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (get_args_ac formula-decl nil term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (subterm_fin_set formula-decl nil term_properties nil)
    (vars_not_ac_var_subterms formula-decl nil termination_alg nil)
    (mem_get_args_subs formula-decl nil substitution nil)
    (not_var_args_get_args2 formula-decl nil term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (subs_var formula-decl nil substitution nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (subs_pair formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (vars_not_ac_var_finset formula-decl nil termination_alg nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (term_opt formula-decl nil term_properties nil))
   shostak))
 (vars_not_ac_var_subs_unif_prb 0
  (vars_not_ac_var_subs_unif_prb-1 nil 3828036830
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (hide-all-but -1) (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (hide -1)
            (("2" (expand "apply_sub" -1)
              (("2" (expand "vars_not_ac_var" -1)
                (("2" (expand "union" -1)
                  (("2" (expand "member" -1 1)
                    (("2" (prop)
                      (("1" (expand "apply_sub" -1)
                        (("1" (expand "vars_not_ac_var" -1)
                          (("1" (expand "member" -1)
                            (("1" (expand "union" -1)
                              (("1"
                                (prop)
                                (("1"
                                  (lemma "vars_not_ac_var_subs")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 2 "X")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -3 4 1 3 4)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1 2 -3)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "vars_not_ac_var_subs")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 2 "X")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 3 4)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1 2 -3 -2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (reveal -1)
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 2 "X")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1 -3 -4 3 4)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -2 -3 1 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (vars_not_ac_var_subs formula-decl nil termination_alg nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (idempotent? const-decl "bool" substitution nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_var_img_append 0
  (vars_not_ac_var_img_append-1 nil 3828207030
   ("" (skeep)
    (("" (lemma "vars_not_ac_var_finset")
      (("" (inst? -1)
        (("" (assert)
          (("" (skeep)
            (("" (expand "img" -1)
              (("" (expand "member" -1 1)
                (("" (skeep)
                  (("" (expand "subs" -2)
                    (("" (rewrite "subs_append2")
                      (("" (case "member(X, dom(delta))")
                        (("1"
                          (name-replace "s" "subs(delta)(variable(X))")
                          (("1" (replace -3 -4 :dir rl)
                            (("1" (lemma "vars_not_ac_var_subs")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skolem -1 "W")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst 2 "W")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (lemma
                                               "vars_not_ac_var_finset")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "s")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "img"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "s")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "X")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 1)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (expand "member" 2)
                                      (("3"
                                        (expand "union" 2)
                                        (("3"
                                          (prop)
                                          (("3"
                                            (lemma
                                             "vars_not_ac_var_finset")
                                            (("3"
                                              (inst
                                               -1
                                               "Y"
                                               "img(delta)")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (inst 1 "s")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (hide 2 3 4)
                                                      (("3"
                                                        (expand
                                                         "img"
                                                         1)
                                                        (("3"
                                                          (expand "s")
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "dom_append")
                          (("2" (inst? -1)
                            (("2" (expand "subset?" -1)
                              (("2"
                                (inst -1 "X")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "union" -1)
                                    (("2"
                                      (expand "member" -1 1)
                                      (("2"
                                        (expand "member" 1)
                                        (("2"
                                          (expand "dom" 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "subs" -2)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (expand "union" 2)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (lemma
                                                         "vars_not_ac_var_finset")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "Y"
                                                           "img(sigma)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "t")
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "img"
                                                                     1)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "X")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_not_ac_var_finset formula-decl nil termination_alg nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs_append2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (dom_append formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vars_not_ac_var_subs formula-decl nil termination_alg nil)
    (union const-decl "set" sets nil)
    (idempotent? const-decl "bool" substitution nil)
    (empty? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (append def-decl "list[T]" list_props nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (vars_not_ac_var_apply_sub_t 0
  (vars_not_ac_var_apply_sub_t-1 nil 3825599977
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skeep)
        (("" (expand "member" -1)
          (("" (expand "vars_not_ac_var" -1)
            (("" (flatten)
              (("" (lemma "vars_not_ac_apply_sub_t")
                (("" (inst? -1)
                  (("" (expand "subset?" -1)
                    (("" (inst -1 "x")
                      (("" (assert)
                        (("" (expand "member" -1)
                          (("" (expand "union" -1)
                            (("" (expand "union" 2)
                              ((""
                                (expand "member" 2 1)
                                ((""
                                  (flatten)
                                  ((""
                                    (assert)
                                    ((""
                                      (expand "vars_not_ac_var" 3)
                                      ((""
                                        (expand "member" 3 1)
                                        ((""
                                          (lemma "term_variable_eta")
                                          ((""
                                            (inst? -1)
                                            ((""
                                              (case
                                               "member(V(t), dom(sigma))")
                                              (("1"
                                                (lemma
                                                 "vars_not_ac_mem_finset")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "x"
                                                   "img(sigma)"
                                                   "subs(sigma)(t)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "img" 1)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1
                                                         1)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "V(t)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "dom" 1)
                                                (("2"
                                                  (expand "member" 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "subs"
                                                         -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_not_ac_apply_sub_t formula-decl nil termination_alg nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (vars_not_ac_mem_finset formula-decl nil termination_alg nil)
    (subs const-decl "term" substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (set type-eq-decl nil sets nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (vars_not_ac_var_apply_sub_args 0
  (vars_not_ac_var_apply_sub_args-1 nil 3825603795
   ("" (induct "args" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subset?" 1)
            (("2" (skeep)
              (("2" (expand "subs" -2)
                (("2" (expand "vars_not_ac_var" -2)
                  (("2" (expand "member" -2)
                    (("2" (expand "union" -2)
                      (("2" (expand "member" 1)
                        (("2" (expand "union" 1)
                          (("2" (prop)
                            (("1" (lemma "vars_not_ac_var_apply_sub_t")
                              (("1"
                                (hide -3)
                                (("1"
                                  (inst -1 "sigma" "hd")
                                  (("1"
                                    (expand "subset?" -1)
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand "member" -1)
                                            (("1"
                                              (expand "union" -1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -2 "sigma")
                              (("2"
                                (expand "subset?" -2)
                                (("2"
                                  (inst -2 "x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "union" -2)
                                      (("2"
                                        (expand "member" -2 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_not_ac_var_apply_sub_t formula-decl nil termination_alg nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (union const-decl "set" sets nil)
    (subs def-decl "args" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_var_apply_unif_pair 0
  (vars_not_ac_var_apply_unif_pair-1 nil 3825604658
   ("" (skeep)
    (("" (expand "subset?" 1)
      (("" (skeep)
        (("" (expand "apply_sub" -1)
          (("" (expand "vars_not_ac_var" -1)
            (("" (expand "member" -1)
              (("" (expand "union" -1)
                (("" (prop)
                  (("1" (lemma "vars_not_ac_var_apply_sub_t")
                    (("1" (inst? -1)
                      (("1" (expand "subset?" -1)
                        (("1" (inst -1 "x")
                          (("1" (assert)
                            (("1" (hide -2) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "vars_not_ac_var_apply_sub_t")
                    (("2" (inst? -1)
                      (("2" (expand "subset?")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (hide -2) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (empty? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars_not_ac_var_apply_sub_t formula-decl nil termination_alg nil)
    (union const-decl "set" sets nil))
   shostak))
 (vars_not_ac_var_apply_sub 0
  (vars_not_ac_var_apply_sub-1 nil 3825604312
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subset?" 1)
            (("2" (skeep)
              (("2" (expand "apply_sub" -2)
                (("2" (expand "vars_not_ac_var" -2)
                  (("2" (expand "union" -2)
                    (("2" (expand "member" -2 1)
                      (("2" (prop)
                        (("1" (hide -2)
                          (("1"
                            (lemma "vars_not_ac_var_apply_unif_pair")
                            (("1" (inst? -1)
                              (("1"
                                (expand "subset?" -1)
                                (("1"
                                  (inst -1 "x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand "union" -1)
                                        (("1"
                                          (expand "member" -1 1)
                                          (("1"
                                            (prop)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "sigma")
                          (("2" (expand "subset?" -2)
                            (("2" (inst -2 "x")
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_not_ac_var_apply_unif_pair formula-decl nil termination_alg
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (union const-decl "set" sets nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_var_dio_matrix2ac_sol 0
  (vars_not_ac_var_dio_matrix2ac_sol-1 nil 3829157816
   ("" (measure-induct "length(submatrix_sol_lst)" "submatrix_sol_lst")
    (("" (skolem 1 "submatrix_sol_lst")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "map" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "first_proj" -1)
                    (("2" (expand "member" -1)
                      (("2" (prop)
                        (("1"
                          (name-replace "dio_matrix"
                           "car(submatrix_sol_lst)")
                          (("1" (expand "dio_matrix2ac_sol")
                            (("1" (lemma "vars_not_ac_var_unif_prb2")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -1 "unif_pair")
                                    (("1"
                                      (hide -3)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (expand
                                               "vars_not_ac_var"
                                               -1)
                                              (("1"
                                                (expand "member" -1)
                                                (("1"
                                                  (expand "union" -1)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (lemma
                                                       "pareate_mem[term]")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "vars_not_ac_var_args")
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "unif_pair`1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "pareate_mem[term]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -4)
                                                              (("2"
                                                                (lemma
                                                                 "map_member4[args, term]")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (skolem
                                                                         -1
                                                                         "args2")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (expand
                                                                                 "get_ac_from_args"
                                                                                 -2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "vars_not_ac_var"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member"
                                                                                     -2
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "vars_not_ac"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "mem_union_map[term, variable]")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -3)
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 -1
                                                                                                 "t")
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "not_var_args")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "get_args_ac")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "get_args_get_term_from_args")
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "not_var_args_mem2")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "mem_flatten_map[term, term]")
                                                                                                                            (("1"
                                                                                                                              (inst?
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (skolem
                                                                                                                                   -1
                                                                                                                                   "s")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "get_pre_new_args_mem_mem_var")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "s")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "member_t_lst_args")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (skolem
                                                                                                                                                           -1
                                                                                                                                                           "args3")
                                                                                                                                                          (("1"
                                                                                                                                                            (prop)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "get_repeat_lst_mem[args]")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (reveal
                                                                                                                                                                       -2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "get_args_not_pair_ac")
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "get_term_from_args"
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "get_args_not_pair_ac")
                                                                                                                  (("2"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "not_var_args"
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "not_var_args"
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "member"
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "cdr(submatrix_sol_lst)")
                            (("2" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (inst -1 "X")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (constant type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (ac_sol type-eq-decl nil aux_unification nil)
    (dio_matrix2ac_sol const-decl "ac_sol" aux_unification nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (get_pre_new_args def-decl "[list[args], list[variable]]"
     aux_unification nil)
    (get_ac_from_args const-decl "term" term_properties nil)
    (vars_not_ac_var_args formula-decl nil termination_alg nil)
    (pareate_mem formula-decl nil list_theory nil)
    (map_member4 formula-decl nil map_theory nil)
    (mem_union_map formula-decl nil map_theory nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (get_args_get_term_from_args formula-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (flatten def-decl "list[T]" list_theory nil)
    (mem_flatten_map formula-decl nil map_theory nil)
    (get_pre_new_args_mem_mem_var formula-decl nil aux_unification nil)
    (get_repeat_lst_mem formula-decl nil list_theory nil)
    (member_t_lst_args formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (not_var_args_mem2 formula-decl nil term_properties nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (not_var_args def-decl "args" term_properties nil)
    (get_args_ac formula-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, pair] -> (ac_app?)]"
     term_adt nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (union const-decl "set" sets nil)
    (vars_not_ac_var_unif_prb2 formula-decl nil termination_alg nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (vars_under2more_null 0
  (vars_under2more_null-1 nil 3824482826
   ("" (lemma "subset_antisymmetric[variable]")
    (("" (inst? -1)
      (("" (assert)
        (("" (hide 2)
          (("" (prop)
            (("1" (expand "vars_under2more" 1)
              (("1" (expand "subset?" 1)
                (("1" (skeep)
                  (("1" (hide 1)
                    (("1" (expand "member" -1 1)
                      (("1" (skeep)
                        (("1" (expand "subterms" -4)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "subset_emptyset[variable]")
              (("2" (inst? -1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (func? const-decl "bool" term_properties nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sym const-decl "string" term_properties nil)
    (dif_func? const-decl "bool" term_properties nil)
    (member const-decl "bool" sets nil)
    (subset_emptyset formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (admissible_subterms_mem 0
  (admissible_subterms_mem-1 nil 3824391151
   ("" (induct "unif_prb" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "admissible_subterms" -1)
              (("1" (expand "member" -1 1)
                (("1" (skolem -1 "s")
                  (("1" (flatten)
                    (("1" (expand "subterms" -1)
                      (("1" (expand "union" -1)
                        (("1" (expand "member" -1 1)
                          (("1" (prop)
                            (("1" (inst 1 "hd") (("1" (grind) nil nil))
                              nil)
                             ("2" (inst -3 "t")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -4)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "unif_pair")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand
                                           "admissible_subterms"
                                           1)
                                          (("2"
                                            (expand "member" 1 1)
                                            (("2"
                                              (inst 1 "s")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -2)
                (("2" (prop)
                  (("1" (expand "admissible_subterms" 1)
                    (("1" (expand "admissible_subterms" -2)
                      (("1" (expand "member" -2 1)
                        (("1" (expand "member" 1 1)
                          (("1" (skolem -2 "s")
                            (("1" (flatten)
                              (("1"
                                (inst 1 "s")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -3 "t")
                    (("2" (flatten)
                      (("2" (hide -3)
                        (("2" (prop)
                          (("1" (hide -2 -3)
                            (("1" (expand "admissible_subterms" 1)
                              (("1"
                                (expand "member" 1 1)
                                (("1"
                                  (expand "admissible_subterms" -1)
                                  (("1"
                                    (expand "member" -1)
                                    (("1"
                                      (skolem -1 "s")
                                      (("1"
                                        (inst 1 "s")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 1 "unif_pair")
                            (("2" (hide 2) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (prop_subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (admissible_subterms_null 0
  (admissible_subterms_null-1 nil 3824997677
   ("" (lemma "subset_antisymmetric[term]")
    (("" (inst? -1)
      (("" (assert)
        (("" (hide 2)
          (("" (prop)
            (("1" (expand "subset?" 1)
              (("1" (skeep)
                (("1" (hide 1)
                  (("1" (expand "admissible_subterms" -1)
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "subset_emptyset[term]")
              (("2" (inst? -1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (subset_emptyset formula-decl nil sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (vars_not_ac_var_inst_step 0
  (vars_not_ac_var_inst_step-1 nil 3825175316
   ("" (measure-induct "length(unif_prb1)" "unif_prb1")
    (("" (skolem 1 "unif_prb1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subset?" 1)
            (("" (skeep)
              (("" (expand "instantiate_step" -2)
                (("" (name-replace "t" "car(unif_prb1)`1")
                  (("1" (name-replace "s" "car(unif_prb1)`2")
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (flatten) (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2"
                            (name-replace "delta"
                             "instantiate_step(t, s)`1")
                            (("2"
                              (name-replace "skip1"
                               "instantiate_step(t, s)`2")
                              (("2"
                                (name-replace
                                 "fail1"
                                 "instantiate_step(t, s)`3")
                                (("2"
                                  (split)
                                  (("1"
                                    (hide-all-but -1)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst
                                               -1
                                               "cdr(unif_prb1)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "sigma"
                                                   "cons((t, s), unif_prb2)")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             3
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "union"
                                                               3
                                                               1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     "union"
                                                                     3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "union"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "member"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "union"
                                                                               -1)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sec_proj"
                                                                                   3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "vars_not_ac_var"
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member"
                                                                                       3
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "union"
                                                                                         3
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "first_proj"
                                                                                   4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vars_not_ac"
                                                                                     4)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member"
                                                                                       4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "union"
                                                                                         4)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (expand
                                                                                   "vars_not_ac"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "member"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "union"
                                                                                       -1)
                                                                                      (("3"
                                                                                        (prop)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "vars_not_ac"
                                                                                           -1
                                                                                           1)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "union"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member"
                                                                                               -1
                                                                                               1)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -9)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "first_proj"
                                                                                                     4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "vars_not_ac"
                                                                                                       4)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member"
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "union"
                                                                                                           4)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "sec_proj"
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "vars_not_ac_var"
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "union"
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -8)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "vars_not_ac_var"
                                                                                                               3)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "member"
                                                                                                                 3)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "member"
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "instantiate_step_skip")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "s"
                                                                                                                             "t")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "skip1")
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (reveal -1)
                                            (("2"
                                              (inst
                                               -1
                                               "apply_sub(delta, cdr(unif_prb1))")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "append(delta, sigma)"
                                                   "apply_sub(delta, unif_prb2)")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (case
                                                             "member(x, vars_not_ac(img(delta)))")
                                                            (("1"
                                                              (expand
                                                               "delta"
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "instantiate_step_img")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         -2)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "vars_not_ac_singleton")
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (reveal
                                                                               -12)
                                                                              (("2"
                                                                                (expand
                                                                                 "union"
                                                                                 4
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   4
                                                                                   1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "union"
                                                                                       4
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member"
                                                                                         4
                                                                                         1)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "first_proj"
                                                                                             5)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "vars_not_ac"
                                                                                               5)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "union"
                                                                                                 5)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   5
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("3"
                                                                        (hide
                                                                         -3)
                                                                        (("3"
                                                                          (rewrite
                                                                           "vars_not_ac_singleton")
                                                                          (("3"
                                                                            (expand
                                                                             "member"
                                                                             5
                                                                             1)
                                                                            (("3"
                                                                              (expand
                                                                               "union"
                                                                               5
                                                                               1)
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (hide
                                                                                   6)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "union"
                                                                                     5
                                                                                     1)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "member"
                                                                                       5
                                                                                       1)
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (reveal
                                                                                           -10)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sec_proj"
                                                                                             5)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "vars_not_ac_var"
                                                                                               5)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 5)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "union"
                                                                                                   5)
                                                                                                  (("3"
                                                                                                    (flatten)
                                                                                                    (("3"
                                                                                                      (hide
                                                                                                       6
                                                                                                       7)
                                                                                                      (("3"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "vars_not_ac_var"
                                                                                                           5)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             5
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "apply_sub_sec_proj"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (rewrite
                                                                 "apply_sub_first_proj"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "union"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "member"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "union"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "member"
                                                                           5
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "union"
                                                                             5
                                                                             1)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "union"
                                                                                 5)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   5
                                                                                   1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "vars_not_ac_var_apply_sub_args")
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subset?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "union"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "sec_proj"
                                                                                                         5)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "vars_not_ac_var"
                                                                                                           5)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "union"
                                                                                                             5)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member"
                                                                                                               5
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "vars_not_ac_apply_sub_args")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "subset?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "union"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "first_proj"
                                                                                                         6)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "vars_not_ac"
                                                                                                           6)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             6)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "union"
                                                                                                               6)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "vars_not_ac_apply_sub")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "delta"
                                                                                           "unif_prb2")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "subset?"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "union"
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "apply_sub_len")
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide -1 1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (instantiate_step def-decl "[unif_prb, sub, bool]" aux_unification
     nil)
    (union const-decl "set" sets nil)
    (args type-eq-decl nil term_properties nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (instantiate_step const-decl "[sub, bool, bool]" aux_unification
     nil)
    (instantiate_step_skip formula-decl nil aux_unification nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (instantiate_step_img formula-decl nil aux_unification nil)
    (empty? const-decl "bool" sets nil)
    (vars_not_ac_singleton formula-decl nil termination_alg nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (apply_sub_first_proj formula-decl nil unification nil)
    (vars_not_ac_apply_sub formula-decl nil termination_alg nil)
    (vars_not_ac_apply_sub_args formula-decl nil termination_alg nil)
    (vars_not_ac_var_apply_sub_args formula-decl nil termination_alg
     nil)
    (apply_sub_sec_proj formula-decl nil unification nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (inst_step_vars_not_ac_var_sub_unif_prb2 0
  (inst_step_vars_not_ac_var_sub_unif_prb2-1 nil 3828198678
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "instantiate_step" -1)
              (("" (lift-if)
                (("" (split)
                  (("1" (prop)
                    (("1" (hide-all-but -2) (("1" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (name-replace "t" "car(unif_prb)`1")
                      (("1" (name-replace "s" "car(unif_prb)`2")
                        (("1"
                          (name-replace "delta"
                           "instantiate_step(t, s)`1")
                          (("1"
                            (name-replace "skip1"
                             "instantiate_step(t, s)`2")
                            (("1"
                              (name-replace "fail1"
                               "instantiate_step(t, s)`3")
                              (("1"
                                (split)
                                (("1"
                                  (hide-all-but -1)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case "idempotent?(delta)")
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (reveal -6)
                                          (("1"
                                            (inst -1 "cdr(unif_prb)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst 4 "X")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "instantiate_step"
                                                             1)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (reveal
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6)
                                                                (("1"
                                                                  (replace
                                                                   -5)
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (replace
                                                                       -3)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -1
                                                             -4
                                                             -5
                                                             5)
                                                            (("2"
                                                              (lemma
                                                               "vars_not_ac_var_unif_prb")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "X"
                                                                 "cdr(unif_prb)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (lemma
                                                                       "vars_not_ac_var_unif_prb")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "t!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 1 3 -3)
                                                      (("2"
                                                        (lemma
                                                         "vars_not_ac_var_unif_prb")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 "vars_not_ac_var_unif_prb")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "Y"
                                                                   "unif_prb")
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (inst?
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (rewrite "append_null")
                                            (("2"
                                              (lemma
                                               "instantiate_step_sub_append")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (lemma
                                                         "vars_not_ac_var_img_append")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 5
                                                                 "X")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "instantiate_step"
                                                                     1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (reveal
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         -8
                                                                         -9)
                                                                        (("1"
                                                                          (replace
                                                                           -5)
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5)
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "append_null")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "instantiate_step_sub_append")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "instantiate_step(apply_sub(delta, cdr(unif_prb)), apply_sub(delta, unif_prb1), delta)`2 = 
             append(instantiate_step(apply_sub(delta, cdr(unif_prb)), apply_sub(delta, unif_prb1), null)`2, 
                    delta)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "subs"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "subs_append2")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "member(X, dom(delta))")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -2
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "idempotent_disjoint_dom_img")
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "disjoint?"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "empty?"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "X")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "intersection"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "vars_not_ac_var_finset")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (skolem
                                                                                                                                               -1
                                                                                                                                               "t1")
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "vars_finset")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         1
                                                                                                                                                         "t1")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "member"
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "vars_not_ac_var"
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (prop)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "vars_not_ac_vars_t")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "member"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "dom"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "subs"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subs"
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2
                                                                                                           3
                                                                                                           4
                                                                                                           5
                                                                                                           6
                                                                                                           7)
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -3)
                                                                    (("2"
                                                                      (lemma
                                                                       "vars_not_ac_var_finset")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skolem
                                                                             -1
                                                                             "t1")
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (lemma
                                                                                 "vars_not_ac_var_unif_prb")
                                                                                (("2"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "t1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "delta"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (reveal
                                                                                             -12
                                                                                             -13)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "instantiate_step_img")
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         3
                                                                                                         4
                                                                                                         5
                                                                                                         6
                                                                                                         7)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (hide
                                                                                                       3
                                                                                                       4
                                                                                                       5
                                                                                                       6
                                                                                                       7
                                                                                                       8)
                                                                                                      (("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -2)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "union"
                                                                   -1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (reveal
                                                                       -11)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "apply_sub(delta, cdr(unif_prb))")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     5
                                                                                     "X")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subs"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "instantiate_step"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -7
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     -2
                                                                                                                     -3
                                                                                                                     -4
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "subs"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "append_null")
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "instantiate_step(apply_sub(delta, cdr(unif_prb)), apply_sub(delta, unif_prb1), delta)`2 =
             append(instantiate_step(apply_sub(delta, cdr(unif_prb)), apply_sub(delta, unif_prb1), null)`2, 
                    delta)")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "subs_append2")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "member(X, dom(delta))")
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -2
                                                                                                                                     -4
                                                                                                                                     1
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "vars_not_ac_var_unif_prb")
                                                                                                                                      (("1"
                                                                                                                                        (inst?
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (skolem
                                                                                                                                             -1
                                                                                                                                             "t1")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -4)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "apply_sub_mem")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (skolem
                                                                                                                                                         -1
                                                                                                                                                         "t2")
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "vars_not_ac_var"
                                                                                                                                                             -4)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "member"
                                                                                                                                                               -4
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (prop)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "vars_not_ac_vars_t")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -3)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -3)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "apply_sub_elim_var_t")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -2
                                                                                                                                                                                   -3
                                                                                                                                                                                   -4
                                                                                                                                                                                   -5)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (reveal
                                                                                                                                                                                     -18)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "idempotent_disjoint_dom_img")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst?
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "disjoint?"
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "dom"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "member"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "subs"
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             2
                                                                                                                             -3)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               2
                                                                                                                               3
                                                                                                                               4)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "instantiate_step_sub_append")
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -1
                                                                                         -3)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "vars_not_ac_var_unif_prb")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "X"
                                                                                             "apply_sub(delta, cdr(unif_prb))")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 -1
                                                                                                 "t1")
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "apply_sub_mem")
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -1
                                                                                                           "t2")
                                                                                                          (("2"
                                                                                                            (prop)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -5)
                                                                                                                (("2"
                                                                                                                  (reveal
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "vars_not_ac_var_subs")
                                                                                                                    (("2"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (reveal
                                                                                                                           -12)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (skolem
                                                                                                                                 -1
                                                                                                                                 "W")
                                                                                                                                (("1"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (reveal
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "W")
                                                                                                                                      (("1"
                                                                                                                                        (prop)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "vars_not_ac_var_unif_prb")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "Y"
                                                                                                                                               "unif_prb")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "t2")
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "instantiate_step"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             -17
                                                                                                                                             -16
                                                                                                                                             -15
                                                                                                                                             -13
                                                                                                                                             -14)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -5)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -4)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -3)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1
                                                                                                                                                         -2
                                                                                                                                                         -3
                                                                                                                                                         -4
                                                                                                                                                         -5)
                                                                                                                                                        (("2"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("2"
                                                                                                                                                            (split)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (split)
                                                                                                                                                                (("1"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "append_null")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (case
                                                                                                                                                                       "instantiate_step(apply_sub(delta, cdr(unif_prb)), apply_sub(delta, unif_prb1), delta)`2 =
             append(instantiate_step(apply_sub(delta, cdr(unif_prb)), apply_sub(delta, unif_prb1), null)`2, 
                    delta)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "subs"
                                                                                                                                                                           2)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "subs_append2")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               6
                                                                                                                                                                               5)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "subs"
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "subs"
                                                                                                                                                                                     -5)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         2
                                                                                                                                                                         3
                                                                                                                                                                         4
                                                                                                                                                                         5
                                                                                                                                                                         6
                                                                                                                                                                         7)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -1
                                                                                                                                                                           -2
                                                                                                                                                                           -3
                                                                                                                                                                           -4
                                                                                                                                                                           -5
                                                                                                                                                                           -6
                                                                                                                                                                           -7
                                                                                                                                                                           -8)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "instantiate_step_sub_append")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (lemma
                                                                                                                                           "vars_not_ac_var_unif_prb")
                                                                                                                                          (("3"
                                                                                                                                            (inst?
                                                                                                                                             -1)
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              (("3"
                                                                                                                                                (inst
                                                                                                                                                 1
                                                                                                                                                 "t2")
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  (("3"
                                                                                                                                                    (hide
                                                                                                                                                     -1
                                                                                                                                                     -2
                                                                                                                                                     -3
                                                                                                                                                     -4
                                                                                                                                                     -6
                                                                                                                                                     -7
                                                                                                                                                     2
                                                                                                                                                     3
                                                                                                                                                     4
                                                                                                                                                     5)
                                                                                                                                                    (("3"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 -3
                                                                                                                                 -4
                                                                                                                                 -5
                                                                                                                                 -6)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "delta"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "instantiate_step_img")
                                                                                                                                    (("2"
                                                                                                                                      (inst?
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (reveal
                                                                                                                                         -20
                                                                                                                                         -21)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -1
                                                                                                                                               -6
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "vars_not_ac_var_finset")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -5)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           5)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "member"
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "singleton"
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "vars_not_ac_var_unif_prb")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         1
                                                                                                                                                                         "t")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("3"
                                                                                                                                              (hide
                                                                                                                                               1
                                                                                                                                               3
                                                                                                                                               4
                                                                                                                                               5
                                                                                                                                               7
                                                                                                                                               -6
                                                                                                                                               -5)
                                                                                                                                              (("3"
                                                                                                                                                (lemma
                                                                                                                                                 "vars_not_ac_var_finset")
                                                                                                                                                (("3"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    (("3"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("3"
                                                                                                                                                        (hide
                                                                                                                                                         -6)
                                                                                                                                                        (("3"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (lemma
                                                                                                                                 "vars_not_ac_var_unif_prb")
                                                                                                                                (("3"
                                                                                                                                  (inst?
                                                                                                                                   -1)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    (("3"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "t2")
                                                                                                                                      (("3"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "vars_not_ac_var_unif_prb")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -3)
                                                                                          (("2"
                                                                                            (skolem
                                                                                             -2
                                                                                             "tdelta")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "apply_sub_mem")
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skolem
                                                                                                       -1
                                                                                                       "ti")
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -3
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "vars_not_ac_var_subs")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (reveal
                                                                                                                     -12)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             5
                                                                                                                             "X")
                                                                                                                            (("1"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "instantiate_step"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (reveal
                                                                                                                                   -13
                                                                                                                                   -14
                                                                                                                                   -15
                                                                                                                                   -16
                                                                                                                                   -17)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -5)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -4)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -3)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1
                                                                                                                                               -2
                                                                                                                                               -3
                                                                                                                                               -4
                                                                                                                                               -5)
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (split)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (split)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           1
                                                                                                                                                           3)
                                                                                                                                                          (("2"
                                                                                                                                                            (rewrite
                                                                                                                                                             "append_null")
                                                                                                                                                            (("2"
                                                                                                                                                              (reveal
                                                                                                                                                               -10)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "subs"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "subs_append2")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "subs"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (reveal
                                                                                                                                                                             -6)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "subs_no_effect_t")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (name-replace
                                                                                                                                                                                       "sigma_tail"
                                                                                                                                                                                       "instantiate_step(apply_sub(delta, cdr(unif_prb)), apply_sub(delta, unif_prb1), null)`2")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "idempotent?(sigma_tail)")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "idempotent_disjoint_dom_img")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "disjoint?")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "empty?")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       "x")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "member"
                                                                                                                                                                                                         -2)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "intersection"
                                                                                                                                                                                                           -2)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (prop)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "vars"
                                                                                                                                                                                                               -3)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "member"
                                                                                                                                                                                                                 -3)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "singleton"
                                                                                                                                                                                                                   -3)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -3)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       "member"
                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "intersection"
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (prop)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                             "vars_not_ac_var_finset")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (inst?
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                     "vars_not_ac_vars_t")
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (inst?
                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                         "t!1")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "vars_not_ac_var"
                                                                                                                                                                                                                                             -3)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                               "member"
                                                                                                                                                                                                                                               -3
                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                                     "vars_finset")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (inst?
                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                                           1
                                                                                                                                                                                                                                                           "t!1")
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "sigma_tail"
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "instantiate_step_idempotent")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst?
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (lemma
                                                                                                                                 "vars_not_ac_var_unif_prb")
                                                                                                                                (("2"
                                                                                                                                  (inst?
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "ti")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "delta"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "instantiate_step_img")
                                                                                                                            (("2"
                                                                                                                              (reveal
                                                                                                                               -16
                                                                                                                               -17)
                                                                                                                              (("2"
                                                                                                                                (inst?
                                                                                                                                 -3)
                                                                                                                                (("2"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     -4)
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     -8
                                                                                                                                     -7
                                                                                                                                     -6
                                                                                                                                     4)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "vars_not_ac_var_finset")
                                                                                                                                        (("2"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "vars_not_ac_var_unif_prb")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "t_1")
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("3"
                                                                                                                                      (lemma
                                                                                                                                       "vars_not_ac_var_finset")
                                                                                                                                      (("3"
                                                                                                                                        (inst?
                                                                                                                                         -1)
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          (("3"
                                                                                                                                            (skeep)
                                                                                                                                            (("3"
                                                                                                                                              (hide
                                                                                                                                               1
                                                                                                                                               2
                                                                                                                                               3
                                                                                                                                               5
                                                                                                                                               -9
                                                                                                                                               -10)
                                                                                                                                              (("3"
                                                                                                                                                (lemma
                                                                                                                                                 "vars_not_ac_var_unif_prb")
                                                                                                                                                (("3"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    (("3"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "t!1")
                                                                                                                                                      (("3"
                                                                                                                                                        (prop)
                                                                                                                                                        (("3"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (lemma
                                                                                                                           "vars_not_ac_var_unif_prb")
                                                                                                                          (("3"
                                                                                                                            (inst?
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "ti")
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "apply_sub_len")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "delta")
                                                                      (("2"
                                                                        (lemma
                                                                         "instantiate_step_img")
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (reveal
                                                                             -10
                                                                             -11)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (hide
                                                                                   1
                                                                                   2
                                                                                   4)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "vars_not_ac_var_finset")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (replace
                                                                                 -1)
                                                                                (("3"
                                                                                  (hide
                                                                                   -1
                                                                                   1
                                                                                   5)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "vars_not_ac_var_finset")
                                                                                    (("3"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "instantiate_step_idempotent")
                                                              (("3"
                                                                (inst?
                                                                 -1)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (prop)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1)
                                      (("2"
                                        (expand "delta" 1)
                                        (("2"
                                          (lemma
                                           "instantiate_step_fail")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "fail1")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (instantiate_step def-decl "[unif_prb, sub, bool]" aux_unification
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (idempotent? const-decl "bool" substitution nil)
    (append_null formula-decl nil list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (vars_not_ac_var_img_append formula-decl nil termination_alg nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (instantiate_step_img formula-decl nil aux_unification nil)
    (append def-decl "list[T]" list_props nil)
    (subs_append2 formula-decl nil substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil substitution nil)
    (vars_not_ac_var_finset formula-decl nil termination_alg nil)
    (vars_not_ac_vars_t formula-decl nil termination_alg nil)
    (vars_finset formula-decl nil term_properties nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (apply_sub_len formula-decl nil unification nil)
    (vars_not_ac_var_subs formula-decl nil termination_alg nil)
    (singleton? const-decl "bool" sets nil)
    (apply_sub_elim_var_t formula-decl nil substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (apply_sub_mem formula-decl nil unification nil)
    (instantiate_step_idempotent formula-decl nil aux_unification nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil) (rest const-decl "set" sets nil)
    (instantiate_step_sub_append formula-decl nil aux_unification nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (vars_not_ac_var_unif_prb formula-decl nil termination_alg nil)
    (instantiate_step_fail formula-decl nil aux_unification nil)
    (instantiate_step const-decl "[sub, bool, bool]" aux_unification
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (inst_step_vars_not_ac_var_sub 0
  (inst_step_vars_not_ac_var_sub-2 nil 3828222767
   ("" (measure-induct "length(lst_unif_prb)" "lst_unif_prb")
    (("" (skolem 1 "lst_unif_prb")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "instantiate_step" -1)
              (("" (name-replace "unif_prb" "car(lst_unif_prb)")
                (("1"
                  (name-replace "new_unif_prb"
                   "instantiate_step(unif_prb, null, null)`1")
                  (("1"
                    (name-replace "sigma1"
                     "instantiate_step(unif_prb, null, null)`2")
                    (("1"
                      (name-replace "fail1"
                       "instantiate_step(unif_prb, null, null)`3")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (reveal -5)
                                  (("1"
                                    (inst -1 "cdr(lst_unif_prb)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (inst -1 "Y")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 3 "X")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "vars_not_ac_var"
                                                       3
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "union"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           3
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 1 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "member" -1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "new_unif_prb")
                                      (("1"
                                        (expand "sigma1")
                                        (("1"
                                          (lemma
                                           "inst_step_vars_not_ac_var_sub_unif_prb2")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (inst -1 "Y")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -3 :dir rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (reveal -6)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             4
                                                             "X")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 1 2 3)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal -5)
                                      (("2"
                                        (inst -1 "cdr(lst_unif_prb)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (inst -1 "Y")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 4 "X")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 1 2 5)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lift-if)
                  (("2" (split -1)
                    (("1" (hide-all-but -1) (("1" (grind) nil nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide -1 -2 3 4) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (instantiate_step def-decl "list[[unif_prb, sub]]" aux_unification
     nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step_vars_not_ac_var_sub_unif_prb2 formula-decl nil
     termination_alg nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (union const-decl "set" sets nil)
    (instantiate_step def-decl "[unif_prb, sub, bool]" aux_unification
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil)
  (inst_step_vars_not_ac_var_sub-1 nil 3827849953
   ("" (measure-induct "length(lst_unif_prb)" "lst_unif_prb")
    (("" (skolem 1 "lst_unif_prb")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "instantiate_step" -1)
              (("" (name-replace "unif_prb" "car(lst_unif_prb)")
                (("1"
                  (name-replace "new_unif_prb"
                   "instantiate_step(unif_prb, null, null)`1")
                  (("1"
                    (name-replace "sigma1"
                     "instantiate_step(unif_prb, null, null)`2")
                    (("1"
                      (name-replace "fail1"
                       "instantiate_step(unif_prb, null, null)`3")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (reveal -5)
                                  (("1"
                                    (inst -1 "cdr(lst_unif_prb)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (inst -1 "Y")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 3 "X")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "vars_not_ac_var"
                                                       3
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "union"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           3
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 1 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "member" -1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "new_unif_prb")
                                      (("1"
                                        (expand "sigma1")
                                        (("1"
                                          (lemma
                                           "inst_step_vars_not_ac_var_sub_unif_prb")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (inst -1 "Y")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -3 :dir rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (reveal -6)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               4
                                                               "X")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               -1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 1 2 3)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           -1)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           -1)
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal -5)
                                      (("2"
                                        (inst -1 "cdr(lst_unif_prb)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (inst -1 "Y")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 4 "X")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 1 2 5)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lift-if)
                  (("2" (split -1)
                    (("1" (hide-all-but -1) (("1" (grind) nil nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide -1 -2 3 4) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (instantiate_step def-decl "list[[unif_prb, sub]]" aux_unification
     nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (union const-decl "set" sets nil)
    (instantiate_step def-decl "[unif_prb, sub, bool]" aux_unification
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (inst_step_vars_not_ac_mem_unif_prb 0
  (inst_step_vars_not_ac_mem_unif_prb-1 nil 3828277975
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (lemma "vars_not_ac_unif_prb_mem2")
          (("" (inst? -1)
            (("" (assert)
              (("" (skeep)
                (("" (lemma "instantiate_step1_mem")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (assert)
                        (("" (skolem -1 "s")
                          (("" (prop)
                            (("" (inst 3 "s")
                              (("" (prop) (("" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (instantiate_step def-decl "[unif_prb, sub, bool]" aux_unification
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (instantiate_step1_mem formula-decl nil aux_unification nil)
    (vars_not_ac_unif_prb_mem2 formula-decl nil termination_alg nil))
   shostak))
 (inst_step_vars_not_ac_mem 0
  (inst_step_vars_not_ac_mem-1 nil 3828276654
   ("" (measure-induct "length(lst_unif_prb)" "lst_unif_prb")
    (("" (skolem 1 "lst_unif_prb")
      (("" (prop)
        (("" (skeep)
          (("" (expand "instantiate_step" -3)
            (("" (name-replace "unif_prb" "car(lst_unif_prb)")
              (("1"
                (name-replace "new_unif_prb"
                 "instantiate_step(unif_prb, null, null)`1")
                (("1"
                  (name-replace "sigma1"
                   "instantiate_step(unif_prb, null, null)`2")
                  (("1"
                    (name-replace "fail1"
                     "instantiate_step(unif_prb, null, null)`3")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but -2) (("1" (grind) nil nil))
                          nil)
                         ("2" (inst? -3)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (inst -1 "sigma")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 3 "t")
                                        (("1"
                                          (prop)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "member" -1)
                          (("3" (prop)
                            (("1" (replace -1)
                              (("1"
                                (replace -2)
                                (("1"
                                  (hide -1 -2)
                                  (("1"
                                    (expand "new_unif_prb")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma
                                         "inst_step_vars_not_ac_mem_unif_prb")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (inst -1 "Y")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "sigma1")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 4 "t")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "unif_prb")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "fail1")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst? -2)
                              (("2"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (inst -1 "sigma")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 4 "t")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member def-decl "bool" list_props nil)
    (instantiate_step def-decl "list[[unif_prb, sub]]" aux_unification
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (instantiate_step def-decl "[unif_prb, sub, bool]" aux_unification
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step_vars_not_ac_mem_unif_prb formula-decl nil
     termination_alg nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (inst_step_vars_not_ac_var_mem 0
  (inst_step_vars_not_ac_var_mem-1 nil 3828540763
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb")
      (("" (prop)
        (("" (skeep)
          (("" (expand "apply_ac_step" -4)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (lemma "vars_not_ac_var_lst_unif_prb")
                    (("1" (inst -1 "X" "lst_unif_prb")
                      (("1" (assert)
                        (("1" (inst 1 "t") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2)
                  (("2" (flatten)
                    (("2" (name-replace "unif_pair" "car(unif_prb)")
                      (("1" (name-replace "t1" "unif_pair`1")
                        (("1" (split)
                          (("1" (grind) nil nil)
                           ("2" (flatten)
                            (("2" (name-replace "s" "unif_pair`2")
                              (("2"
                                (name-replace
                                 "vars1"
                                 "lst_vars(unif_prb)")
                                (("2"
                                  (name-replace
                                   "vars2"
                                   "lst_vars(flatten(lst_unif_prb))")
                                  (("2"
                                    (name-replace
                                     "vars2avoid"
                                     "append(vars1, vars2)")
                                    (("2"
                                      (name-replace
                                       "ac_results"
                                       "first_proj(solve_ac(t1, s, vars2avoid, ac_sym(t1)))")
                                      (("2"
                                        (lemma
                                         "member_lst_unif_prb_equiv")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (skolem -1 "unif_prb1")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (lemma
                                                     "mem_flatten_map2[list[unif_prb], unif_prb]")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skolem
                                                           -1
                                                           "lst_unif_prb1")
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (hide -4)
                                                              (("2"
                                                                (reveal
                                                                 -12)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "cdr(unif_prb)")
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "X"
                                                                       "lst_unif_prb1"
                                                                       "t")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "vars_not_ac"
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "union"
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "vars_not_ac_var_lst_unif_prb2")
                                                                          (("2"
                                                                            (inst?
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skolem
                                                                                 -1
                                                                                 "unif_prb2")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -3)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "put_in_head_mem3[unif_prb]")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "unif_prb2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -4
                                                                                                 -5
                                                                                                 -6
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "vars_not_ac_var_lst_unif_prb2")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "X"
                                                                                                       "ac_results")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -3
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "ac_results")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "solve_ac")
                                                                                                                (("1"
                                                                                                                  (name-replace
                                                                                                                   "f"
                                                                                                                   "ac_sym(t1)")
                                                                                                                  (("1"
                                                                                                                    (name-replace
                                                                                                                     "args"
                                                                                                                     "elim_com_arg(t1, s, f)`1")
                                                                                                                    (("1"
                                                                                                                      (name-replace
                                                                                                                       "mult_t1"
                                                                                                                       "elim_com_arg(t1, s, f)`2")
                                                                                                                      (("1"
                                                                                                                        (name-replace
                                                                                                                         "mult_t2"
                                                                                                                         "elim_com_arg(t1, s, f)`3")
                                                                                                                        (("1"
                                                                                                                          (name-replace
                                                                                                                           "bound"
                                                                                                                           "calculate_upper_bound(mult_t1, mult_t2)")
                                                                                                                          (("1"
                                                                                                                            (name-replace
                                                                                                                             "dio_sol_matrix"
                                                                                                                             "dio_solver(mult_t1, mult_t2, bound)")
                                                                                                                            (("1"
                                                                                                                              (name-replace
                                                                                                                               "submatrix_sol_lst"
                                                                                                                               "extract_submatrices(dio_sol_matrix, args)")
                                                                                                                              (("1"
                                                                                                                                (name-replace
                                                                                                                                 "results"
                                                                                                                                 "map(dio_matrix2ac_sol(args, vars2avoid, f))(submatrix_sol_lst)")
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "vars_not_ac_var_lst_unif_prb2")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (skolem
                                                                                                                                         -1
                                                                                                                                         "unif_prb3")
                                                                                                                                        (("1"
                                                                                                                                          (prop)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -3)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "results")
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "vars_not_ac_var_dio_matrix2ac_sol")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "X")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -2
                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "args"
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "vars_not_ac_var_args")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (skolem
                                                                                                                                                                   -1
                                                                                                                                                                   "ti")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (prop)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       -3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "elim_com_arg"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "member_append[term]")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst?
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (prop)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "count_elem_mem[term]")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (prop)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "remove_common_mem[term]")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst?
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "vars_not_ac_var"
                                                                                                                                                                                                       -2)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "member"
                                                                                                                                                                                                         -2
                                                                                                                                                                                                         1)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (prop)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (reveal
                                                                                                                                                                                                             -44
                                                                                                                                                                                                             -45)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "vars_not_ac"
                                                                                                                                                                                                               3)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "member"
                                                                                                                                                                                                                 3)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "union"
                                                                                                                                                                                                                   3)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (prop)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                       4
                                                                                                                                                                                                                       5)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "vars_not_ac"
                                                                                                                                                                                                                           3)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "member"
                                                                                                                                                                                                                               3)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "union"
                                                                                                                                                                                                                                 3)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (prop)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                     4)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "vars_not_ac"
                                                                                                                                                                                                                                       3)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                         "mem_union_map[term, variable]")
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (inst?
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                                               4)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                                 "ti")
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (prop)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                                     "not_var_args_get_args2")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (inst?
                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                           "f")
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "count_elem_mem[term]")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (prop)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (grind)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             -2)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "remove_common_mem[term]")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst?
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (reveal
                                                                                                                                                                                                       -43
                                                                                                                                                                                                       -45)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "vars_not_ac"
                                                                                                                                                                                                         2)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "member"
                                                                                                                                                                                                           2)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "union"
                                                                                                                                                                                                             2)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (prop)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                 3
                                                                                                                                                                                                                 4)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -2)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "vars_not_ac"
                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "union"
                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "member"
                                                                                                                                                                                                                             2
                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (prop)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                 2)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (reveal
                                                                                                                                                                                                                                   -43
                                                                                                                                                                                                                                   -45)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                     "all_ac_prb?"
                                                                                                                                                                                                                                     -6)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                       -6
                                                                                                                                                                                                                                       "unif_pair")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (prop)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           "ac_prb?"
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (prop)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                 "vars_not_ac"
                                                                                                                                                                                                                                                 2)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                                     "mem_union_map[term, variable]")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (inst?
                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (hide
                                                                                                                                                                                                                                                           3)
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                                             "ti")
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                               "vars_not_ac_var"
                                                                                                                                                                                                                                                               -7)
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                                 "member"
                                                                                                                                                                                                                                                                 -7
                                                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (prop)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                     "f"
                                                                                                                                                                                                                                                                     -6)
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (reveal
                                                                                                                                                                                                                                                                       -46)
                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                                         "not_var_args_get_args2")
                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                          (inst?
                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           "member"
                                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "unif_prb2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "vars_not_ac_var_lst_unif_prb2")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "X"
                                                                                                   "lst_unif_prb")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "unif_prb2")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "all_ac_prb?"
                                                                           -6)
                                                                          (("3"
                                                                            (expand
                                                                             "all_ac_prb?"
                                                                             1)
                                                                            (("3"
                                                                              (skolem
                                                                               1
                                                                               "unif_pair2")
                                                                              (("3"
                                                                                (inst
                                                                                 -6
                                                                                 "unif_pair2")
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (prop)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "member"
                                                                                       1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (lemma
                                                                           "member_lst_unif_prb_equiv")
                                                                          (("4"
                                                                            (inst?
                                                                             -1)
                                                                            (("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (inst
                                                                                 1
                                                                                 "unif_prb1")
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (all_ac_prb? const-decl "bool" unification nil)
    (apply_ac_step def-decl "list[unif_prb]" aux_unification nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vars_not_ac_var_lst_unif_prb formula-decl nil termination_alg nil)
    (lst_vars def-decl "list[variable]" unification nil)
    (append def-decl "list[T]" list_props nil)
    (member_lst_unif_prb_equiv formula-decl nil unification nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (union const-decl "set" sets nil)
    (elim_com_arg const-decl "[args, list[nat], list[nat]]"
     aux_unification nil)
    (args type-eq-decl nil term_properties nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (dio_matrix2ac_sol const-decl "ac_sol" aux_unification nil)
    (vars_not_ac_var_dio_matrix2ac_sol formula-decl nil termination_alg
     nil)
    (vars_not_ac_var_args formula-decl nil termination_alg nil)
    (get_args const-decl "args" term_properties nil)
    (remove_common def-decl "list[T]" list_theory nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (ac_prb? const-decl "bool" unification nil)
    (count_elem_mem formula-decl nil list_theory nil)
    (member def-decl "bool" list_props nil)
    (mem_union_map formula-decl nil map_theory nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (not_var_args_get_args2 formula-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (remove_common_mem formula-decl nil list_theory nil)
    (member_append formula-decl nil list_theory nil)
    (extract_submatrices const-decl "list[dio_matrix]" aux_unification
     nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (calculate_upper_bound const-decl "nat" diophantine nil)
    (put_in_head_mem3 formula-decl nil list_theory nil)
    (vars_not_ac_var_lst_unif_prb2 formula-decl nil termination_alg
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (string type-eq-decl nil strings nil)
    (ac_sol type-eq-decl nil aux_unification nil)
    (solve_ac const-decl "list[ac_sol]" aux_unification nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (flatten def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (not_vars_under2more_inst_step 0
  (not_vars_under2more_inst_step-1 nil 3829937138
   ("" (postpone) nil nil) nil shostak))
 (inst_step_vars_not_ac 0
  (inst_step_vars_not_ac-2 nil 3825153194
   ("" (skeep)
    ((""
      (case "subset?(vars_not_ac(unif_prb1), image(vars_not_ac_magic_fun(sigma), vars_not_ac(unif_prb)))")
      (("1" (lemma "card_subset[variable]")
        (("1"
          (inst -1 "vars_not_ac(unif_prb1)"
           "image(vars_not_ac_magic_fun(sigma), vars_not_ac(unif_prb))")
          (("1" (assert)
            (("1" (lemma "card_image[variable, variable]")
              (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "subset?" 1)
          (("2" (skolem 1 "Y")
            (("2" (prop)
              (("2" (lemma "inst_step_vars_not_ac_mem")
                (("2" (inst? -1)
                  (("2" (inst -1 "Y")
                    (("2" (assert)
                      (("2" (skolem -1 "ti")
                        (("2" (flatten)
                          (("2" (lemma "vars_not_ac_var_subs")
                            (("2" (inst? -1)
                              (("2"
                                (inst -1 "Y")
                                (("2"
                                  (lemma "instantiate_step_sub")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "image" 3)
                                            (("1"
                                              (expand "member" 3 1)
                                              (("1"
                                                (inst 3 "X")
                                                (("1"
                                                  (expand
                                                   "vars_not_ac_magic_fun"
                                                   3)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split 3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -3
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "dom"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("2"
                                                                        (lemma
                                                                         "term_variable_eta")
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -4
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -8
                                                                           -9
                                                                           -10)
                                                                          (("2"
                                                                            (hide
                                                                             3)
                                                                            (("2"
                                                                              (grind)
                                                                              (("2"
                                                                                (lemma
                                                                                 "term_variable_eta")
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (decompose-equality)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide
                                                   -1
                                                   -3
                                                   -5
                                                   -6
                                                   -7
                                                   -8)
                                                  (("2"
                                                    (lemma
                                                     "inst_step_vars_not_ac_var_mem")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (inst -1 "X")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               -1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "image" 2)
                                          (("2"
                                            (expand "member" 2 1)
                                            (("2"
                                              (lemma
                                               "inst_step_vars_not_ac_var_sub")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (inst -1 "Y")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst 3 "X")
                                                          (("1"
                                                            (expand
                                                             "vars_not_ac_magic_fun"
                                                             3)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "member"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "dom"
                                                                       1)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -3
                                                                               -4
                                                                               -5
                                                                               -6
                                                                               -7
                                                                               -8
                                                                               -9
                                                                               -10)
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (case
                                                                                   "X = V(variable(X))")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "vars_not_ac_var_lst_unif_prb")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (lemma
                                                                     "inst_step_vars_not_ac_var_mem")
                                                                    (("2"
                                                                      (inst?
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "X")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               -1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst 2 "Y")
                                                        (("1"
                                                          (expand
                                                           "vars_not_ac_magic_fun"
                                                           2)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -6
                                                                   -7
                                                                   -8
                                                                   -9
                                                                   -10
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (lemma
                                                                     "idempotent_disjoint_dom_img")
                                                                    (("1"
                                                                      (inst?
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "disjoint?"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "empty?")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "Y")
                                                                              (("1"
                                                                                (expand
                                                                                 "intersection"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "member"
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -3)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "vars_not_ac_var_finset")
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skolem
                                                                                             -1
                                                                                             "t")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "vars_not_ac_var"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   -2
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "vars_not_ac_vars_t")
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "vars_finset")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "t")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "vars_not_ac_var_lst_unif_prb")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (lemma
                                                                   "inst_step_vars_not_ac_var_mem")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "Y")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "member"
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "image" 2)
                                          (("3"
                                            (expand "member" 2)
                                            (("3"
                                              (inst 2 "Y")
                                              (("1"
                                                (expand
                                                 "vars_not_ac_magic_fun"
                                                 2)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide
                                                       -2
                                                       -3
                                                       -5
                                                       -7
                                                       -8
                                                       -9
                                                       1
                                                       2)
                                                      (("1"
                                                        (lemma
                                                         "idempotent_disjoint_dom_img")
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (lemma
                                                                 "apply_sub_elim_var_t")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "Y")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "vars_not_ac_vars_t")
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -4)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "inst_step_vars_not_ac_var_mem")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (inst -1 "Y")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "member"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (hide-all-but
                                                           -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (expand "vars_not_ac_var" 1)
                                          (("4"
                                            (expand "member" 1 1)
                                            (("4"
                                              (lemma "subs_var")
                                              (("4"
                                                (inst? -1)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_step_vars_not_ac_mem formula-decl nil termination_alg nil)
    (vars_not_ac_var_subs formula-decl nil termination_alg nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (inst_step_vars_not_ac_var_mem formula-decl nil termination_alg
     nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (idempotent_disjoint_dom_img formula-decl nil substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (vars_finset formula-decl nil term_properties nil)
    (vars_not_ac_vars_t formula-decl nil termination_alg nil)
    (vars_not_ac_var_finset formula-decl nil termination_alg nil)
    (disjoint? const-decl "bool" sets nil)
    (vars_not_ac_var_lst_unif_prb formula-decl nil termination_alg nil)
    (inst_step_vars_not_ac_var_sub formula-decl nil termination_alg
     nil)
    (apply_sub_elim_var_t formula-decl nil substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs const-decl "term" substitution nil)
    (subs_var formula-decl nil substitution nil)
    (instantiate_step_sub formula-decl nil aux_unification nil)
    (apply_ac_step def-decl "list[unif_prb]" aux_unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_image formula-decl nil function_image_aux nil)
    (finite_image application-judgement "finite_set[R]"
     function_image_aux nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (vars_not_ac_magic_fun const-decl "variable" termination_alg nil))
   nil)
  (inst_step_vars_not_ac-1 nil 3824407815
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 ("unif_prb"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "apply_ac_step" -2)
              (("" (lift-if)
                (("" (prop)
                  (("1" (expand "vars_not_ac" 1 2)
                    (("1" (lift-if)
                      (("1" (assert) (("1" (postpone) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide-all-but -1)
                    (("2" (expand "instantiate_step" -1)
                      (("2" (expand "first_proj" -1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (name-replace "unif_pair" "car(unif_prb)")
                    (("3" (name-replace "t" "unif_pair`1")
                      (("3" (name-replace "s" "unif_pair`2")
                        (("3"
                          (name-replace "vars1" "lst_vars(unif_prb)")
                          (("3"
                            (name-replace "vars2"
                             "lst_vars(flatten(lst_unif_prb))")
                            (("3"
                              (name-replace "vars2avoid"
                               "append(vars1, vars2)")
                              (("3"
                                (name-replace
                                 "ac_results"
                                 "first_proj(solve_ac(t, s, vars2avoid, ac_sym(t)))")
                                (("3"
                                  (name-replace
                                   "new_ac_results_so_far"
                                   "put_in_head(ac_results, lst_unif_prb)")
                                  (("3"
                                    (lemma
                                     "func_flatten_map[unif_prb, [unif_prb, sub]]")
                                    (("3"
                                      (inst? -1)
                                      (("3"
                                        (prop)
                                        (("1"
                                          (replace -1 -3)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "map_list_composition")
                                              (("1"
                                                (lemma
                                                 "func_flatten_map[[unif_prb, sub], unif_prb]")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -1 -3)
                                                      (("1"
                                                        (rewrite
                                                         "map_list_composition")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "mem_flatten_map2[list[unif_prb], unif_prb]")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "lst_unif_prb1")
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "o"
                                                                         -2)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (reveal
                                                                             -16)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "cdr(unif_prb)")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           2)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "union"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "union"
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "new_ac_results_so_far")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "put_in_head_mem2[unif_prb]")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "null?(lst_unif_prb1)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "instantiate_step"
                                                                                                                       -4)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "first_proj"
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "vars_not_ac"
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "instantiate_step"
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -5
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "fail1"
                                                                                                                               "instantiate_step(car(lst_unif_prb1), null)`3")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -4
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "member"
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "union"
                                                                                                                                         3)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "first_proj"
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "vars_not_ac"
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "union"
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "ac_results"
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "apply_ac_step_vars_not_ac_aux")
                                                                                                                                                  (("1"
                                                                                                                                                    (postpone)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -3
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "member"
                                                                                                                                                 4)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "union"
                                                                                                                                                   4)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "all_ac_prb?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (skolem
                                                                                           1
                                                                                           "unif_pair1")
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "all_ac_prb?"
                                                                                               -4)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "unif_pair1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (apply_ac_step_vars_under2more 0
  (apply_ac_step_vars_under2more-1 nil 3829344218
   ("" (skeep)
    ((""
      (case "subset?(vars_under2more(unif_prb1), image(vars_not_ac_magic_fun(sigma), vars_under2more(unif_prb)))")
      (("1" (lemma "card_subset[variable]")
        (("1"
          (inst -1 "vars_under2more(unif_prb1)"
           "image(vars_not_ac_magic_fun(sigma), vars_under2more(unif_prb))")
          (("1" (assert)
            (("1" (lemma "card_image[variable, variable]")
              (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "subset?" 1)
          (("2" (skolem 1 "Y")
            (("2" (prop)
              (("2" (expand "vars_under2more" -1)
                (("2" (expand "member" -1 1)
                  (("2" (skolem -1 ("t1" "s1"))
                    (("2" (prop)
                      (("2" (hide -6)
                        (("2" (lemma "instantiate_step_mem")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (skolem -1 "unif_prb2")
                                (("2"
                                  (prop)
                                  (("2"
                                    (hide -9)
                                    (("2"
                                      (lemma
                                       "instantiate_step_im_under_subterm")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (inst -1 "unif_prb2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3 :dir rl)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skolem -1 "t2")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (lemma
                                                       "instantiate_step_im_under_subterm")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "Y"
                                                         "s1"
                                                         "unif_prb2")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skolem
                                                             -1
                                                             "s2")
                                                            (("2"
                                                              (reveal
                                                               -1)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (lemma
                                                                   "apply_ac_step_new_var")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "Y"
                                                                     "t2"
                                                                     "unif_prb"
                                                                     "unif_prb2")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide
                                                                         -4)
                                                                        (("1"
                                                                          (hide
                                                                           -10
                                                                           -11
                                                                           -12
                                                                           -13
                                                                           -14)
                                                                          (("1"
                                                                            (lemma
                                                                             "apply_ac_step_new_var")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "Y"
                                                                               "s2"
                                                                               "unif_prb"
                                                                               "unif_prb2")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (expand
                                                                                   "member"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "image")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "Y")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "vars_not_ac_magic_fun"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2
                                                                                               -3
                                                                                               -4
                                                                                               -5
                                                                                               -6
                                                                                               -7
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 -12
                                                                                                 -14)
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -10)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "subterms_mem_unif_prb")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "t1"
                                                                                                                 "unif_prb1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skolem
                                                                                                                     -1
                                                                                                                     "t_")
                                                                                                                    (("1"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "vars_subterm")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "Y"
                                                                                                                           "t1"
                                                                                                                           "t_")
                                                                                                                          (("1"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "instantiate_step1_mem")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "t_"
                                                                                                                                   "unif_prb2")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       -14)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (skolem
                                                                                                                                             -2
                                                                                                                                             "t_1")
                                                                                                                                            (("1"
                                                                                                                                              (prop)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -9
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -3)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1
                                                                                                                                                     -2
                                                                                                                                                     -3
                                                                                                                                                     -5)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "apply_sub_elim_var_t")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "instantiate_step_sub")
                                                                                                                                                            (("1"
                                                                                                                                                              (reveal
                                                                                                                                                               -29)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "idempotent_disjoint_dom_img")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -2
                                                                                                                                                                             -4
                                                                                                                                                                             -5
                                                                                                                                                                             -6)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (rewrite
                                                                                                                               "im_under_var")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "vars_under2more"
                                                                                         1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "t2"
                                                                                           "s2")
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1
                                                                                               -2
                                                                                               -3
                                                                                               -4
                                                                                               -6
                                                                                               -8
                                                                                               -9
                                                                                               -10)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -2
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "subterms_mem_unif_prb")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (skolem
                                                                                             -1
                                                                                             "t2_")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "vars_unif_prb")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "Y"
                                                                                                   "unif_prb")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "t2_")
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "vars_subterm")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "Y"
                                                                                                             "t2"
                                                                                                             "t2_")
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "im_under_var")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "not_vars_under2more_inst_step")
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "Y")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   2
                                                                                   3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "vars_under2more")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "t1"
                                                                                         "s1")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -6
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9
                                                                                   -10
                                                                                   -11
                                                                                   -12
                                                                                   -13
                                                                                   -14)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2
                                                                                     3)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "subterms_mem_unif_prb")
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (skolem
                                                                                             -1
                                                                                             "t2_")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "vars_unif_prb")
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "t2_")
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "vars_subterm")
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "t2")
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "im_under_var")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -10
                                                                   -11
                                                                   -12
                                                                   -13
                                                                   -14)
                                                                  (("2"
                                                                    (replace
                                                                     -9
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (skolem
                                                                       -1
                                                                       "X")
                                                                      (("2"
                                                                        (prop)
                                                                        (("2"
                                                                          (case
                                                                           "idempotent?(sigma)")
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -10)
                                                                            (("1"
                                                                              (lemma
                                                                               "instantiate_step_apply_ac_step_im_under")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "X"
                                                                                 "Y"
                                                                                 "unif_prb"
                                                                                 "unif_prb2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -10
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         "t3")
                                                                                        (("1"
                                                                                          (case
                                                                                           "same_func?(t2, t3)")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "instantiate_step_apply_ac_step_im_under2")
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

