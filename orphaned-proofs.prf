("aux_unification" aux_unification dio_matrix2ac_mem_var 0 (dio_matrix2ac_mem_var-1 nil 3846335765 ("" (skeep) (("" (assert) (("" (flatten) (("" (expand "dio_matrix2ac_sol") (("" (use "member_rhs_pareate") (("" (assert) (("" (hide -2) (("" (rewrite "map_member4") (("" (skolem -1 "args1") (("" (flatten) (("" (replace -2 -3) (("" (lemma "get_ac_from_args_gt1_get_args_mem") (("" (inst -1 "args1" "f" "s") (("" (assert) (("" (lemma "no_null_get_pre_new_args") (("" (inst?) (("" (assert) (("" (rewrite "get_repeat_lst_len") (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("aux_unification" aux_unification get_pre_new_args_var_subset_cor 0 (get_pre_new_args_var_subset_cor-1 nil 3846769919 ("" (postpone) nil nil) nil shostak))("aux_unification" aux_unification construct_sub_mem_img 0 (construct_sub_mem_img-1 nil 3846777310 ("" (measure-induct "length(dio_matrix)" "dio_matrix") (("" (skolem 1 "dio") (("" (prop) (("" (skeep) (("" (expand "construct_sub" 1) (("" (split) (("1" (prop) (("1" (expand "well_formed?" 1) (("1" (grind) nil nil)) nil)) nil) ("2" (flatten) (("2" (name-replace "new_var" "get_new_var(vars2avoid)") (("2" (name-replace "new_vars2avoid" "cons(new_var, vars2avoid)") (("2" (name-replace "args_t" "construct_sub_aux(args, get_col_i(coef_matrix, 1))") (("2" (name-replace "t1" "get_ac_from_args_gt1(f)(args_t)") (("2" (expand "well_formed?" 2) (("2" (skeep) (("2" (prop) (("1" (hide -2) (("1" (lemma "elim_col1_matrix[nat]") (("1" (inst -1 "coef_matrix" "length(dio)") (("1" (expand "no_zero_col?" -5) (("1" (flatten) (("1" (assert) (("1" (expand "length" -1 1) (("1" (assert) (("1" (assert) (("1" (name-replace "delta_tail" "construct_sub(cdr(dio), elim_col1(coef_matrix), args, new_vars2avoid, f)") (("1" (expand "subs" -2) (("1" (expand "subs" -2) (("1" (lemma "subs_pair2") (("1" (inst -1 "cons((new_var, t1), null)" "subs(delta_tail)(variable(X))") (("1" (assert) (("1" (expand "subs" -1 1) (("1" (expand "subs" -1 2) (("1" (prop) (("1" (hide -3) (("1" (expand "delta_tail") (("1" (reveal -5) (("1" (inst -1 "cdr(dio)") (("1" (prop) (("1" (inst?) (("1" (assert) (("1" (prop) (("1" (expand "well_formed?" -1) (("1" (inst -1 "X") (("1" (prop) (("1" (hide -1) (("1" (expand "subs" 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "elim_col1_len[nat]") (("2" (inst?) (("2" (assert) (("2" (postpone) nil nil)) nil)) nil)) nil) ("3" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("aux_unification" aux_unification dio_matrix2ac_mem_not_pair 0 (dio_matrix2ac_mem_not_pair-1 nil 3846777090 ("" (skeep) (("" (assert) (("" (flatten) (("" (expand "dio_matrix2ac_sol" -1) (("" (use "member_rhs_pareate") (("" (assert) (("" (hide -2) (("" (rewrite "map_member4") (("" (skolem -1 "args1") (("" (flatten) (("" (expand "get_ac_from_args_gt1" -2) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (use "get_pre_new_args_all_var?2") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((dio_matrix2ac_sol const-decl "ac_sol" aux_unification nil) (map_member4 formula-decl nil map_theory nil) (get_pre_new_args_all_var?2 formula-decl nil aux_unification nil) (/= const-decl "boolean" notequal nil) (is_ac_sym? const-decl "bool" term_properties nil) (get_ac_from_args const-decl "term" term_properties nil) (get_term_from_args def-decl "term" term_properties nil) (number nonempty-type-decl nil numbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (character type-decl nil character_adt nil) (boolean nonempty-type-decl nil booleans nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil) (f_symbol type-eq-decl nil term_properties nil) (ac_symbol type-eq-decl nil term_properties nil) (term type-decl nil term_adt nil) (list type-decl nil list_adt nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (args type-eq-decl nil term_properties nil) (int nonempty-type-eq-decl nil integers nil) (constant type-eq-decl nil term_properties nil) (variable type-eq-decl nil term_properties nil) (string type-eq-decl nil strings nil) (get_ac_from_args_gt1 const-decl "term" aux_unification nil) (dio_matrix type-eq-decl nil diophantine nil) (get_pre_new_args def-decl "[list[args], list[variable]]" aux_unification nil) (get_repeat_lst def-decl "list[T]" list_theory nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (length def-decl "nat" list_props nil) (member_rhs_pareate formula-decl nil unification nil)) shostak))("list" list_theory count_elem_mem_nth_aux_TCC1 0 (count_elem_mem_nth_aux_TCC1-1 nil 3847734966 ("" (subtype-tcc) nil nil) nil nil (count_elem_mem_nth_aux subtype "list_theory.j" "below[length[nat](new_coef)]")))("list" list_theory count_elem_mem_nth_aux_TCC2 0 (count_elem_mem_nth_aux_TCC2-1 nil 3847734966 ("" (subtype-tcc) nil nil) nil nil (count_elem_mem_nth_aux subtype "list_theory.j" "below[length[nat](coef)]")))("list" list_theory count_elem_mem_nth_aux_TCC3 0 (count_elem_mem_nth_aux_TCC3-1 nil 3847734966 ("" (subtype-tcc) nil nil) nil nil (count_elem_mem_nth_aux subtype "list_theory.i" "below[length[nat](new_coef)]")))("list" list_theory count_elem_mem_nth_aux 0 (count_elem_mem_nth_aux-1 nil 3847734980 ("" (measure-induct "length(lst2)" "lst2") (("1" (skolem 1 "lst2") (("1" (prop) (("1" (hide -1) (("1" (skeep) (("1" (case "member(x, lst)") (("1" (rewrite "member_nth2") (("1" (skolem -1 "j") (("1" (inst 1 "j") (("1" (prop) (("1" (typepred "j") (("1" (propax) nil nil)) nil) ("2" (replace -1 :dir rl) (("2" (typepred "equal?") (("2" (expand "equivalence?" -1) (("2" (flatten) (("2" (expand "reflexive?" -1) (("2" (inst -1 "x") nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "count_elem" 1) (("3" (lift-if) (("3" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (split 2) (("1" (prop) (("1" (hide 3) (("1" (reveal -1) (("1" (name-replace "n" "pos?(car(lst2), lst, equal?)`2") (("1" (inst -1 "cdr(lst2)") (("1" (prop) (("1" (inst?) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (postpone) nil nil)) nil)) nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil) nil shostak))("list" list_theory count_elem2_cor 0 (count_elem2_cor-1 nil 3847739799 ("" (measure-induct "length(lst)" "lst") (("" (skolem 1 "lst") (("" (prop) (("" (skeep) (("" (lemma "equal_lst_nth") (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("list" list_theory count_elem_mem_nth_TCC1 0 (count_elem_mem_nth_TCC1-1 nil 3847734966 ("" (subtype-tcc) nil nil) nil nil (count_elem_mem_nth subtype "list_theory.i" "below[length[nat](new_coef)]")))("list" list_theory count_elem_nth_lt_TCC1 0 (count_elem_nth_lt_TCC1-1 nil 3847782567 ("" (subtype-tcc) nil nil) nil nil (count_elem_nth_lt subtype "list_theory.n" "below[length[T](new_lst)]")))("list" list_theory count_elem_nth_lt_TCC2 0 (count_elem_nth_lt_TCC2-1 nil 3847782567 ("" (subtype-tcc) nil nil) nil nil (count_elem_nth_lt subtype "list_theory.n" "below[length[nat](new_coef)]")))("list" list_theory count_elem_nth_lt_TCC3 0 (count_elem_nth_lt_TCC3-1 nil 3847782567 ("" (subtype-tcc) nil nil) nil nil (count_elem_nth_lt subtype "list_theory.n" "below[length[nat](coef)]")))("list" list_theory count_elem_nth_lt 0 (count_elem_nth_lt-1 nil 3847782788 ("" (measure-induct "length(lst2)" "lst2") (("1" (skolem 1 "lst2") (("1" (prop) (("1" (skeep) (("1" (name-replace "new_lst" "count_elem(lst, coef, lst2, equal?)`1") (("1" (name-replace "new_coef" "count_elem(lst, coef, lst2, equal?)`2") (("1" (name-replace "x" "nth(new_lst, n)") (("1" (reveal -2 -3) (("1" (expand "count_elem" -1) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (grind) (("1" (expand "x" 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split -1) (("1" (flatten) (("1" (name-replace "i" "pos?(car(lst2), lst, equal?)`2") (("1" (reveal -1) (("1" (expand "count_elem" -4) (("1" (assert) (("1" (replace -1) (("1" (inst -5 "cdr(lst2)") (("1" (assert) (("1" (split -5) (("1" (inst?) (("1" (replace -4) (("1" (replace -5) (("1" (reveal -4) (("1" (assert) (("1" (inst -2 "n") (("1" (replace -1) (("1" (assert) (("1" (split -2) (("1" (flatten) (("1" (assert) (("1" (use "increment_nth") (("1" (assert) (("1" (split) (("1" (flatten) (("1" (replace -2) (("1" (expand "count" 2) (("1" (lift-if) (("1" (assert) (("1" (prop) (("1" (lemma "pos?_cor") (("1" (inst -1 "equal?" "lst" "car(lst2)") (("1" (assert) (("1" (replace -7) (("1" (replace -2) (("1" (replace -4) (("1" (typepred "equal?") (("1" (expand "equivalence?" -1) (("1" (flatten) (("1" (expand "symmetric?" -2) (("1" (inst -2 "car(lst2)" "nth(lst, n)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (expand "count" 3) (("2" (lift-if) (("2" (assert) (("2" (prop) (("2" (lemma "pos?_cor") (("2" (inst -1 "equal?" "lst" "car(lst2)") (("2" (assert) (("2" (replace -7) (("2" (typepred "equal?") (("2" (expand "equivalence?" -1) (("2" (flatten) (("2" (expand "transitive?" -3) (("2" (inst -3 "x" "car(lst2)" "nth(lst, i)") (("2" (assert) (("2" (expand "dif_elem?" -16) (("2" (inst -16 "i" "n") (("2" (assert) (("2" (replace -7 -3) (("2" (expand "symmetric?" -2) (("2" (inst -2 "nth(lst, n)" "nth(lst, i)") (("2" (assert) (("2" (use "pos?_len") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "increment_len") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst -3 "cdr(lst2)") (("2" (split -3) (("1" (inst?) (("1" (replace -2) (("1" (expand "count_elem" -3 1) (("1" (assert) (("1" (replace -3) (("1" (inst -1 "n") (("1" (split -1) (("1" (flatten) (("1" (rewrite "nth_append" -1) (("1" (expand "x" 3 1) (("1" (assert) (("1" (lemma "nth_append") (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil) nil shostak))("list" list_theory count_elem_nth_gt_remove_TCC1 0 (count_elem_nth_gt_remove_TCC1-1 nil 3847782567 ("" (subtype-tcc) nil nil) nil nil (count_elem_nth_gt_remove subtype "list_theory.n" "below[length[T](new_lst1)]")))("list" list_theory count_elem_nth_gt_remove_TCC2 0 (count_elem_nth_gt_remove_TCC2-1 nil 3847782567 ("" (subtype-tcc) nil nil) nil nil (count_elem_nth_gt_remove subtype "list_theory.n" "below[length[nat](new_coef)]")))("list" list_theory count_elem_nth_gt_remove_TCC3 0 (count_elem_nth_gt_remove_TCC3-1 nil 3847782567 ("" (subtype-tcc) nil nil) nil nil (count_elem_nth_gt_remove subtype "list_theory.n" "below[length[nat](new_coef1)]")))("list" more_list_theory_props count_elem_append 0 (count_elem_append-1 nil 3847876028 ("" (measure-induct "length(lst2)" "lst2") (("" (skolem 1 "lst2") (("" (prop) (("" (skeep) (("" (expand "count_elem" 2 1) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (expand "count_elem" 1 2) (("1" (assert) (("1" (expand "count_elem" 1) (("1" (rewrite "append_null") (("1" (rewrite "append_null") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (hide 1) (("1" (rewrite "pos?_mem2") (("1" (skolem -1 "y") (("1" (inst 2 "y" "car(lst2)") (("1" (assert) (("1" (flatten) (("1" (assert) (("1" (expand "member" 2 1) (("1" (typepred "equal?") (("1" (expand "equivalence?" -1) (("1" (flatten) (("1" (expand "symmetric?" -2) (("1" (inst -2 "car(lst2)" "y") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (expand "count_elem" 1 2) (("1" (lift-if) (("1" (assert) (("1" (split) (("1" (flatten) (("1" (hide-all-but -1) (("1" (grind) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "append" 2 4) (("2" (expand "append" 2 4) (("2" (inst -1 "cdr(lst2)") (("2" (prop) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("list" list_theory remove_lst_elem_count_elem 0 (remove_lst_elem_count_elem-2 nil 3847887467 ("" (measure-induct "length(lst2)" "lst2") (("" (skolem 1 "lst2") (("" (prop) (("" (skeep) (("" (expand "count_elem" 1 1) (("" (lift-if) (("" (split) (("1" (grind) nil nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (expand "remove" 1) (("1" (assert) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (inst -3 "cdr(lst2)") (("1" (split -3) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide 2) (("2" (rewrite "pos?_mem2") (("2" (assert) (("2" (skeep) (("2" (inst 1 "y") (("2" (assert) (("2" (typepred "equal?") (("2" (expand "equivalence?" -1) (("2" (flatten) (("2" (expand "symmetric?" -2) (("2" (inst -2 "car(lst2)" "y") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst -1 "cdr(lst2)") (("2" (prop) (("1" (inst?) (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "length_append") (("1" (assert) (("1" (expand "length" 2 1) (("1" (expand "length" 2 2) (("1" (expand "remove" 2 2) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (skeep) (("1" (rewrite "pos?_mem2") (("1" (inst 2 "x") (("1" (assert) (("1" (rewrite "remove_lst_elem_append") (("1" (typepred "equal?") (("1" (expand "equivalence?" -1) (("1" (flatten) (("1" (expand "symmetric?" -2) (("1" (inst -2 "x" "car(lst2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil) (remove_lst_elem_count_elem-1 nil 3847887298 ("" (measure-induct "length(lst)" "lst") (("" (skolem 1 "lst") (("" (prop) (("" (skeep) (("" (expand "count_elem" 1 1) (("" (lift-if) (("" (split) (("1" (grind) nil nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (expand "remove" 1) (("1" (assert) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (inst -3 "cdr(lst2)") (("1" (split -3) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("list" more_list_theory_props count_elem_nth_gt_TCC1 0 (count_elem_nth_gt_TCC1-1 nil 3847887268 ("" (subtype-tcc) nil nil) nil nil (count_elem_nth_gt subtype "(number_fields.-)(more_list_theory_props.n, list_props[more_list_theory_props.T].length(more_list_theory_props.lst))" "below[length[T](remove[T](lst2, lst, equal?))]")))("list" more_list_theory_props count_elem_nth_gt_TCC2 0 (count_elem_nth_gt_TCC2-1 nil 3847887268 ("" (subtype-tcc) nil nil) nil nil (count_elem_nth_gt subtype "more_list_theory_props.n" "below[length[nat](new_coef)]")))("list" list_theory remove_elem_count 0 (remove_elem_count-1 nil 3847975990 ("" (measure-induct "length(lst)" "lst") (("" (skolem 1 "lst") (("" (prop) (("" (skeep) (("" (expand "remove" 2 1) (("" (lift-if) (("" (prop) (("1" (grind) nil nil) ("2" (expand "count" 1 2) (("2" (lift-if) (("2" (prop) (("1" (skolem -2 "x1") (("1" (prop) (("1" (rewrite "pos?_mem2") (("1" (inst 4 "x1") (("1" (assert) (("1" (typepred "equal?") (("1" (hide -5 1) (("1" (expand "equivalence?" -1) (("1" (flatten) (("1" (expand "symmetric?" -2) (("1" (inst -2 "x1" "car(lst)") (("1" (assert) (("1" (expand "transitive?" -3) (("1" (inst -3 "x" "car(lst)" "x1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -2 "cdr(lst)") (("2" (prop) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "count" 2 1) (("3" (lift-if) (("3" (prop) (("1" (expand "count" 1 2) (("1" (assert) (("1" (inst -2 "cdr(lst)") (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (expand "count" 2 2) (("2" (lift-if) (("2" (assert) (("2" (inst -1 "cdr(lst)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (pos?_mem2 formula-decl nil list_theory nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil nil (= const-decl "[T, T -> boolean]" equalities nil) (pos? def-decl "[bool, nat]" list_theory nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (equiv type-eq-decl nil list_theory nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (wf_nat formula-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (T formal-type-decl nil list_theory nil) (measure_induction formula-decl nil measure_induction nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil)) shostak))("list" list_theory count_elem2_num_dif 0 (count_elem2_num_dif-1 nil 3847978381 ("" (measure-induct "length(lst)" "lst") (("" (skolem 1 "lst") (("" (prop) (("" (skeep) (("" (expand "count_elem2" 1) (("" (lift-if) (("" (assert) (("" (prop) (("1" (grind) nil nil) ("2" (expand "length" 2 1) (("2" (expand "num_dif" 2 1) (("2" (lift-if) (("2" (assert) (("2" (inst -1 "remove(lst, car(lst), equal?)") (("2" (prop) (("1" (grind) nil nil) ("2" (hide 3) (("2" (expand "remove" 1) (("2" (lift-if) (("2" (prop) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("list" more_list_theory_props count_elem2_cor1 0 (count_elem2_cor1-1 nil 3847983873 ("" (skeep) (("" (use "count_elem2_cor") (("" (grind) nil nil)) nil)) nil) ((count_elem2_cor formula-decl nil more_list_theory_props nil) (list type-decl nil list_adt nil) (equiv type-eq-decl nil more_list_theory_props nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil more_list_theory_props nil)) shostak))("list" more_list_theory_props count_elem2_mem2 0 (count_elem2_mem2-1 nil 3848174167 ("" (skeep) (("" (prop) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil) nil shostak))("equality" equality no_common_args?_TCC1 0 (no_common_args?_TCC1-1 nil 3844432073 ("" (subtype-tcc) nil nil) nil nil (no_common_args? subtype "equality.equal?" "equiv[term[constant, variable, f_symbol, ac_symbol]]")))("equality" equality perm_args_ac_not_pair 0 (perm_args_ac_not_pair-1 nil 3846166846 ("" (skeep) (("" (case "is_ac_sym?(t, f)") (("1" (case "is_ac_sym?(s, f)") (("1" (lemma "perm_args_ac") (("1" (inst -1 "s" "f" "t") (("1" (assert) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -4) (("2" (lemma "get_args_not_pair_ac") (("2" (inst -1 "f" "s") (("2" (assert) (("2" (replace -1) (("2" (lemma "perm?_len") (("2" (inst?) (("2" (assert) (("2" (rewrite "get_args_len") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2) (("2" (case "is_ac_sym?(s, f)") (("1" (lemma "get_args_not_pair_ac") (("1" (inst -1 "f" "t") (("1" (assert) (("1" (lemma "perm?_len") (("1" (inst?) (("1" (assert) (("1" (replace -2 -1) (("1" (rewrite "get_args_len") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "get_args_not_pair_ac") (("2" (inst -1 "f" "t") (("2" (assert) (("2" (hide -3) (("2" (lemma "get_args_not_pair_ac") (("2" (inst -1 "f" "s") (("2" (assert) (("2" (replace -1) (("2" (replace -2) (("2" (hide -1 -2) (("2" (expand "perm?" -1) (("2" (skeep) (("2" (typepred "i" "j") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((is_ac_sym? const-decl "bool" term_properties nil) (string type-eq-decl nil strings nil) (variable type-eq-decl nil term_properties nil) (constant type-eq-decl nil term_properties nil) (int nonempty-type-eq-decl nil integers nil) (TRUE const-decl "bool" booleans nil) (>= const-decl "bool" reals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (term type-decl nil term_adt nil) (ac_symbol type-eq-decl nil term_properties nil) (f_symbol type-eq-decl nil term_properties nil) (char type-eq-decl nil strings nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (boolean nonempty-type-decl nil booleans nil) (character type-decl nil character_adt nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (get_args_not_pair_ac formula-decl nil term_properties nil) (perm?_len formula-decl nil equality nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (from_min2max def-decl "list[nat]" list_theory nil) (select def-decl "term" term_properties nil) (perm? def-decl "bool" equality nil) (get_args_len formula-decl nil term_properties nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (args type-eq-decl nil term_properties nil) (list type-decl nil list_adt nil) (perm_args_ac formula-decl nil equality nil) (num_arg def-decl "nat" term_properties nil) (are_ac? const-decl "bool" term_properties nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (delete def-decl "term" term_properties nil) (nth def-decl "T" list_props nil) (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil) (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil)) shostak))("equality" equality no_pair_ac_count_elem 0 (no_pair_ac_count_elem-1 nil 3849014000 ("" (skeep) (("" (iff) (("" (prop) (("1" (expand "no_pair_ac?" -1) (("1" (expand "no_pair_ac?" 1) (("1" (skeep) (("1" (use "count_elem2_mem2") (("1" (assert) (("1" (skolem -1 "t1") (("1" (prop) (("1" (inst -4 "t1") (("1" (grind) nil nil)) nil) ("2" (inst -4 "t1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "equal?_equiv") nil nil)) nil)) nil)) nil)) nil) ("2" (expand "no_pair_ac?" 1) (("2" (skeep) (("2" (expand "no_pair_ac?" -1) (("2" (inst -1 "t") (("2" (assert) (("2" (split -1) (("1" (propax) nil nil) ("2" (use "count_elem2_mem") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count_elem2_mem formula-decl nil more_list_theory_props nil) (no_pair_ac? const-decl "bool" term_properties nil) (equal?_equiv formula-decl nil equality nil) (is_ac_sym? const-decl "bool" term_properties nil) (num_arg def-decl "nat" term_properties nil) (select def-decl "term" term_properties nil) (delete def-decl "term" term_properties nil) (equivalence? const-decl "bool" relations nil) (equal? def-decl "bool" equality nil) (equiv type-eq-decl nil more_list_theory_props nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (args type-eq-decl nil term_properties nil) (variable type-eq-decl nil term_properties nil) (constant type-eq-decl nil term_properties nil) (int nonempty-type-eq-decl nil integers nil) (TRUE const-decl "bool" booleans nil) (>= const-decl "bool" reals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" term_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (term type-decl nil term_adt nil) (ac_symbol type-eq-decl nil term_properties nil) (f_symbol type-eq-decl nil term_properties nil) (char type-eq-decl nil strings nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (boolean nonempty-type-decl nil booleans nil) (character type-decl nil character_adt nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (count_elem2_mem2 formula-decl nil more_list_theory_props nil)) shostak))("aux_unification" aux_unification dio_matrix2ac_mem_len 0 (dio_matrix2ac_mem_len-1 nil 3849022680 ("" (skeep) (("" (assert) (("" (expand "dio_matrix2ac_sol" 1) (("" (use "pareate_len2[term]") (("" (assert) (("" (hide 2) (("" (rewrite "map_length") (("" (rewrite "get_pre_new_args_len") (("" (rewrite "get_repeat_lst_len") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pareate_len2 formula-decl nil list_theory nil) (number nonempty-type-decl nil numbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (character type-decl nil character_adt nil) (boolean nonempty-type-decl nil booleans nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil) (f_symbol type-eq-decl nil term_properties nil) (ac_symbol type-eq-decl nil term_properties nil) (term type-decl nil term_adt nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" term_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (int nonempty-type-eq-decl nil integers nil) (constant type-eq-decl nil term_properties nil) (variable type-eq-decl nil term_properties nil) (length def-decl "nat" list_props nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (get_repeat_lst def-decl "list[T]" list_theory nil) (get_pre_new_args def-decl "[list[args], list[variable]]" aux_unification nil) (dio_matrix type-eq-decl nil diophantine nil) (get_ac_from_args_gt1 const-decl "term" aux_unification nil) (string type-eq-decl nil strings nil) (map adt-def-decl "list[T1]" list_adt_map nil) (args type-eq-decl nil term_properties nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (get_pre_new_args_len formula-decl nil aux_unification nil) (get_repeat_lst_len formula-decl nil list_theory nil) (map_length formula-decl nil more_map_props nil) (dio_matrix2ac_sol const-decl "ac_sol" aux_unification nil)) shostak))("equality" equality count_vec_count_coef 0 (count_vec_count_coef-1 nil 3849282563 ("" (measure-induct "length(args1)" "args1") (("1" (skolem 1 "args1") (("1" (prop) (("1" (skeep) (("1" (expand "count_coef" 1) (("1" (lift-if) (("1" (prop) (("1" (grind) nil nil) ("2" (expand "count_vec" 2) (("2" (assert) (("2" (decompose-equality 2) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil) nil shostak))("aux_unification" aux_unification get_pre_new_args_nth_TCC1 0 (get_pre_new_args_nth_TCC1-1 nil 3849370298 ("" (subtype-tcc) nil nil) nil nil (get_pre_new_args_nth subtype "aux_unification.i" "below[length[args](get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1)]")))("aux_unification" aux_unification construct_sub_aux_count_TCC1 0 (construct_sub_aux_count_TCC1-1 nil 3849544389 ("" (subtype-tcc) nil nil) nil nil (construct_sub_aux_count subtype "aux_unification.i" "below[length[nat](col)]")))("aux_unification" aux_unification construct_sub_aux_count 0 (construct_sub_aux_count-1 nil 3849544491 ("" (skeep) (("" (expand "count" 2) (("" (use "get_ac_from_args_gt1_get_args2") (("" (prop) (("1" (replace -1) (("1" (hide -1) (("1" (postpone) nil nil)) nil)) nil) ("2" (use "construct_sub_aux_not_null") (("2" (assert) nil nil)) nil) ("3" (expand "no_pair_ac?" 1) (("3" (skeep) (("3" (use "construct_sub_aux_mem") (("3" (assert) (("3" (expand "no_pair_ac?" -5) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("aux_unification" aux_unification countruct_sub_aux_count_TCC1 0 (countruct_sub_aux_count_TCC1-1 nil 3849544804 ("" (subtype-tcc) nil nil) nil nil (countruct_sub_aux_count subtype "aux_unification.i" "below[length[nat](col)]")))("aux_unification" aux_unification countruct_sub_aux_count 0 (countruct_sub_aux_count-1 nil 3849544876 ("" (measure-induct "length(args)" "args") (("1" (skolem 1 "args") (("1" (prop) (("1" (skeep) (("1" (expand "construct_sub_aux" 1) (("1" (lift-if) (("1" (split 1) (("1" (flatten) (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "count_append" 3) (("2" (use "get_repeat_lst_count[term]") (("2" (assert) (("2" (hide -2) (("2" (prop) (("1" (replace -2) (("1" (expand "dif_elem?" -5) (("1" (inst -5 "i" "0") (("1" (assert) (("1" (expand "nth" -5 2) (("1" (replace -5) (("1" (expand "nth" 3) (("1" (rewrite "count0_eq" :dir rl) (("1" (skolem -3 "ti") (("1" (prop) (("1" (hide -2 -1) (("1" (use "construct_sub_aux_mem") (("1" (assert) (("1" (rewrite "member_nth2") (("1" (skolem -1 "n") (("1" (reveal -4) (("1" (inst -1 "0" "n+1") (("1" (expand "nth" -1) (("1" (assert) (("1" (typepred "n") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1) (("2" (assert) (("2" (expand "nth" 4 1) (("2" (lift-if) (("2" (prop) (("1" (replace -1) (("1" (expand "nth" 2) (("1" (use "equal?_ref") nil nil)) nil)) nil) ("2" (hide 3) (("2" (expand "nth" 2 2) (("2" (lift-if) (("2" (assert) (("2" (reveal -2) (("2" (inst -1 "cdr(args)") (("2" (prop) (("1" (inst -1 "cdr(col)" "i-1") (("1" (assert) (("1" (hide 3) (("1" (expand "length" -1) (("1" (assert) (("1" (expand "length" -2) (("1" (assert) (("1" (hide -1 -2) (("1" (expand "dif_elem?" 1) (("1" (skolem 1 ("n1" "n2")) (("1" (expand "dif_elem?" -1) (("1" (inst -1 "n1 + 1" "n2+1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (assert) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skeep) (("3" (use "equal?_equiv") nil nil)) nil)) nil) ("4" (hide 2) (("4" (skeep) (("4" (use "equal?_equiv") nil nil)) nil)) nil)) nil) ((equal?_equiv formula-decl nil equality nil) (get_repeat_lst_count formula-decl nil list_theory nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (equal?_ref formula-decl nil equality nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (member_nth2 formula-decl nil list_theory nil) (construct_sub_aux_mem formula-decl nil aux_unification nil) (count0_eq formula-decl nil list_theory nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (count_append formula-decl nil list_theory nil) (get_repeat_lst def-decl "list[T]" list_theory nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (construct_sub_aux def-decl "args" aux_unification nil) (nth def-decl "T" list_props nil) nil (equiv type-eq-decl nil list_theory nil) nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (equivalence? const-decl "bool" relations nil) nil (wf_nat formula-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (variable type-eq-decl nil term_properties nil) (constant type-eq-decl nil term_properties nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (args type-eq-decl nil term_properties nil) (TRUE const-decl "bool" booleans nil) (>= const-decl "bool" reals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (list type-decl nil list_adt nil) (term type-decl nil term_adt nil) (ac_symbol type-eq-decl nil term_properties nil) (f_symbol type-eq-decl nil term_properties nil) (char type-eq-decl nil strings nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (boolean nonempty-type-decl nil booleans nil) (character type-decl nil character_adt nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (measure_induction formula-decl nil measure_induction nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil)) shostak))("equality" equality remove_common_get_args 0 (remove_common_get_args-1 nil 3849797545 ("" (skeep) (("" (assert) (("" (name-replace "t1" "remove_common(t, s, f)`1") (("" (name-replace "s1" "remove_common(t, s, f)`2") (("" (lemma "remove_common_no_common") (("" (inst -1 "get_args(f)(t1)" "get_args(f)(s1)") (("" (prop) (("1" (replace -1) (("1" (hide -1) (("1" (expand "t1" 2) (("1" (expand "remove_common" 2 1) (("1" (use "get_args_get_ac_from_args2") (("1" (assert) (("1" (hide 3) (("1" (prop) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("substitution" substitution equal_subs_remove_common 0 (equal_subs_remove_common-1 nil 3849804094 ("" (skeep) (("" (assert) (("" (prop) (("" (name-replace "t1" "remove_common(t, s, f)`1") (("" (name-replace "s1" "remove_common(t, s, f)`2") (("" (lemma "perm_args_ac") (("" (inst -1 "subs(delta)(s1)" "f" "subs(delta)(t1)") (("" (assert) (("" (hide 2) (("" (prop) (("1" (lemma "ac_perm_args2") (("1" (inst -1 "f" "subs(delta)(s)" "subs(delta)(t)") (("1" (assert) (("1" (hide -2) (("1" (use "args_subs_ac") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "subs_map") (("1" (use "args_subs_ac") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "subs_map") (("1" (use "args_subs_ac") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "subs_map") (("1" (expand "t1" 1) (("1" (expand "remove_common" 1) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("unification" unification remove_common_well_formed 0 (remove_common_well_formed-1 nil 3849879867 ("" (skeep) (("" (assert) (("" (prop) (("" (expand "well_formed?" 2) (("" (skolem 2 "t2") (("" (prop) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))