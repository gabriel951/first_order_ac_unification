(term)
(term_properties
 (size_TCC1 0
  (size_TCC1-1 nil 3805199221 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (size subtype "term_properties.t"
         "pair[constant, variable, f_symbol, ac_symbol]")))
 (size_TCC2 0
  (size_TCC2-1 nil 3805199221 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (size termination
         "term_properties.size(term_adt[constant, variable, f_symbol, ac_symbol].term1(term_properties.t))"
         "nil")))
 (size_TCC3 0
  (size_TCC3-1 nil 3805199221 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (size termination
         "term_properties.size(term_adt[constant, variable, f_symbol, ac_symbol].term2(term_properties.t))"
         "nil")))
 (size_TCC4 0
  (size_TCC4-1 nil 3805199221 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (size termination "term_properties.size(term_properties.arg)"
         "nil")))
 (size_TCC5 0
  (size_TCC5-1 nil 3805199221 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (size termination "term_properties.size(term_properties.arg)"
         "nil")))
 (size_TCC6 0
  (size_TCC6-1 nil 3807619491 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (size subtype "term_properties.args"
         "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (size_TCC7 0
  (size_TCC7-1 nil 3807619491 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (size termination
         "term_properties.size(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
         "nil")))
 (size_TCC8 0
  (size_TCC8-1 nil 3807619491 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (size subtype "term_properties.args"
         "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (num_arg_TCC1 0
  (num_arg_TCC1-1 nil 3805199221 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (num_arg termination
    "term_properties.num_arg(term_properties.sym, term_adt[constant, variable, f_symbol, ac_symbol].term1(term_properties.t))"
    "nil")))
 (num_arg_TCC2 0
  (num_arg_TCC2-1 nil 3805199221 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (num_arg termination
    "term_properties.num_arg(term_properties.sym, term_adt[constant, variable, f_symbol, ac_symbol].term2(term_properties.t))"
    "nil")))
 (num_arg_TCC3 0
  (num_arg_TCC3-1 nil 3805199221 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (num_arg termination
    "term_properties.num_arg(term_properties.sym, term_adt[constant, variable, f_symbol, ac_symbol].ac_arg(term_properties.t))"
    "nil")))
 (select_TCC1 0
  (select_TCC1-1 nil 3805989807 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (select subtype
    "(number_fields.-)(term_properties.n, term_properties.n1)" "nat")))
 (delete_TCC1 0
  (delete_TCC1-1 nil 3819387232 ("" (subtype-tcc) nil nil) nil shostak
   (delete subtype
           "term_properties.delete(term_properties.sym, term_adt[constant, variable, f_symbol, ac_symbol].ac_arg(term_properties.t))(term_properties.n)"
     "pair[constant, variable, f_symbol, ac_symbol]")))
 (delete_TCC2 0
  (delete_TCC1-1 nil 3807528173 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (delete subtype "(number_fields.-)(term_properties.i, 1)" "nat")))
 (delete_TCC3 0
  (delete_TCC2-1 nil 3807528173 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (delete termination
           "term_properties.delete(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args), term_properties.f, (number_fields.-)(term_properties.i, 1), term_properties.j)"
     "nil")))
 (nice_ind?_TCC1 0
  (nice_ind?_TCC1-1 nil 3806608110 ("" (tcc)) nil nil
   (nice_ind? subtype "term_properties.lst_nat"
    "(list_adt[nat].cons?)")))
 (nice_ind?_TCC2 0
  (nice_ind?_TCC2-1 nil 3806608110 ("" (tcc)) nil nil
   (nice_ind? termination
    "term_properties.nice_ind?(list_adt[nat].cdr(term_properties.lst_nat), term_properties.n)"
    "nil")))
 (get_term_from_args_TCC1 0
  (get_term_from_args_TCC1-1 nil 3804712586 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (get_term_from_args termination
    "term_properties.get_term_from_args(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
    "nil")))
 (get_ac_from_args_TCC1 0
  (get_ac_from_args_TCC1-1 nil 3819387232 ("" (subtype-tcc) nil nil)
   nil shostak
   (get_ac_from_args subtype
    "term_properties.get_term_from_args(term_properties.args)"
    "pair[constant, variable, f_symbol, string]")))
 (all_var?_TCC1 0
  (all_var?_TCC1-1 nil 3809109930 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (all_var? termination
    "term_properties.all_var?(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
    "nil")))
 (all_var?_TCC2 0
  (all_var?_TCC2-1 nil 3809109930 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (all_var? subtype "term_properties.lst_args"
    "(list_adt[args].cons?)")))
 (all_var?_TCC3 0
  (all_var?_TCC3-1 nil 3809109930 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (all_var? termination
    "term_properties.all_var?(list_adt[args].cdr(term_properties.lst_args))"
    "nil")))
 (size_ge1 0
  (size_ge1-1 nil 3806329573
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((term_induction formula-decl nil term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (num_arg_ge1 0
  (num_arg_ge1-1 nil 3805992135
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("x"))
      (("" (prop)
        (("" (skeep)
          (("" (expand "num_arg" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (inst -2 "term1(x)") (("1" (grind) nil nil)) nil)
                 ("2" (inst -3 "ac_arg(x)") (("2" (grind) nil nil))
                  nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (num_arg_ge1_type_t 0
  (num_arg_ge1_type_t-1 nil 3806331029 ("" (grind) nil nil)
   ((term type-decl nil term_adt nil)) SHOSTAK))
 (num_arg_not_pair_ac 0
  (num_arg_not_pair_ac-1 nil 3807114091 ("" (grind) nil nil)
   ((term type-decl nil term_adt nil)) SHOSTAK))
 (select_num_arg 0
  (select_num_arg-1 nil 3806358731
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "select" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (inst -3 "term1(t)")
                  (("1" (prop)
                    (("1" (inst -1 "f" "i") nil nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (inst -2 "term2(t)")
                  (("2" (prop)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("3" (inst -3 "ac_arg(t)")
                  (("3" (prop)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("4" (lemma "num_arg_ge1_type_t")
                  (("4" (inst? -1)
                    (("4" (lemma "num_arg_ge1")
                      (("4" (inst? -1) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "num_arg" 2) (("5" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (select_le1 0
  (select_le1-1 nil 3806225634
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "select" 1 2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "select" 1 1)
                  (("1" (assert)
                    (("1" (inst -3 "term1(t)")
                      (("1" (prop)
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (lemma "num_arg_ge1")
                    (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (expand "select" 1 1)
                  (("3" (assert)
                    (("3" (inst -3 "ac_arg(t)")
                      (("3" (prop)
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "select" 2 1) (("4" (assert) nil nil))
                  nil)
                 ("5" (expand "select" 2 1) (("5" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (select_ge_num_arg 0
  (select_ge_num_arg-1 nil 3806335778
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (name-replace "n1" "num_arg(f, t)")
            (("" (expand "select" 1 1)
              (("" (lift-if)
                (("" (assert)
                  (("" (prop)
                    (("1" (hide -3 1)
                      (("1" (expand "n1" -3)
                        (("1" (expand "num_arg" -3)
                          (("1" (assert)
                            (("1" (lemma "num_arg_ge1")
                              (("1"
                                (inst -1 "f" "term2(t)")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 1)
                      (("2" (expand "select" 1 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (hide -3 -4 1)
                                (("1"
                                  (expand "n1")
                                  (("1"
                                    (expand "num_arg" -1 1)
                                    (("1"
                                      (lemma "num_arg_ge1")
                                      (("1"
                                        (inst -1 "f" "term2(t)")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -2 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "f"
                                     "i - num_arg(f, term1(t))")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "n1" 2)
                                        (("1"
                                          (expand "num_arg" 2 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (expand "n1")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (expand "n1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "select" 1 2)
                      (("3" (assert)
                        (("3" (inst -3 "ac_arg(t)")
                          (("3" (prop)
                            (("1" (inst -1 "f" "i")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "n1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "select" 2) (("4" (assert) nil nil))
                      nil)
                     ("5" (expand "select" 2) (("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (select_size 0
  (select_size-1 nil 3806249615
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "select" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (inst -3 "term1(t)")
                  (("1" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (inst -2 "term2(t)")
                  (("2" (prop)
                    (("1" (inst? -1)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (inst -3 "ac_arg(t)")
                  (("3" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("4" (assert) nil nil) ("5" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (ac_select_size 0
  (ac_select_size-1 nil 3806248957
   ("" (skeep)
    (("" (expand "is_ac_sym?" -1)
      (("" (expand "select" 1)
        (("" (assert)
          (("" (lift-if)
            (("" (assert)
              (("" (flatten)
                (("" (assert)
                  (("" (lemma "select_size")
                    (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil))
   SHOSTAK))
 (delete_size 0
  (delete_size-1 nil 3806329054
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -3 "term1(t)")
                  (("2" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (inst -2 "term2(t)")
                  (("4" (prop)
                    (("1" (inst? -1)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (inst -3 "ac_arg(t)")
                  (("6" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (lemma "size_ge1") (("7" (grind) nil nil)) nil)
                 ("8" (lemma "size_ge1") (("8" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (num_arg_delete 0
  (num_arg_delete-1 nil 3806348316
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "num_arg" 2 1)
                  (("4" (expand "num_arg" 2 4)
                    (("4" (assert)
                      (("4" (inst -2 "term2(t)")
                        (("4" (prop)
                          (("1" (inst -1 "f" "n-num_arg(f, term1(t))")
                            (("1" (assert) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "num_arg" 2 2)
                  (("6" (lift-if)
                    (("6" (assert)
                      (("6" (expand "num_arg" 2 1)
                        (("6" (inst -3 "ac_arg(t)")
                          (("6" (prop)
                            (("1" (inst -1 "f" "n") nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (lemma "num_arg_ge1") (("7" (grind) nil nil))
                  nil)
                 ("8" (lemma "num_arg_ge1") (("8" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (num_arg_delete_ge1 0
  (num_arg_delete_ge1-1 nil 3806350748
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -3 "term1(t)")
                  (("2" (prop)
                    (("1" (inst -1 "f" "n")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (inst -2 "term2(t)")
                  (("4" (prop)
                    (("1" (inst -1 "f" "n - num_arg(f, term1(t))")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (inst -3 "ac_arg(t)")
                  (("6" (prop)
                    (("1" (inst -1 "f" "n") (("1" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (num_arg_delete_size 0
  (num_arg_delete_size-1 nil 3806330795
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "size" 1 2) (("1" (assert) nil nil)) nil)
                 ("2" (inst -3 "term1(t)")
                  (("2" (prop)
                    (("1" (inst? -1)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (inst -2 "term2(t)")
                  (("4" (prop)
                    (("1" (inst? -1)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (hide -2 -3 -4 1 2) (("5" (grind) nil nil)) nil)
                 ("6" (inst -3 "ac_arg(t)")
                  (("6" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (lemma "num_arg_ge1_type_t")
                  (("7" (inst? -1)
                    (("7" (assert) (("7" (grind) nil nil)) nil)) nil))
                  nil)
                 ("8" (lemma "num_arg_ge1_type_t")
                  (("8" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (num_arg1_delete 0
  (num_arg1_delete-1 nil 3806360892
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (hide -2 1)
                    (("1" (expand "num_arg" -2)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (lemma "num_arg_ge1")
                            (("1" (inst-cp -1 "f" "term1(t)")
                              (("1"
                                (inst -1 "f" "term2(t)")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term type-decl nil term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   SHOSTAK))
 (delete_num_arg 0
  (delete_num_arg-1 nil 3806361288
   ("" (skeep) (("" (grind) nil nil)) nil) nil SHOSTAK))
 (ac_delete_size 0
  (ac_delete_size-1 nil 3806329668
   ("" (skeep)
    (("" (expand "delete" 1)
      (("" (assert)
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "size" 1 2)
              (("1" (lemma "size_ge1") (("1" (grind) nil nil)) nil))
              nil)
             ("2" (expand "size" 2 1)
              (("2" (expand "size" 2 2)
                (("2" (lemma "num_arg_delete_size")
                  (("2" (inst -1 "f" "n" "ac_arg(t)")
                    (("2" (assert)
                      (("2" (expand "num_arg" 2 1)
                        (("2" (lemma "num_arg_ge1")
                          (("2" (inst? -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "size_ge1") (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil))
   SHOSTAK))
 (delete_le1 0
  (delete_le1-1 nil 3806226223
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1 2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "delete" 1 1) (("1" (assert) nil nil))
                  nil)
                 ("2" (expand "delete" 2 1)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (inst -3 "term1(t)")
                        (("2" (prop)
                          (("1" (inst? -1) (("1" (assert) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 2)
                  (("3" (lemma "num_arg_ge1")
                    (("3" (inst? -1) (("3" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (hide-all-but 3)
                  (("4" (lemma "num_arg_ge1") (("4" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (expand "delete" 1)
                  (("5" (lift-if) (("5" (assert) nil nil)) nil)) nil)
                 ("6" (expand "delete" 2 1)
                  (("6" (assert)
                    (("6" (inst -3 "ac_arg(t)")
                      (("6" (prop)
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (expand "delete" 2 1) (("7" (assert) nil nil))
                  nil)
                 ("8" (expand "delete" 2 1) (("8" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (delete_ge_num_arg 0
  (delete_ge_num_arg-1 nil 3806336903
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -4 1)
                  (("1" (lemma "num_arg_ge1")
                    (("1" (expand "num_arg" -5)
                      (("1" (assert)
                        (("1" (inst -1 "f" "term2(t)")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3 1 2)
                  (("2" (expand "num_arg" -3)
                    (("2" (assert)
                      (("2" (lemma "num_arg_ge1")
                        (("2" (inst -1 "f" "term2(t)")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "delete" 1)
                  (("3" (assert)
                    (("3" (lift-if)
                      (("3" (split)
                        (("1" (flatten)
                          (("1" (hide -2 -4 -5 1 2)
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "delete" 2 2)
                  (("4" (assert)
                    (("4" (lift-if)
                      (("4" (split)
                        (("1" (flatten)
                          (("1" (hide -3 -4 1 2 3)
                            (("1" (grind)
                              (("1"
                                (lemma "num_arg_ge1")
                                (("1"
                                  (inst -1 "f" "term2(t)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst -2 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst
                                 -1
                                 "f"
                                 "i - num_arg(f, term1(t))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (expand "num_arg" 2 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "num_arg" -2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "delete" 1)
                  (("5" (lift-if) (("5" (assert) nil nil)) nil)) nil)
                 ("6" (expand "delete" 2 2)
                  (("6" (assert)
                    (("6" (inst -3 "ac_arg(t)")
                      (("6" (prop)
                        (("1" (inst? -1)
                          (("1" (prop)
                            (("1" (expand "num_arg" -4)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "num_arg" 2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (expand "delete" 2) (("7" (assert) nil nil)) nil)
                 ("8" (expand "delete" 2) (("8" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (delete_ac_num_arg_gt1 0
  (delete_ac_num_arg_gt1-1 nil 3806180090
   ("" (skeep) (("" (grind) nil nil)) nil) nil SHOSTAK))
 (is_ac_sym?_delete 0
  (is_ac_sym?_delete-1 nil 3806399463 ("" (grind) nil nil)
   ((term type-decl nil term_adt nil)) SHOSTAK))
 (num_arg_select_delete 0
  (num_arg_select_delete-1 nil 3806355502
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "select" 1)
                  (("1" (assert)
                    (("1" (rewrite "select_num_arg")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst -3 "term1(t)")
                  (("2" (prop)
                    (("1" (inst -1 "f" "i")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst -1 "f" "term1(t)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (rewrite "select_num_arg")
                  (("3" (grind) nil nil)) nil)
                 ("4" (inst -2 "term2(t)")
                  (("4" (prop)
                    (("1" (inst -1 "f" "i - num_arg(f, term1(t))")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst -1 "f" "term2(t)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (inst -3 "ac_arg(t)")
                  (("6" (prop)
                    (("1" (inst -1 "f" "i")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (lemma "num_arg_ge1_type_t")
                  (("7" (inst? -1) (("7" (grind) nil nil)) nil)) nil)
                 ("8" (lemma "num_arg_ge1_type_t")
                  (("8" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (delete_size2 0
  (delete_size2-1 nil 3807619498
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("t" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "size" 1 2)
            (("2" (expand "delete" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (lemma "size_ge1")
                    (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (expand "size" 2 1)
                    (("2" (assert)
                      (("2" (lemma "num_arg_delete_size")
                        (("2" (inst? -1)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (lemma "num_arg_ge1")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "size" 2 1)
                    (("3" (inst? -1)
                      (("1" (grind) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) SHOSTAK))
 (delete_remove1 0
  (delete_remove1-1 nil 3807556284
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (prop)
                    (("1" (expand "remove" 1) (("1" (assert) nil nil))
                      nil)
                     ("2" (expand "nth" -5) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "remove" 2)
                    (("2" (assert)
                      (("2" (inst -1 "f" "i-1" "j")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (remove def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (delete_nth_len 0
  (delete_nth_len-1 nil 3807557479
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (expand "length" 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "length" 2)
                    (("2" (inst -1 "f" "i-1" "j")
                      (("1" (grind) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) SHOSTAK))
 (delete_nth_TCC1 0
  (delete_nth_TCC1-1 nil 3807556276
   ("" (skeep)
    (("" (lemma "delete_nth_len")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak
   (delete_nth subtype "term_properties.i"
    "below[length[term[constant, variable, f_symbol, ac_symbol]](delete(args, f, i, j))]")))
 (delete_nth 0
  (delete_nth-1 nil 3807556570
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" 1 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (prop)
                    (("1" (grind) nil nil)
                     ("2" (hide 1)
                      (("2" (expand "nth" 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "nth" 2 1)
                    (("2" (assert)
                      (("2" (expand "nth" 2 2)
                        (("2" (inst -1 "f" "i-1" "j")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "delete_nth_len") (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) SHOSTAK))
 (delete_remove_gt1 0
  (delete_remove_gt1-1 nil 3807558505
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (hide 1 -3) (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "remove" 2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "f" "i-1" "j")
                  (("1" (grind) nil nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (remove def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (delete_not_null 0
  (delete_not_null-1 nil 3807558733
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" -4)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) SHOSTAK))
 (gt_select_delete 0
  (gt_select_delete-1 nil 3806608350
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "delete" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "select" 1 2)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "term1(t)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 "f" "i" "n")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (case
                                         "num_arg(f, term1(t)) > 1")
                                        (("1"
                                          (lemma "num_arg_delete_ge1")
                                          (("1"
                                            (inst? -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "num_arg_ge1")
                                          (("2"
                                            (inst? -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "select" 1 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide 2)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "select" 1 2)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "select" 2 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (reveal -1)
                                          (("2"
                                            (inst -1 "term2(t)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "select" 2 2)
                                  (("2"
                                    (reveal -1)
                                    (("2"
                                      (inst -1 "ac_arg(t)")
                                      (("2"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (le_select_delete_TCC1 0
  (le_select_delete_TCC1-1 nil 3806685064
   ("" (skeep)
    (("" (lemma "num_arg_ge1")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak
   (le_select_delete subtype
    "(number_fields.-)(term_properties.num_arg(term_properties.f, term_properties.t), 1)"
    "nat")))
 (le_select_delete 0
  (le_select_delete-1 nil 3806685064
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (expand "delete" 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "select" 1 2)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1 2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "num_arg(f, term1(t)) > 1")
                              (("1"
                                (expand "select" 2 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "num_arg_delete_ge1")
                                        (("1"
                                          (expand "select" 1 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal -1)
                                              (("1"
                                                (inst -1 "term1(t)")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f"
                                                     "i"
                                                     "n")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (rewrite "num_arg_delete_ge1")
                                        (("2"
                                          (expand "select" 2 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "num_arg(f, term2(t)) > 1")
                              (("1"
                                (expand "select" 2 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "select" 2 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal -1)
                                            (("2"
                                              (inst -1 "term2(t)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "f"
                                                   "i-num_arg(f, term1(t))"
                                                   "n - num_arg(f, term1(t))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "select" 1 1)
                            (("1" (expand "select" 1 2)
                              (("1"
                                (reveal -1)
                                (("1"
                                  (inst -1 "ac_arg(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (lemma "num_arg_ge1")
        (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (gt_select_delete2_TCC1 0
  (gt_select_delete2_TCC1-1 nil 3806608110 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (gt_select_delete2 subtype "(number_fields.-)(term_properties.i, 1)"
    "nat")))
 (gt_select_delete2 0
  (gt_select_delete2-1 nil 3806613899
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "delete" 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "select" 1 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "num_arg(f, term1(t)) > 1")
                                      (("1"
                                        (lemma "num_arg_delete_ge1")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "select" 1 2)
                                                  (("1"
                                                    (reveal -2)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "term1(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "f"
                                                           "i"
                                                           "n")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "num_arg_ge1")
                                        (("2"
                                          (inst? -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case "num_arg(f, term1(t)) > 1")
                                      (("1"
                                        (lemma "num_arg_delete_ge1")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "select" 2 2)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "num_arg_ge1")
                                        (("2"
                                          (inst? -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "select" 2 2)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal -1)
                                            (("2"
                                              (inst -1 "term2(t)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "select" 2 2)
                                  (("2"
                                    (reveal -1)
                                    (("2"
                                      (inst -1 "ac_arg(t)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 3)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil))
    nil)
   ((term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (gt_delete_delete 0
  (gt_delete_delete-1 nil 3806658371
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "delete" 1 2)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "delete" 1 3)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "num_arg1_delete")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "f"
                                               "i-1"
                                               "term2(t)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f"
                                                     "n"
                                                     "term1(t)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (case
                                             "num_arg(f, term2(t)) > 1")
                                            (("1"
                                              (expand "delete" 2 2)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma "num_arg_ge1")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "num_arg(f, term1(t)) > 1")
                              (("1"
                                (expand "delete" 2 4)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "delete" 1 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "delete"
                                                       1
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     -7
                                                                     -8)
                                                                    (("1"
                                                                      (lemma
                                                                       "num_arg_delete_ge1")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "num_arg_delete_ge1")
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "num_arg_delete_ge1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "delete"
                                                       2
                                                       3)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   -8
                                                                   -9)
                                                                  (("1"
                                                                    (rewrite
                                                                     "num_arg_delete_ge1")
                                                                    (("1"
                                                                      (rewrite
                                                                       "num_arg_delete_ge1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (reveal
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "term1(t)")
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "f"
                                                                         "i"
                                                                         "n")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (rewrite
                                                                 "num_arg_delete_ge1")
                                                                (("2"
                                                                  (rewrite
                                                                   "num_arg_delete_ge1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "num_arg_delete_ge1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "delete" 1 1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (rewrite
                                                         "num_arg_delete_ge1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "delete" 2 3)
                                              (("2"
                                                (expand "delete" 2 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 1)
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "num_arg_delete_ge1"
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "num_arg(f, term2(t)) > 1")
                              (("1"
                                (expand "delete" 2 4)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "delete" 2 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "delete" 1 1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite
                                                         "num_arg_delete_ge1")
                                                        (("2"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "delete" 2 3)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (rewrite
                                                         "num_arg_delete_ge1")
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (reveal -1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "term2(t)")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "f"
                                                             "i - num_arg(f, term1(t))"
                                                             "n - num_arg(f, term1(t))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 3)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "delete" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "delete" 1 2)
                                        (("1"
                                          (expand "delete" 1 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case
                                                     "num_arg(f, ac_arg(t)) > 1")
                                                    (("1"
                                                      (expand
                                                       "num_arg"
                                                       -2)
                                                      (("1"
                                                        (expand
                                                         "num_arg"
                                                         1)
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          (("1"
                                                            (rewrite
                                                             "num_arg_delete_ge1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "num_arg"
                                                       3)
                                                      (("2"
                                                        (lemma
                                                         "num_arg_ge1")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "delete" 2 4)
                                        (("2"
                                          (expand "delete" 2 3)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (expand "num_arg")
                                                    (("1"
                                                      (case
                                                       "num_arg(f, ac_arg(t)) > 1")
                                                      (("1"
                                                        (rewrite
                                                         "num_arg_delete_ge1")
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "num_arg_ge1")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "ac_arg(t)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 3)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (get_args_len 0
  (get_args_len-1 nil 3805991637
   ("" (skeep)
    (("" (expand "get_args" 1 1)
      (("" (rewrite "map_length[nat, term]")
        (("" (rewrite "from_min2max_len1") nil nil)) nil))
      nil))
    nil)
   ((from_min2max_len1 formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil))
   SHOSTAK))
 (get_args_null 0
  (get_args_null-1 nil 3807116901
   ("" (skeep)
    (("" (lemma "get_args_len")
      (("" (inst? -1)
        (("" (lemma "num_arg_ge1")
          (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((from_min2max def-decl "list[nat]" list_theory nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (get_args_size 0
  (get_args_size-1 nil 3823957246
   ("" (skeep)
    (("" (expand "get_args" -2)
      (("" (lemma "map_member3[nat, term]")
        (("" (inst? -1)
          (("" (assert)
            (("" (assert)
              (("" (skeep)
                (("" (replace -1 1)
                  (("" (lemma "ac_select_size")
                    (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (map_member3 formula-decl nil map_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_select_size formula-decl nil term_properties nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (num_arg def-decl "nat" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (list type-decl nil list_adt nil)
    (select def-decl "term" term_properties nil)
    (string type-eq-decl nil strings nil)
    (get_args const-decl "args" term_properties nil))
   shostak))
 (get_args_ac_TCC1 0
  (get_args_ac_TCC1-1 nil 3819387232 ("" (subtype-tcc) nil nil) nil
   shostak
   (get_args_ac subtype "term_properties.t"
    "pair[constant, variable, f_symbol, string]")))
 (get_args_ac 0
  (get_args_ac-1 nil 3805746325
   ("" (skeep)
    (("" (expand "get_args")
      (("" (lemma "equal_lst_nth")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (prop)
                (("1" (lemma "map_length[nat, term]")
                  (("1" (inst? -1)
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (lemma "map_length[nat, term]")
                          (("1" (inst? -1)
                            (("1" (replace -1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "num_arg" 1 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (lemma "map_nth_rw[nat, term]")
                    (("2" (inst? -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "map_nth_rw[nat, term]")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "num_arg" 1 1)
                                    (("1"
                                      (expand "select" 1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "n")
                                  (("2"
                                    (lemma "map_length[nat, term]")
                                    (("2"
                                      (inst? -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "n")
                          (("2" (lemma "map_length[nat, term]")
                            (("2" (inst? -1)
                              (("2"
                                (replace -1 -2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, pair] -> (ac_app?)]"
     term_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (term type-decl nil term_adt nil)
    (equal_lst_nth formula-decl nil list_theory nil))
   SHOSTAK))
 (get_args_pair 0
  (get_args_pair-1 nil 3805751923
   ("" (skeep)
    (("" (lemma "equal_lst_nth")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (prop)
              (("1" (rewrite "length_append")
                (("1" (expand "get_args")
                  (("1" (lemma "map_length[nat, term]")
                    (("1" (inst? -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "map_length[nat, term]")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "map_length[nat, term]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "num_arg" 1 1)
                                            (("1"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("1"
                                                (rewrite
                                                 "from_min2max_len1")
                                                (("1"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (lemma "nth_append")
                  (("2" (inst -1 "n" "get_args(f)(t)" "get_args(f)(s)")
                    (("2" (prop)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (replace -2 1 nil t)
                            (("1" (expand "get_args" 1 1)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "get_args" 1 1)
                                        (("1"
                                          (lemma
                                           "map_nth_rw[nat, term]")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (replace -1 1 nil t)
                                              (("1"
                                                (lemma
                                                 "nth_from_min2max2")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "nth_from_min2max2")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "select"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "get_args_len")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "from_min2max_len1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "from_min2max_len1")
                                                        (("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "get_args_len")
                                    (("2"
                                      (rewrite "from_min2max_len1")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1 2)
                            (("2" (hide -1)
                              (("2"
                                (expand "get_args" 2 1)
                                (("2"
                                  (lemma "map_nth_rw[nat, term]")
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "nth_from_min2max2")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (expand "select" 2 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (hide -2 1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 1 3)
                                                        (("2"
                                                          (expand
                                                           "get_args"
                                                           1
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "map_nth_rw[nat, term]")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_from_min2max2")
                                                                    (("1"
                                                                      (rewrite
                                                                       "get_args_len")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        (("2"
                                                                          (rewrite
                                                                           "from_min2max_len1")
                                                                          (("2"
                                                                            (typepred
                                                                             "n")
                                                                            (("2"
                                                                              (rewrite
                                                                               "get_args_len")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (reveal
                                                                         3)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     3)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("2"
                                                                      (rewrite
                                                                       "from_min2max_len1")
                                                                      (("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "n")
                                                (("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (rewrite
                                                       "from_min2max_len1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "from_min2max_len1")
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (rewrite "get_args_len")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "n")
                        (("2" (rewrite "get_args_len")
                          (("2" (expand "num_arg" -1)
                            (("2" (rewrite "get_args_len")
                              (("2"
                                (rewrite "get_args_len")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_lst_nth formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (nth_append formula-decl nil list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   SHOSTAK))
 (get_args_not_pair_ac 0
  (get_args_not_pair_ac-1 nil 3807113704
   ("" (skeep)
    (("" (expand "get_args")
      (("" (lemma "num_arg_not_pair_ac")
        (("" (inst? -1)
          (("" (assert)
            (("" (replace -1 3)
              (("" (expand "from_min2max" 3)
                (("" (expand "map" 3)
                  (("" (expand "map" 3) (("" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil))
   SHOSTAK))
 (get_args_nth_TCC1 0
  (get_args_nth_TCC1-1 nil 3807116901 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (get_args_nth subtype "(number_fields.-)(term_properties.i, 1)"
    "below[length[term[constant, variable, f_symbol, ac_symbol]](get_args(f)(t))]")))
 (get_args_nth 0
  (get_args_nth-1 nil 3807117043
   ("" (skeep)
    (("" (expand "get_args" 1)
      (("" (lemma "map_nth_rw[nat, term]")
        (("" (inst? -1)
          (("1" (replace -1 1)
            (("1" (hide -1)
              (("1" (rewrite "nth_from_min2max2")
                (("1" (rewrite "from_min2max_len1")
                  (("1" (expand "nice_ind?" -1)
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (expand "nice_ind?" -1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "from_min2max_len1")
            (("2" (expand "nice_ind?" -1)
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((from_min2max def-decl "list[nat]" list_theory nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (get_args_remove_TCC1 0
  (get_args_remove_TCC1-1 nil 3807116901 ("" (subtype-tcc) nil nil)
   ((term type-decl nil term_adt nil)) nil
   (get_args_remove subtype "(number_fields.-)(term_properties.i, 1)"
    "nat")))
 (get_args_remove 0
  (get_args_remove-1 nil 3807117973
   ("" (skeep)
    (("" (lemma "equal_lst_nth")
      (("" (inst? -1)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (prop)
              (("1" (lemma "remove_len")
                (("1" (inst? -1)
                  (("1" (prop)
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (lemma "get_args_len")
                          (("1" (inst? -1)
                            (("1" (replace -1 1 nil t)
                              (("1"
                                (lemma "get_args_len")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "num_arg_delete_ge1")
                                        (("1"
                                          (inst? -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "get_args_len")
                      (("2" (expand "nice_ind?")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "nice_ind?") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (case "i > n+1")
                  (("1" (lemma "gt_nth_remove")
                    (("1" (inst -1 "i-1" "get_args(f)(t)" "n")
                      (("1" (prop)
                        (("1" (replace -1 1 nil t)
                          (("1" (expand "get_args")
                            (("1" (lemma "map_nth_rw[nat, term]")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (replace -1 1 nil t)
                                  (("1"
                                    (lemma "map_nth_rw[nat, term]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (rewrite
                                             "nth_from_min2max2")
                                            (("1"
                                              (rewrite
                                               "nth_from_min2max2")
                                              (("1"
                                                (lemma
                                                 "gt_select_delete")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "nice_ind?"
                                                       1)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  (("2"
                                                    (rewrite
                                                     "num_arg_delete_ge1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite "from_min2max_len1")
                                          (("2"
                                            (rewrite
                                             "num_arg_delete_ge1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "from_min2max_len1")
                                  (("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "get_args_len")
                          (("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "gt_nth_remove2")
                    (("2" (inst -1 "n+1" "get_args(f)(t)" "i-1")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (replace -1 2 nil t)
                            (("1" (expand "get_args" 2)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 2 nil t)
                                    (("1"
                                      (lemma "map_nth_rw[nat, term]")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 2)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "nth_from_min2max2")
                                              (("1"
                                                (rewrite
                                                 "nth_from_min2max2")
                                                (("1"
                                                  (lemma
                                                   "le_select_delete")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (typepred
                                                           "n")
                                                          (("1"
                                                            (rewrite
                                                             "remove_len")
                                                            (("1"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  (("2"
                                                    (typepred "n")
                                                    (("2"
                                                      (rewrite
                                                       "remove_len")
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("2"
                                                          (hide 2 4)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1 4)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "from_min2max_len1")
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (hide 3)
                                                    (("2"
                                                      (rewrite
                                                       "remove_len")
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "from_min2max_len1")
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (rewrite
                                               "num_arg_delete_ge1")
                                              (("2"
                                                (rewrite "remove_len")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (hide -1 4)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 4)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "from_min2max_len1")
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (rewrite "remove_len")
                                        (("1"
                                          (rewrite "get_args_len")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (rewrite "get_args_len")
                                          (("2"
                                            (hide 4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -1 4)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "n")
                            (("2" (rewrite "remove_len")
                              (("1"
                                (rewrite "get_args_len")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (rewrite "get_args_len")
                                (("2"
                                  (hide -1 4)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -1 4)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((equal_lst_nth formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil)
    (remove_len formula-decl nil list_theory nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (gt_nth_remove formula-decl nil list_theory nil)
    (gt_nth_remove2 formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (get_args_get_term_from_args 0
  (get_args_get_term_from_args-1 nil 3807217309
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "get_term_from_args" 2)
              (("" (lift-if)
                (("" (prop)
                  (("1" (expand "map" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (expand "length" -1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "map" 3 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "flatten" 3)
                                              (("1"
                                                (expand "flatten" 3)
                                                (("1"
                                                  (rewrite
                                                   "append_null")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1 2 3 4 5 6)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "get_args_pair")
                    (("2" (expand "map" 2)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("2" (expand "flatten" 2)
                            (("2" (reveal -1)
                              (("2"
                                (inst -1 "cdr(args1)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (flatten def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (get_args_get_ac_from_args 0
  (get_args_get_ac_from_args-1 nil 3815326240
   ("" (skeep)
    (("" (expand "get_ac_from_args" 2)
      (("" (rewrite "get_args_ac")
        (("" (lemma "get_args_get_term_from_args")
          (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak))
 (get_args_get_ac_from_args_all_var 0
  (get_args_get_ac_from_args_all_var-1 nil 3809111401
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_ac_from_args" 1)
            (("2" (rewrite "get_args_ac")
              (("2" (expand "get_term_from_args")
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "all_var?" -3)
                      (("1" (flatten)
                        (("1" (hide -4)
                          (("1" (hide -2)
                            (("1" (expand "get_args" 1)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "get_args_pair")
                      (("2" (inst? -1)
                        (("2" (expand "all_var?" -2)
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "get_ac_from_args" -1)
                                    (("1"
                                      (rewrite "get_args_ac")
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (hide -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((from_min2max def-decl "list[nat]" list_theory nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (remove_get_args_del 0
  (remove_get_args_del-1 nil 3807539071
   ("" (skeep)
    (("" (lemma "equal_lst_nth")
      (("" (inst? -1)
        (("" (assert)
          ((""
            (case "length(remove(get_args(f)(t), j)) =
       length(get_args(f)(delete(f, t)(1 + j)))")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep)
                  (("1" (case "j > n")
                    (("1" (rewrite "gt_nth_remove")
                      (("1" (expand "get_args" 1)
                        (("1" (lemma "map_nth_rw[nat, term]")
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (rewrite "nth_from_min2max2")
                                    (("1"
                                      (rewrite "map_nth_rw[nat, term]")
                                      (("1"
                                        (rewrite "nth_from_min2max2")
                                        (("1"
                                          (lemma "gt_select_delete")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "from_min2max_len1")
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "num_arg_delete_ge1")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "from_min2max_len1")
                                        (("2"
                                          (lemma "num_arg_delete_ge1")
                                          (("2"
                                            (inst? -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "from_min2max_len1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "from_min2max_len1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "get_args_len") nil nil))
                      nil)
                     ("2" (lemma "gt_nth_remove2")
                      (("2" (typepred "n")
                        (("2" (inst -2 "n+1" "get_args(f)(t)" "j")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "get_args" 2)
                                    (("1"
                                      (rewrite "map_nth_rw[nat, term]")
                                      (("1"
                                        (rewrite
                                         "map_nth_rw[nat, term]")
                                        (("1"
                                          (rewrite "nth_from_min2max2")
                                          (("1"
                                            (rewrite
                                             "nth_from_min2max2")
                                            (("1"
                                              (lemma
                                               "le_select_delete")
                                              (("1"
                                                (inst
                                                 -1
                                                 "f"
                                                 "1+j"
                                                 "1+n"
                                                 "t")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2 3)
                                                    (("1"
                                                      (lemma
                                                       "remove_len")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (hide 3)
                                                (("2"
                                                  (rewrite
                                                   "remove_len")
                                                  (("1"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("1"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "from_min2max_len1")
                                            (("2"
                                              (rewrite "remove_len")
                                              (("1"
                                                (rewrite
                                                 "get_args_len")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "get_args_len")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "get_args_len")
                                          (("2"
                                            (rewrite
                                             "from_min2max_len1")
                                            (("2"
                                              (rewrite "remove_len")
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "from_min2max_len1")
                                        (("2"
                                          (rewrite "remove_len")
                                          (("1"
                                            (rewrite "get_args_len")
                                            (("1"
                                              (rewrite "get_args_len")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "get_args_len")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "get_args_len")
                                (("2"
                                  (rewrite "remove_len")
                                  (("1"
                                    (rewrite "get_args_len")
                                    (("1"
                                      (rewrite "get_args_len")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "get_args_len")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "remove_len")
                (("1" (rewrite "get_args_len")
                  (("1" (rewrite "get_args_len")
                    (("1" (lemma "num_arg_delete_ge1")
                      (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "get_args_len") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_lst_nth formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil)
    (gt_nth_remove2 formula-decl nil list_theory nil)
    (remove_len formula-decl nil list_theory nil)
    (gt_nth_remove formula-decl nil list_theory nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (get_args_remove_del 0
  (get_args_remove_del-1 nil 3807528275
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1 1)
            (("2" (expand "remove" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (rewrite "get_args_len")
                    (("1" (expand "delete" 1)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (lemma "num_arg_ge1")
                            (("1" (hide -4)
                              (("1"
                                (inst -1 "f" "hd")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "delete" 2)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (rewrite "get_args_len")
                          (("2" (assert)
                            (("2" (expand "map" 2 2)
                              (("2"
                                (lemma "remove_get_args_del")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "nth" -4)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "delete" 2)
                    (("3" (lift-if)
                      (("3" (assert)
                        (("3" (expand "map" 2 2)
                          (("3" (inst -1 "f" "i-1" "j")
                            (("3" (assert)
                              (("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove def-decl "list[list[T]]" list_theory nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (map_get_args_get_ac_from_args 0
  (map_get_args_get_ac_from_args-1 nil 3809110041
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("args_" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "map" 1 2)
              (("2" (expand "map" 1 1)
                (("2" (expand "no_null_entries?" -3)
                  (("2" (assert)
                    (("2" (prop)
                      (("2" (inst? -2)
                        (("2" (assert)
                          (("2" (replace -2 2)
                            (("2"
                              (lemma
                               "get_args_get_ac_from_args_all_var")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_null_entries? def-decl "bool" list_theory nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (subterms_aux_TCC 0
  (subterms_aux_TCC-1 nil 3819388123
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term_induction formula-decl nil term_adt nil)
    (term type-decl nil term_adt nil))
   shostak))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3815326240 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (vars termination "term_properties.vars(term_properties.t1)"
    "nil")))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3815326240 ("" (tcc))
   ((term type-decl nil term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (vars termination "term_properties.vars(term_properties.t2)"
    "nil")))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3823789730 ("" (termination-tcc) nil nil) nil nil
   (vars termination-subtype
    "term_properties.get_args(term_properties.sym)(term_properties.t)"
    "[{z: term_adt[constant, variable, f_symbol, ac_symbol].term | term_adt[constant, variable, f_symbol, ac_symbol].<<(z, term_properties.t)} -> finite_set[variable]]")))
 (vars_TCC4 0
  (vars_TCC3-1 nil 3823266698 ("" (subtype-tcc) nil nil)
   ((term type-decl nil term_adt nil)) nil
   (vars subtype "term_properties.fin_set_t"
    "(sets[term[constant, variable, f_symbol, ac_symbol]].nonempty?)")))
 (vars_TCC5 0
  (vars_TCC4-1 nil 3823266698
   ("" (skeep)
    (("" (lemma "card_rest[term]") (("" (grind) nil nil)) nil)) nil)
   ((term type-decl nil term_adt nil)) nil
   (vars termination
    "term_properties.vars(sets[term[constant, variable, f_symbol, ac_symbol]].rest(term_properties.fin_set_t))"
    "nil")))
 (not_var_args_TCC1 0
  (not_var_args_TCC1-1 nil 3819455914 ("" (termination-tcc) nil nil)
   nil nil
   (not_var_args termination
    "term_properties.not_var_args(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
    "nil")))
 (not_var_args_TCC2 0
  (not_var_args_TCC2-1 nil 3819455914 ("" (termination-tcc) nil nil)
   nil nil
   (not_var_args termination
    "term_properties.not_var_args(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
    "nil")))
 (subterms_TCC1 0
  (subterms_TCC1-1 nil 3819387232 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (subterms termination "term_properties.subterms(term_properties.t1)"
    "nil")))
 (subterms_TCC2 0
  (subterms_TCC2-1 nil 3819387232 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (subterms termination "term_properties.subterms(term_properties.t2)"
    "nil")))
 (subterms_TCC3 0
  (subterms_TCC3-1 nil 3819387232 ("" (tcc))
   ((term type-decl nil term_adt nil)) nil
   (subterms termination
    "term_properties.subterms(term_properties.arg)" "nil")))
 (subterms_TCC4 0
  (subterms_TCC4-1 nil 3819387232
   ("" (skeep)
    (("" (lemma "every_nth[term[number, number, f_symbol, ac_symbol]]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (skeep)
              (("" (lemma "get_args_nth")
                (("" (inst? -1)
                  (("" (split -1)
                    (("1" (replace -1 1)
                      (("1" (prop)
                        (("1" (lemma "subterms_aux_TCC")
                          (("1" (inst? -1) nil nil)) nil)
                         ("2" (lemma "ac_select_size")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (hide 2 -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (typepred "i")
                        (("2" (rewrite "get_args_len")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak
   (subterms termination-subtype
    "term_properties.get_args(term_properties.sym)(term_properties.t)"
    "[{z: term_adt[constant, variable, f_symbol, ac_symbol].term | reals.<(term_properties.size(z), term_properties.size(term_properties.t))} -> finite_set[term[constant, variable, f_symbol, ac_symbol]]]")))
 (prop_subterms_TCC1 0
  (prop_subterms_TCC1-1 nil 3819387232
   ("" (skeep)
    ((""
      (lemma
       "Union_finite[term[constant, variable, f_symbol, ac_symbol]]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            ((""
              (lemma "finite_extension[setof[term], finite_set[term]]")
              (("" (inst? -1)
                (("" (split 1)
                  (("1" (assert)
                    (("1" (hide 1)
                      (("1" (lemma "is_fin_lst2set[term]")
                        (("1" (inst? -1) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (expand "every" 1)
                      (("2" (skeep)
                        (("2" (typepred "x")
                          (("2" (expand "extend" -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_fin_lst2set formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil))
   shostak
   (prop_subterms subtype
    "sets[term[constant, variable, f_symbol, ac_symbol]].Union(extend[setof[term[constant, variable, f_symbol, ac_symbol]], finite_set[term[constant, variable, f_symbol, ac_symbol]], booleans.bool, booleans.FALSE].extend(list2set[finite_set[term[constant, variable, f_symbol, ac_symbol]]].list2set(list_adt_map[term[constant, variable, f_symbol, ac_symbol], finite_set[term[constant, variable, f_symbol, ac_symbol]]].map(term_properties.subterms)(term_properties.get_args(term_properties.sym)(term_properties.t)))))"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (im_under_TCC1 0
  (im_under_TCC1-1 nil 3823789730 ("" (subtype-tcc) nil nil) nil nil
   (im_under subtype
    "{t | booleans.AND(sets[term[constant, variable, f_symbol, ac_symbol]].member(term_properties.t, term_properties.subterms(term_properties.arg)), (booleans.NOT)(sets[term[constant, variable, f_symbol, ac_symbol]].member(term_properties.t, term_properties.prop_subterms(term_properties.arg))))}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (im_under_TCC2 0
  (im_under_TCC2-1 nil 3823789730 ("" (subtype-tcc) nil nil) nil nil
   (im_under subtype
    "list2set[term[constant, variable, f_symbol, ac_symbol]].list2set(term_properties.get_args(term_properties.sym)(term_properties.t))"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (vars_correct 0
  (vars_correct-1 nil 3823284339
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -2 -3 1) (("1" (grind) nil nil)) nil)
                 ("2" (case "t = choose(fin_set_t)")
                  (("1" (replace -1 :dir rl)
                    (("1" (expand "member" 2)
                      (("1" (expand "union" 2) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "member" 3)
                    (("2" (expand "union" 3)
                      (("2" (prop)
                        (("2" (hide 3)
                          (("2" (lemma "choose_rest_or[term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -2 "rest(fin_set_t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "X" "t")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "card_rest[term]")
                                      (("2"
                                        (inst? -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak))
 (vars_singleton 0
  (vars_singleton-1 nil 3823267287
   ("" (skeep)
    (("" (expand "vars" 1 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide 1) (("1" (grind) nil nil)) nil)
           ("2" (rewrite "choose_singleton")
            (("2" (rewrite "rest_singleton")
              (("2" (hide 1)
                (("2" (expand "vars" 1 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind)
                        (("1" (rewrite "union_empty") nil nil)) nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak))
 (all_var?_append 0
  (all_var?_append-1 nil 3809254657
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) SHOSTAK))
 (all_var?_get_repeat_lst 0
  (all_var?_get_repeat_lst-1 nil 3809254692
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((get_repeat_lst def-decl "list[T]" list_theory nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (all_var?_split 0
  (all_var?_split-1 nil 3809249359
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "split" 1)
              (("2" (expand "get_lst_until_n")
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "all_var?" 2)
                    (("2" (assert)
                      (("2" (inst -1 "n-1")
                        (("2" (expand "split" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_after_n def-decl "list[T]" list_theory nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (term type-decl nil term_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil))
   SHOSTAK))
 (all_var?_split2 0
  (all_var?_split2-1 nil 3809285538
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "split" 1)
              (("2" (expand "get_lst_after_n")
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -1 "n-1")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_after_n def-decl "list[T]" list_theory nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (term type-decl nil term_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil))
   SHOSTAK))
 (all_var?_get_repeat_lst_null 0
  (all_var?_get_repeat_lst_null-1 nil 3809257456
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((get_repeat_lst def-decl "list[T]" list_theory nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (all_var?_split_lst_args 0
  (all_var?_split_lst_args-1 nil 3809256090
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "split" 1)
              (("2" (expand "get_lst_until_n")
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "all_var?" 2)
                    (("2" (assert)
                      (("2" (inst -1 "n-1")
                        (("2" (expand "split" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_after_n def-decl "list[T]" list_theory nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (term type-decl nil term_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil))
   SHOSTAK))
 (all_var?_split_lst_args2 0
  (all_var?_split_lst_args2-1 nil 3809288342
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "split" 1)
              (("2" (expand "get_lst_after_n")
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -1 "n-1")
                    (("1" (expand "split" -1) (("1" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_after_n def-decl "list[T]" list_theory nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (term type-decl nil term_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil))
   SHOSTAK))
 (not_var_args_append 0
  (not_var_args_append-1 nil 3824389246
   ("" (induct "args1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (not_var_args def-decl "args" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (args type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (not_var_args_nth 0
  (not_var_args_nth-1 nil 3819455944
   ("" (induct "args")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "not_var_args" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst -3 "i")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst 1 "j+1")
                        (("1" (expand "length" 1)
                          (("1" (assert)
                            (("1" (expand "nth" 1 2)
                              (("1"
                                (expand "not_var_args" 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "i = 0")
                  (("1" (inst 2 "0")
                    (("1" (expand "not_var_args" 2)
                      (("1" (expand "length" 2)
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (replace -1 2)
                              (("1"
                                (expand "nth" 2 1)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "i-1")
                    (("1" (expand "length" -1)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst 3 "j+1") (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak))
 (not_var_args_mem 0
  (not_var_args_mem-1 nil 3823527746
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak))
 (not_var_args_mem2 0
  (not_var_args_mem2-1 nil 3824224541
   ("" (induct "args") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (not_var_args def-decl "args" term_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (not_var_args_get_args 0
  (not_var_args_get_args-1 nil 3823527641
   ("" (skeep)
    (("" (expand "not_var_args" -1)
      (("" (lemma "not_var_args_mem")
        (("" (inst -1 "get_args(f)(t)" "s") (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak))
 (not_var_args_get_args2 0
  (not_var_args_get_args2-1 nil 3824224322
   ("" (lemma "not_var_args_mem2") (("" (grind) nil nil)) nil)
   ((not_var_args const-decl "args" term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (num_arg def-decl "nat" term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_var_args_mem2 formula-decl nil term_properties nil))
   shostak))
 (not_var_args_nth2 0
  (not_var_args_nth2-1 nil 3819473008
   ("" (skeep)
    (("" (expand "not_var_args")
      (("" (lemma "not_var_args_nth")
        (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)) shostak))
 (vars_subterm 0
  (vars_subterm-1 nil 3823528043
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "subterms" -4)
                  (("1" (assert)
                    (("1" (hide -1 -2 1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide -2) (("2" (grind) nil nil)) nil)
                 ("3" (hide -2 2 3) (("3" (grind) nil nil)) nil)
                 ("4" (expand "subterms" -4)
                  (("4" (assert)
                    (("4" (expand "union" -4)
                      (("4" (expand "member" -4)
                        (("4" (prop)
                          (("1" (expand "union" 1)
                            (("1" (expand "member" 1)
                              (("1"
                                (prop)
                                (("1"
                                  (hide 2 3 4 5)
                                  (("1"
                                    (inst -3 "term1(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member" 1)
                            (("2" (expand "union" 1)
                              (("2"
                                (prop)
                                (("2"
                                  (inst -3 "term2(t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "X" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "member" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2 3 4 5)
                  (("5" (inst? -2)
                    (("5" (prop)
                      (("1" (inst -1 "X" "s")
                        (("1" (prop)
                          (("1" (expand "subterms" -3)
                            (("1" (assert)
                              (("1"
                                (expand "member" -3)
                                (("1"
                                  (expand "union" -3)
                                  (("1"
                                    (hide 1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("6" (hide -1)
                  (("6" (hide 3 4 5 6)
                    (("6" (assert)
                      (("6" (case "ac_app?(t)")
                        (("1" (assert)
                          (("1" (hide -3)
                            (("1" (reveal -1)
                              (("1"
                                (expand "subterms" -1)
                                (("1"
                                  (expand "member" -1 1)
                                  (("1"
                                    (expand "union" -1 1)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "member" -1)
                                        (("1"
                                          (expand "singleton" -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (expand "vars" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "mem_union_map[term, term]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skolem -1 "t1")
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "mem_union_map[term, variable]")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "t1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (reveal
                                                                 -5)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "t1")
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "X"
                                                                       "s")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "get_args_size")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal 1 2 3 4)
                          (("2" (hide 7) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil))
   shostak))
 (subterm_size 0
  (subterm_size-1 nil 3823960452
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subterms" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "member" -2)
                  (("4" (expand "union" -2)
                    (("4" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (case "size(term1(t)) < size(t)")
                          (("1" (assert)
                            (("1" (inst -4 "s") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (case "size(term2(t)) < size(t)")
                          (("1" (assert)
                            (("1" (inst -4 "s") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "member" -2)
                  (("5" (expand "union" -2)
                    (("5" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst -3 "arg(t)")
                        (("2" (case "size(arg(t)) < size(t)")
                          (("1" (assert)
                            (("1" (inst -4 "s") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 2 3 4 5)
                    (("1" (expand "member" -2)
                      (("1" (expand "union" -2)
                        (("1" (prop)
                          (("1" (hide -2 -3) (("1" (grind) nil nil))
                            nil)
                           ("2" (lemma "mem_union_map[term, term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (skolem -1 "ti")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst -4 "ti")
                                        (("2"
                                          (case "size(ti) < size(t)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -1 "s")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -2 -4 2)
                                            (("2"
                                              (lemma "get_args_size")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg def-decl "nat" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (<= const-decl "bool" reals nil)
    (subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (prop_subterm_size 0
  (prop_subterm_size-2 nil 3823960378
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "prop_subterms" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide-all-but -2) (("1" (grind) nil nil)) nil)
                 ("2" (hide-all-but -2) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but -2) (("3" (grind) nil nil)) nil)
                 ("4" (hide 1 2 3)
                  (("4" (expand "member" -2)
                    (("4" (expand "union" -2)
                      (("4" (prop)
                        (("1" (inst -3 "term1(t)")
                          (("1" (case "size(term1(t)) < size(t)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "s")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -3 "term2(t)")
                          (("2" (case "size(term2(t)) < size(t)")
                            (("1" (assert)
                              (("1"
                                (inst -4 "s")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 1 2 3 4)
                  (("5" (hide -3)
                    (("5" (lemma "subterm_size")
                      (("5" (inst? -1) (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 2 3 4 5)
                    (("1" (lemma "mem_union_map[term, term]")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (hide -3)
                            (("1" (skolem -1 "ti")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -4)
                                  (("1"
                                    (case "size(ti) < size(t)")
                                    (("1"
                                      (lemma "subterm_size")
                                      (("1"
                                        (inst -1 "s" "ti")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "get_args_size")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 7) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (prop_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm_size formula-decl nil term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (get_args const-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg def-decl "nat" term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   nil)
  (prop_subterm_size-1 nil 3823960355 ("" (postpone) nil nil) nil
   shostak))
 (vars_prop_subterm 0
  (vars_prop_subterm-1 nil 3823961697
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "prop_subterms" -4)
                  (("1" (assert)
                    (("1" (hide -1 -2 1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide -2) (("2" (grind) nil nil)) nil)
                 ("3" (hide -2 2 3) (("3" (grind) nil nil)) nil)
                 ("4" (expand "prop_subterms" -4)
                  (("4" (assert)
                    (("4" (expand "union" -4)
                      (("4" (expand "member" -4)
                        (("4" (prop)
                          (("1" (expand "union" 1)
                            (("1" (expand "member" 1)
                              (("1"
                                (prop)
                                (("1"
                                  (hide 2 3 4 5)
                                  (("1"
                                    (inst -3 "term1(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member" 1)
                            (("2" (expand "union" 1)
                              (("2"
                                (prop)
                                (("2"
                                  (inst -3 "term2(t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "X" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "member" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2 3 4 5)
                  (("5" (expand "prop_subterms" -4)
                    (("5" (assert)
                      (("5" (hide -2)
                        (("5" (lemma "vars_subterm")
                          (("5" (inst? -1)
                            (("5" (inst -1 "s") (("5" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 3 4 5 6)
                    (("1" (expand "prop_subterms" -4)
                      (("1" (assert)
                        (("1" (hide -1 -2)
                          (("1" (lemma "mem_union_map[term, term]")
                            (("1" (inst? -1)
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "ti")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (lemma
                                         "mem_union_map[term, variable]")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (inst 1 "ti")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "vars_subterm")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (inst -1 "s")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (get_args const-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (mem_union_map formula-decl nil map_theory nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (vars_subterm formula-decl nil term_properties nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (prop_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)))

