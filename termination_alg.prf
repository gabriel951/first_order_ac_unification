(termination_alg
 (vars_under2more_TCC1 0
  (vars_under2more_TCC1-1 nil 3819316174 ("" (tcc))
   ((injective? const-decl "bool" functions nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (vars_under2more subtype
    "{X | EXISTS t, s:      term_properties.dif_func?(termination_alg.t, termination_alg.s) AND term_properties.im_under?(termination_alg.X, termination_alg.t) AND term_properties.im_under?(termination_alg.X, termination_alg.s) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.t, unification.subterms(termination_alg.unif_prb)) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, unification.subterms(termination_alg.unif_prb))}"
    "finite_set[variable]")))
 (vars_under2more_TCC2 0
  (vars_under2more_TCC2-1 nil 3824482821 ("" (subtype-tcc) nil nil) nil
   nil
   (vars_under2more subtype
    "{X | EXISTS t, s:      term_properties.dif_func?(termination_alg.t, termination_alg.s) AND term_properties.im_under?(termination_alg.X, termination_alg.t) AND term_properties.im_under?(termination_alg.X, termination_alg.s) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.t, unification.subterms(termination_alg.lst_unif_prb)) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, unification.subterms(termination_alg.lst_unif_prb))}"
    "finite_set[variable]")))
 (vars_not_ac_TCC1 0
  (vars_not_ac_TCC1-1 nil 3819454827 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.t1)" "nil")))
 (vars_not_ac_TCC2 0
  (vars_not_ac_TCC2-1 nil 3819454827 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.t2)" "nil")))
 (vars_not_ac_TCC3 0
  (vars_not_ac_TCC3-1 nil 3819454827 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.arg)" "nil")))
 (vars_not_ac_TCC4 0
  (vars_not_ac_TCC1-1 nil 3819454692
   ("" (skeep)
    (("" (lemma "every_nth[term[number, number, f_symbol, ac_symbol]]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (skeep)
              (("" (typepred "i")
                (("" (lemma "not_var_args_nth2")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (skeep)
                        (("" (replace -2 1)
                          (("" (lemma "get_args_nth")
                            (("" (inst? -1)
                              ((""
                                (split -1)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma "subterms_aux_TCC")
                                      (("1" (inst? -1) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "ac_select_size")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (rewrite "get_args_len")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_args_nth formula-decl nil term_properties nil)
    (subterms_aux_TCC formula-decl nil term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (select def-decl "term" term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (get_args const-decl "args" term_properties nil)
    (not_var_args def-decl "args" term_properties nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ac_select_size formula-decl nil term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (get_args_len formula-decl nil term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_var_args_nth2 formula-decl nil term_properties nil)
    (every_nth formula-decl nil list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil))
   shostak
   (vars_not_ac termination-subtype
    "term_properties.not_var_args(termination_alg.sym)(termination_alg.t)"
    "[{z: term_adt[constant, variable, f_symbol, ac_symbol].term | reals.<(term_properties.size(z), term_properties.size(termination_alg.t))} -> finite_set[variable]]")))
 (vars_not_ac_TCC5 0
  (vars_not_ac_TCC5-1 nil 3824129283 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (vars_not_ac_TCC6 0
  (vars_not_ac_TCC6-1 nil 3824129283 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(list_adt[unif_pair].cdr(termination_alg.unif_prb))"
    "nil")))
 (vars_not_ac_TCC7 0
  (vars_not_ac_TCC7-1 nil 3824129283 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (vars_not_ac_TCC8 0
  (vars_not_ac_TCC8-1 nil 3824407778 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.lst_unif_prb"
    "(list_adt[unification.unif_prb].cons?)")))
 (vars_not_ac_TCC9 0
  (vars_not_ac_TCC9-1 nil 3824407778 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(list_adt[unification.unif_prb].cdr(termination_alg.lst_unif_prb))"
    "nil")))
 (vars_not_ac_TCC10 0
  (vars_not_ac_TCC10-1 nil 3824407778 ("" (subtype-tcc) nil nil) nil
   nil
   (vars_not_ac subtype "termination_alg.lst_unif_prb"
    "(list_adt[unification.unif_prb].cons?)")))
 (vars_not_ac_TCC11 0
  (vars_not_ac_TCC5-1 nil 3823285901 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (vars_not_ac subtype "termination_alg.fin_set_t"
    "(sets[term[constant, variable, f_symbol, ac_symbol]].nonempty?)")))
 (vars_not_ac_TCC12 0
  (vars_not_ac_TCC6-1 nil 3823285901 ("" (termination-tcc) nil nil) nil
   shostak
   (vars_not_ac termination
    "termination_alg.vars_not_ac(sets[term[constant, variable, f_symbol, ac_symbol]].rest(termination_alg.fin_set_t))"
    "nil")))
 (admissible_subterms_TCC1 0
  (admissible_subterms_TCC1-1 nil 3819316174
   ("" (skeep)
    (("" (lemma "finite_subset[term]")
      (("" (inst -1 "prop_subterms(t)" "_")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "subset?" 1)
                (("" (skeep) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (prop_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil))
   shostak
   (admissible_subterms subtype
    "{s | booleans.AND(sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, term_properties.prop_subterms(termination_alg.t)), (booleans.NOT)(term_adt[constant, variable, f_symbol, ac_symbol].var?(termination_alg.s)))}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (vars_under2more_null 0
  (vars_under2more_null-1 nil 3824482826
   ("" (lemma "subset_antisymmetric[variable]")
    (("" (inst? -1)
      (("" (assert)
        (("" (hide 2)
          (("" (prop)
            (("1" (expand "vars_under2more" 1)
              (("1" (expand "subset?" 1)
                (("1" (skeep)
                  (("1" (hide 1)
                    (("1" (expand "member" -1 1)
                      (("1" (skeep)
                        (("1" (expand "subterms" -4)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "subset_emptyset[variable]")
              (("2" (inst? -1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (subset_emptyset formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (im_under? const-decl "bool" term_properties nil)
    (dif_func? const-decl "bool" term_properties nil)
    (sym const-decl "string" term_properties nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (func? const-decl "bool" term_properties nil)
    (subset? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (vars_not_ac_vars_t 0
  (vars_not_ac_vars_t-1 nil 3823286315
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "member" -2)
                  (("4" (expand "union" -2)
                    (("4" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (prop)
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "vars" 4)
                                (("1"
                                  (expand "member" 4)
                                  (("1"
                                    (expand "union" 4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (prop)
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "vars" 4)
                                (("1"
                                  (expand "member" 4)
                                  (("1"
                                    (expand "union" 4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst -3 "arg(t)")
                  (("5" (prop)
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (expand "vars" 5)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 2 3 4 5)
                    (("1" (lemma "mem_union_map[term, variable]")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (skolem -1 "ti")
                            (("1" (flatten)
                              (("1"
                                (hide -4)
                                (("1"
                                  (expand "vars" 1)
                                  (("1"
                                    (lemma
                                     "mem_union_map[term, variable]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (inst 1 "ti")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "not_var_args_get_args")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -4 "ti")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst -1 "X")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "not_var_args_get_args")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "get_args_size")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 7) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (not_var_args_get_args formula-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (vars_not_ac_vars_unif_pair 0
  (vars_not_ac_vars_unif_pair-1 nil 3823286219
   ("" (skeep)
    (("" (expand "vars" 1)
      (("" (expand "vars_not_ac" -1)
        (("" (expand "member")
          (("" (expand "union")
            (("" (prop)
              (("1" (lemma "vars_not_ac_vars_t")
                (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
               ("2" (lemma "vars_not_ac_vars_t")
                (("2" (inst -1 "X" "unif_pair`2")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (union const-decl "set" sets nil)
    (vars_not_ac_vars_t formula-decl nil termination_alg nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (vars const-decl "finite_set[variable]" unification nil))
   shostak))
 (vars_not_ac_vars 0
  (vars_not_ac_vars-1 nil 3823285901
   ("" (induct "unif_prb" 1)
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "vars_not_ac" -2)
            (("2" (expand "member" -2)
              (("2" (expand "union" -2)
                (("2" (prop)
                  (("1" (expand "vars" 1)
                    (("1" (expand "member" 1)
                      (("1" (expand "union" 1)
                        (("1" (prop)
                          (("1" (lemma "vars_not_ac_vars_unif_pair")
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "vars" 1)
                    (("2" (expand "member" 1)
                      (("2" (expand "union" 1)
                        (("2" (prop)
                          (("2" (inst? -2) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (vars_not_ac_vars_unif_pair formula-decl nil termination_alg nil))
   shostak))
 (vars_not_ac_unif_prb_mem 0
  (vars_not_ac_unif_prb_mem-1 nil 3824130542
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "X")
            (("2" (expand "vars_not_ac" 1 1)
              (("2" (expand "member" 1 1)
                (("2" (expand "union" 1 1)
                  (("2" (prop)
                    (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (inst 1 "unif_pair")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (inst 1 "hd") (("3" (grind) nil nil)) nil)
                     ("4" (skeep)
                      (("4" (inst 3 "unif_pair")
                        (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_lst_unif_prb_mem 0
  (vars_not_ac_lst_unif_prb_mem-1 nil 3825154719
   ("" (induct "lst_unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "member" -2)
            (("2" (prop)
              (("1" (expand "subset?" 1)
                (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
               ("2" (inst -2 "unif_prb")
                (("2" (assert)
                  (("2" (expand "subset?" 1)
                    (("2" (skeep)
                      (("2" (expand "subset?" -2)
                        (("2" (inst -2 "x")
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (vars_not_ac_singleton 0
  (vars_not_ac_singleton-1 nil 3824130760
   ("" (skeep)
    (("" (expand "vars_not_ac" 1 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide 1) (("1" (grind) nil nil)) nil)
           ("2" (lemma "rest_singleton[term]")
            (("2" (inst? -1)
              (("2" (replace -1 2)
                (("2" (expand "vars_not_ac" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (lemma "union_empty[variable]")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (replace -1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "choose_singleton[term]")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (rest_singleton formula-decl nil sets_lemmas nil))
   shostak))
 (vars_not_ac_mem_finset 0
  (vars_not_ac_mem_finset-1 nil 3824224755
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "choose_rest_or[term]")
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (prop)
                        (("1" (inst -2 "rest(fin_set_t)")
                          (("1" (prop)
                            (("1" (inst -1 "X" "t")
                              (("1" (grind) nil nil)) nil)
                             ("2" (lemma "card_rest[term]")
                              (("2"
                                (inst? -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose_rest_or formula-decl nil sets_lemmas nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_not_ac_not_var_args 0
  (vars_not_ac_not_var_args-1 nil 3824385387
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "vars_not_ac" 1 2)
              (("" (lift-if)
                (("" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil)
                   ("4" (expand "not_var_args" -2)
                    (("4" (lemma "term_pair_eta")
                      (("4" (inst? -1)
                        (("4" (replace -1 -3 :dir rl)
                          (("4" (rewrite "get_args_pair")
                            (("4" (rewrite "not_var_args_append")
                              (("4"
                                (rewrite "member_append")
                                (("4"
                                  (prop)
                                  (("1"
                                    (reveal -2)
                                    (("1"
                                      (inst -1 "term1(t)")
                                      (("1"
                                        (expand "size" -1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -1 "s" "sym")
                                              (("1"
                                                (expand
                                                 "not_var_args"
                                                 -1)
                                                (("1"
                                                  (hide -2 -3 2 3 4)
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -1 "x")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -2)
                                    (("2"
                                      (inst -1 "term2(t)")
                                      (("2"
                                        (expand "size" -1 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (inst -1 "sym")
                                                (("2"
                                                  (expand
                                                   "not_var_args"
                                                   -1)
                                                  (("2"
                                                    (hide -2 2 3 4)
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst -1 "x")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2 3 4 5)
                    (("5" (expand "not_var_args" -2)
                      (("5" (lemma "get_args_not_pair_ac")
                        (("5" (inst? -1)
                          (("5" (assert)
                            (("5" (expand "is_ac_sym?" -1)
                              (("5"
                                (replace -1)
                                (("5"
                                  (expand "not_var_args" -3)
                                  (("5"
                                    (expand "not_var_args" -3)
                                    (("5"
                                      (expand "member" -3)
                                      (("5"
                                        (assert)
                                        (("5"
                                          (prop)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (expand
                                               "vars_not_ac"
                                               1
                                               1)
                                              (("1"
                                                (lemma
                                                 "subset_reflexive[variable]")
                                                (("1"
                                                  (inst? -1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_app?(t)")
                    (("1" (expand "subset?" 2)
                      (("1" (skeep)
                        (("1" (hide 1 3 4 5 6)
                          (("1" (case "sym = ac_sym(t)")
                            (("1"
                              (lemma "mem_union_map[term, variable]")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (inst 1 "s")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "not_var_args" -3)
                              (("2"
                                (lemma "get_args_not_pair_ac")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "is_ac_sym?" -1)
                                      (("2"
                                        (replace -1 -4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (args type-eq-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list2set def-decl "set[T]" list2set nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (Union const-decl "set" sets nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (subset_reflexive formula-decl nil sets_lemmas nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (get_args_pair formula-decl nil term_properties nil)
    (member_append formula-decl nil list_theory nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (not_var_args_append formula-decl nil term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (num_arg def-decl "nat" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (not_var_args def-decl "args" term_properties nil))
   shostak))
 (vars_not_ac_apply_sub_t 0
  (vars_not_ac_apply_sub_t-1 nil 3824132734
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" 1 3)
            (("" (lift-if)
              (("" (prop)
                (("1" (lemma "term_const_eta")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 :dir rl)
                      (("1" (hide -1)
                        (("1" (rewrite "subs_const")
                          (("1" (expand "vars_not_ac" 1 1)
                            (("1" (lemma "subset_emptyset[variable]")
                              (("1" (inst? -1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "subs(sigma)(V(t)) = t")
                  (("1" (expand "subs" -1)
                    (("1" (lemma "term_variable_eta")
                      (("1" (inst? -1)
                        (("1" (replace -1)
                          (("1" (hide -1)
                            (("1" (replace -1 1)
                              (("1"
                                (expand "vars_not_ac" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "member(subs(sigma)(t), img(sigma))")
                    (("1" (expand "subset?" 2)
                      (("1" (skeep)
                        (("1" (expand "member" 2)
                          (("1" (expand "union" 2)
                            (("1" (prop)
                              (("1"
                                (hide 4)
                                (("1"
                                  (lemma "vars_not_ac_mem_finset")
                                  (("1"
                                    (inst
                                     -1
                                     "x"
                                     "img(sigma)"
                                     "subs(sigma)(t)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 3 4)
                      (("2" (expand "member" 1)
                        (("2" (expand "img" 1)
                          (("2" (inst 1 "V(t)")
                            (("2" (prop)
                              (("1"
                                (expand "member" 1)
                                (("1"
                                  (expand "dom" 1)
                                  (("1"
                                    (lemma "term_variable_eta")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "subs" 1 1)
                                (("2"
                                  (lemma "term_variable_eta")
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "subs_unit")
                  (("3" (inst? -1)
                    (("3" (lemma "term_unit_extensionality")
                      (("3" (inst -1 "unit" "t")
                        (("3" (replace -1 1 :dir rl)
                          (("3" (replace -2 1)
                            (("3" (hide -1 -2)
                              (("3"
                                (expand "vars_not_ac" 1 1)
                                (("3"
                                  (lemma "subset_emptyset[variable]")
                                  (("3" (inst? -1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (lemma "term_pair_eta")
                  (("4" (inst -1 "t")
                    (("4" (lemma "subs_pair")
                      (("4" (replace -2 1 :dir rl)
                        (("4" (rewrite "subs_pair")
                          (("4" (assert)
                            (("4" (hide 2 3 4)
                              (("4"
                                (expand "subset?" 1)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (hide -1)
                                    (("4"
                                      (expand "vars_not_ac" -3)
                                      (("4"
                                        (expand "member" -3)
                                        (("4"
                                          (expand "union" -3)
                                          (("4"
                                            (prop)
                                            (("1"
                                              (inst -4 "term1(t)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 "sigma")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -4 "term2(t)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst -1 "sigma")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (lemma "term_app_eta")
                  (("5" (inst? -1)
                    (("5" (replace -1 1 :dir rl)
                      (("5" (rewrite "subs_app")
                        (("5" (hide 2 3 4 5)
                          (("5" (expand "vars_not_ac" 1 1)
                            (("5" (inst -3 "arg(t)")
                              (("5"
                                (prop)
                                (("1" (inst -1 "sigma") nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 3 4 5 6)
                    (("1" (lemma "mem_union_map[term, variable]")
                      (("1" (expand "subset?" 1)
                        (("1" (skeep)
                          (("1" (expand "member" 1)
                            (("1" (expand "union" 1)
                              (("1"
                                (prop)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 3)
                                      (("1"
                                        (lemma "term_ac_app_eta")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (replace -1 -3 :dir rl)
                                            (("1"
                                              (rewrite "subs_ac")
                                              (("1"
                                                (expand
                                                 "vars_not_ac"
                                                 -3)
                                                (("1"
                                                  (lemma
                                                   "mem_union_map[term, variable]")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -4)
                                                        (("1"
                                                          (skolem
                                                           -1
                                                           "ti")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "not_var_args_get_args2")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (rewrite
                                                                         "subs_ac"
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           "args_subs_ac")
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "mem_flatten_map[term, variable]")
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         "tj_sub")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -3)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -6)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "map_member4[term, term]")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (skolem
                                                                                                       -1
                                                                                                       "tj")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "tj")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "sigma")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subset?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "x")
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "union"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               2
                                                                                                                               "tj")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "not_var_args_get_args2")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "ac_sym(t)"
                                                                                                                                     "tj"
                                                                                                                                     "t")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "subs(sigma)(tj) = tj")
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -5
                                                                                                                                             -6)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "get_args_not_pair_ac")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "ac_sym(t)"
                                                                                                                                                 "tj")
                                                                                                                                                (("1"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (lemma
                                                                                                                                           "vars_not_ac_mem_finset")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "x"
                                                                                                                                             "img(sigma)"
                                                                                                                                             "tj_sub")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "member"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "img"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "V(tj)")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "subs"
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "term_variable_eta")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "tj")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "member"
                                                                                                                                                                   1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "dom"
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "subs"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "vars_not_ac_not_var_args")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "ti"
                                                                                                                                                     "ac_sym(t)"
                                                                                                                                                     "tj_sub")
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "not_var_args_get_args2")
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "not_var_args"
                                                                                                                                                         -2)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "ac_sym(t)"
                                                                                                                                                           "ti"
                                                                                                                                                           "tj_sub")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "not_var_args"
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "subset?"
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -2
                                                                                                                                                                     "x")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "vars_not_ac_not_var_args")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "ti"
                                                                                                                               "ac_sym(t)"
                                                                                                                               "tj_sub")
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "not_var_args_get_args2")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "ac_sym(t)"
                                                                                                                                   "ti"
                                                                                                                                   "tj_sub")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "subset?"
                                                                                                                                       -2)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -2
                                                                                                                                         "x")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "get_args_size")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "ac_sym(t)"
                                                                                                                     "tj"
                                                                                                                     "t")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "is_ac_sym?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3 -1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (emptyset const-decl "set" sets nil)
    (subset_emptyset formula-decl nil sets_lemmas nil)
    (subs_const formula-decl nil substitution nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (term_const_eta formula-decl nil term_adt nil)
    (vars_not_ac_mem_finset formula-decl nil termination_alg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (term_unit_extensionality formula-decl nil term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair type-eq-decl nil term_adt nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (term_app_eta formula-decl nil term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, pair] -> (ac_app?)]"
     term_adt nil)
    (get_args const-decl "args" term_properties nil)
    (map_member4 formula-decl nil map_theory nil)
    (num_arg def-decl "nat" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (member def-decl "bool" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (vars_not_ac_not_var_args formula-decl nil termination_alg nil)
    (get_args_size formula-decl nil term_properties nil)
    (mem_flatten_map formula-decl nil map_theory nil)
    (args_subs_ac formula-decl nil substitution nil)
    (not_var_args_get_args2 formula-decl nil term_properties nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> pair]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (vars_not_ac_apply_sub_unif_pair 0
  (vars_not_ac_apply_sub_unif_pair-1 nil 3824132490
   ("" (skeep)
    (("" (expand "apply_sub" 1)
      (("" (expand "subset?" 1)
        (("" (skolem 1 "X")
          (("" (prop)
            (("" (lemma "vars_not_ac_apply_sub_t")
              (("" (expand "vars_not_ac" -2)
                (("" (expand "member" -2)
                  (("" (expand "union" -2)
                    (("" (prop)
                      (("1" (inst -2 "sigma" "unif_pair`1")
                        (("1" (expand "subset?" -2)
                          (("1" (inst -2 "X")
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -2 "sigma" "unif_pair`2")
                        (("2" (expand "subset?" -2)
                          (("2" (inst -2 "X")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (union const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (empty? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (vars_not_ac_apply_sub_t formula-decl nil termination_alg nil)
    (apply_sub const-decl "unif_pair" unification nil))
   shostak))
 (vars_not_ac_apply_sub 0
  (vars_not_ac_apply_sub-1 nil 3824131326
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "vars_not_ac" 1 1)
              (("2" (expand "subset?" 1)
                (("2" (skolem 1 "X")
                  (("2" (prop)
                    (("2" (expand "member" -2)
                      (("2" (expand "union" -2)
                        (("2" (prop)
                          (("1"
                            (lemma "vars_not_ac_apply_sub_unif_pair")
                            (("1" (inst? -1)
                              (("1"
                                (expand "subset?" -1)
                                (("1"
                                  (inst -1 "X")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "sigma")
                            (("2" (expand "subset?" -2)
                              (("2"
                                (inst -2 "X")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (vars_not_ac_apply_sub_unif_pair formula-decl nil termination_alg
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg
     nil))
   shostak))
 (admissible_subterms_mem 0
  (admissible_subterms_mem-1 nil 3824391151
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "admissible_subterms" 1 1)
            (("2" (expand "member" 1 1)
              (("2" (expand "union" 1 1)
                (("2" (assert)
                  (("2" (inst -1 "t")
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (inst 1 "hd") (("1" (grind) nil nil))
                            nil)
                           ("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst 1 "unif_pair")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skolem -1 "unif_pair")
                          (("2" (flatten)
                            (("2" (hide -3)
                              (("2"
                                (expand "member" -2)
                                (("2"
                                  (prop)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (inst 1 "unif_pair")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (admissible_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     termination_alg nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (admissible_subterms_null 0
  (admissible_subterms_null-1 nil 3824997677
   ("" (lemma "subset_antisymmetric[term]")
    (("" (inst? -1)
      (("" (assert)
        (("" (hide 2)
          (("" (prop)
            (("1" (expand "subset?" 1)
              (("1" (skeep)
                (("1" (hide 1)
                  (("1" (expand "admissible_subterms" -1)
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "subset_emptyset[term]")
              (("2" (inst? -1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (admissible_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     termination_alg nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (subset_emptyset formula-decl nil sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (apply_ac_step_vars_not_ac_aux 0
  (apply_ac_step_vars_not_ac_aux-1 nil 3825152152
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (inst_step_vars_not_ac 0
  (inst_step_vars_not_ac-2 nil 3825153194
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 ("unif_prb"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "apply_ac_step" -2)
              (("" (lift-if)
                (("" (prop)
                  (("1" (expand "vars_not_ac" 1 2)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (lemma "vars_not_ac_lst_unif_prb_mem")
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "subset?" 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "subset?" -1)
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but -1)
                    (("2" (expand "instantiate_step" -1)
                      (("2" (expand "first_proj" -1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (name-replace "unif_pair" "car(unif_prb)")
                    (("3" (name-replace "t" "unif_pair`1")
                      (("3" (name-replace "s" "unif_pair`2")
                        (("3"
                          (name-replace "vars1" "lst_vars(unif_prb)")
                          (("3"
                            (name-replace "vars2"
                             "lst_vars(flatten(lst_unif_prb))")
                            (("3"
                              (name-replace "vars2avoid"
                               "append(vars1, vars2)")
                              (("3"
                                (name-replace
                                 "ac_results"
                                 "first_proj(solve_ac(t, s, vars2avoid, ac_sym(t)))")
                                (("3"
                                  (name-replace
                                   "new_ac_results_so_far"
                                   "put_in_head(ac_results, lst_unif_prb)")
                                  (("3"
                                    (lemma
                                     "func_flatten_map2[unif_prb, [unif_prb, sub]]")
                                    (("3"
                                      (inst? -1)
                                      (("3"
                                        (prop)
                                        (("1"
                                          (replace -1 -3)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "map_list_composition")
                                              (("1"
                                                (lemma
                                                 "func_flatten_map[[unif_prb, sub], unif_prb]")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -1 -3)
                                                      (("1"
                                                        (rewrite
                                                         "map_list_composition")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "mem_flatten_map2[list[unif_prb], unif_prb]")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "lst_unif_prb1")
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "o"
                                                                         -2)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (reveal
                                                                             -16)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "cdr(unif_prb)")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           2)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "union"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "union"
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "new_ac_results_so_far")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "put_in_head_mem2[unif_prb]")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "null?(lst_unif_prb1)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "instantiate_step"
                                                                                                                       -4)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "first_proj"
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "vars_not_ac"
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "instantiate_step"
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -5
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "fail1"
                                                                                                                               "instantiate_step(car(lst_unif_prb1), null)`3")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -4
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "member"
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "union"
                                                                                                                                         3)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "first_proj"
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "vars_not_ac"
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "union"
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "ac_results"
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "apply_ac_step_vars_not_ac_aux")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "s"
                                                                                                                                                     "null"
                                                                                                                                                     "ac_sym(t)"
                                                                                                                                                     "t"
                                                                                                                                                     "car(lst_unif_prb1)"
                                                                                                                                                     "vars2avoid")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "subset?"
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "x")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "member"
                                                                                                                                                               3)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "union"
                                                                                                                                                                 3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -2
                                                                                                                                                                     -3
                                                                                                                                                                     -4
                                                                                                                                                                     4)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (reveal
                                                                                                                                                                       -25
                                                                                                                                                                       -26
                                                                                                                                                                       -27)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "vars_not_ac"
                                                                                                                                                                         3)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -5
                                                                                                                                                                           -6
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "member"
                                                                                                                                                                             -4)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "union"
                                                                                                                                                                               -4)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -3
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "member"
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "union"
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "vars_not_ac"
                                                                                                                                                                                       2
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "member"
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "union"
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -3
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "member"
                                                                                                                                                 4)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "union"
                                                                                                                                                   4)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "all_ac_prb?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (skolem
                                                                                           1
                                                                                           "unif_pair1")
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "all_ac_prb?"
                                                                                               -4)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "unif_pair1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "first_proj_is_map[unif_prb, sub]")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "instantiate_step" 1)
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (lemma
                                           "instantiate_step_append")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (all_ac_prb? const-decl "bool" unification nil)
    (member def-decl "bool" list_props nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (instantiate_step def-decl "list[[unif_prb, sub]]" aux_unification
     nil)
    (apply_ac_step def-decl "list[unif_prb]" aux_unification nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil) nil
    (union const-decl "set" sets nil) nil
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (flatten def-decl "list[T]" list_theory nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (solve_ac const-decl "list[ac_sol]" aux_unification nil)
    (ac_sol type-eq-decl nil aux_unification nil)
    (string type-eq-decl nil strings nil)
    (func_flatten_map2 formula-decl nil map_theory nil)
    (func_flatten_map formula-decl nil map_theory nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    nil (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    nil
    (apply_ac_step_vars_not_ac_aux formula-decl nil termination_alg
     nil)
    (instantiate_step def-decl "[unif_prb, sub, bool]" aux_unification
     nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (put_in_head_mem2 formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (first_proj_is_map formula-decl nil list_theory2 nil)
    (O const-decl "T3" function_props nil)
    (map_list_composition formula-decl nil map_props nil)
    (instantiate_step_append formula-decl nil aux_unification nil) nil
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil
    (append def-decl "list[T]" list_props nil) nil
    (lst_vars def-decl "list[variable]" unification nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (ac_prb? const-decl "bool" unification nil)
    (member const-decl "bool" sets nil)
    (vars_not_ac_lst_unif_prb_mem formula-decl nil termination_alg
     nil))
   nil)
  (inst_step_vars_not_ac-1 nil 3824407815
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 ("unif_prb"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "apply_ac_step" -2)
              (("" (lift-if)
                (("" (prop)
                  (("1" (expand "vars_not_ac" 1 2)
                    (("1" (lift-if)
                      (("1" (assert) (("1" (postpone) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide-all-but -1)
                    (("2" (expand "instantiate_step" -1)
                      (("2" (expand "first_proj" -1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (name-replace "unif_pair" "car(unif_prb)")
                    (("3" (name-replace "t" "unif_pair`1")
                      (("3" (name-replace "s" "unif_pair`2")
                        (("3"
                          (name-replace "vars1" "lst_vars(unif_prb)")
                          (("3"
                            (name-replace "vars2"
                             "lst_vars(flatten(lst_unif_prb))")
                            (("3"
                              (name-replace "vars2avoid"
                               "append(vars1, vars2)")
                              (("3"
                                (name-replace
                                 "ac_results"
                                 "first_proj(solve_ac(t, s, vars2avoid, ac_sym(t)))")
                                (("3"
                                  (name-replace
                                   "new_ac_results_so_far"
                                   "put_in_head(ac_results, lst_unif_prb)")
                                  (("3"
                                    (lemma
                                     "func_flatten_map[unif_prb, [unif_prb, sub]]")
                                    (("3"
                                      (inst? -1)
                                      (("3"
                                        (prop)
                                        (("1"
                                          (replace -1 -3)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "map_list_composition")
                                              (("1"
                                                (lemma
                                                 "func_flatten_map[[unif_prb, sub], unif_prb]")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -1 -3)
                                                      (("1"
                                                        (rewrite
                                                         "map_list_composition")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "mem_flatten_map2[list[unif_prb], unif_prb]")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "lst_unif_prb1")
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "o"
                                                                         -2)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (reveal
                                                                             -16)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "cdr(unif_prb)")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           2)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "union"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "union"
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "new_ac_results_so_far")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "put_in_head_mem2[unif_prb]")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "null?(lst_unif_prb1)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "instantiate_step"
                                                                                                                       -4)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "first_proj"
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "vars_not_ac"
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "instantiate_step"
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -5
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "fail1"
                                                                                                                               "instantiate_step(car(lst_unif_prb1), null)`3")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -4
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "member"
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "union"
                                                                                                                                         3)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "first_proj"
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "vars_not_ac"
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "union"
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "ac_results"
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "apply_ac_step_vars_not_ac_aux")
                                                                                                                                                  (("1"
                                                                                                                                                    (postpone)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -3
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "member"
                                                                                                                                                 4)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "union"
                                                                                                                                                   4)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "all_ac_prb?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (skolem
                                                                                           1
                                                                                           "unif_pair1")
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "all_ac_prb?"
                                                                                               -4)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "unif_pair1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

