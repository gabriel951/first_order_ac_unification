%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % untried
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % untried
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % untried
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % untried
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % untried
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % untried
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % untried
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % untried
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % untried
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % untried
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % untried
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % untried
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % untried
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % untried
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % untried
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % untried
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % untried
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % untried
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % untried
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % untried
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % proved
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % proved
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % untried
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % proved
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % proved
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % untried
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % proved
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % proved
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % untried
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % proved
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % proved
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % proved
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % untried
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % proved
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % proved
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % proved
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % proved
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % proved
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % proved
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % proved
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % proved
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % proved
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % untried
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS

%% TCCs associated with theory diophantine
%% This file was automatically generated by PVS, please **do not modify** by hand.
diophantine_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 26) for
	% {k: posnat | divides(a1, k) AND divides(a2, k)}
	% expected type  (nonempty?[posnat])
	  % proved
	lcm_TCC1: OBLIGATION
	FORALL (a1: posnat, a2: posnat):
	    nonempty?[posnat]({k: posnat | divides(a1, k) AND divides(a2, k)})
	
	% Subtype TCC generated (at line 57, column 25) for  y
	% expected type  nat
	  % proved
	get_new_value_lst_TCC1: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int): y = k - a1 * car(value_lst) AND y > 0 IMPLIES y >= 0
	
	% Subtype TCC generated (at line 57, column 57) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC2: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 57, column 28) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC3: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 58, column 44) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC4: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES cons?[nat](value_lst)
	
	% Termination TCC generated (at line 58, column 15) for
	% get_new_value_lst(k, a1, cdr(value_lst))
	  % proved
	get_new_value_lst_TCC5: OBLIGATION
	FORALL (k: nat, a1: posnat, value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES
	     FORALL (y: int):
	       y = k - a1 * car(value_lst) AND NOT y > 0 IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% Subtype TCC generated (at line 56, column 30) for  value_lst
	% expected type  (cons?[nat])
	  % proved
	get_new_value_lst_TCC6: OBLIGATION
	FORALL (value_lst: list[nat]):
	    NOT null?(value_lst) IMPLIES cons?[nat](value_lst)
	
	% Subtype TCC generated (at line 69, column 50) for  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	  % proved
	get_lst_dio_matrix_TCC1: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat):
	       X = car(value_lst) IMPLIES cons?[dio_matrix](lst_dio_matrix)
	
	% Termination TCC generated (at line 71, column 34) for
	% get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))
	  % proved
	get_lst_dio_matrix_TCC2: OBLIGATION
	FORALL (value_lst: list[nat], lst_dio_matrix: list[dio_matrix]):
	    NOT null?(value_lst) AND NOT null?(lst_dio_matrix) IMPLIES
	     FORALL (X: nat, dio_matrix: dio_matrix, new_dio_matrix: list[list[nat]]):
	       X = car(value_lst) AND
	        dio_matrix = car(lst_dio_matrix) AND
	         new_dio_matrix = put_in_head[nat](dio_matrix, X)
	        IMPLIES <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 71, column 73) in decl nil for
	% term generated from get_lst_dio_matrix  lst_dio_matrix
	% expected type  (cons?[dio_matrix])
	% The subtype TCC (at line 69, column 21) in decl nil for
	% term generated from get_lst_dio_matrix  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 84, column 14) for  line1
	% expected type  list[nat]
	  % proved
	find_vectors_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) IMPLIES
	     FORALL (a1: posnat):
	       length(mult_t) = 1 AND a1 = car(mult_t) AND divides(a1, k) IMPLIES
	        FORALL (X1: nonneg_rat, line1: (cons?[rational])):
	          X1 = k / a1 AND line1 = cons(X1, null) IMPLIES
	           every[number]
	               (LAMBDA (x: number):
	                       number_field_pred(x) AND real_pred(x)
	                   AND rational_pred(x) AND integer_pred(x) AND (x >= 0))
	               (line1)
	
	% The subtype TCC (at line 71, column 57) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 71, column 73) in decl nil for
	 % term generated from get_lst_dio_matrix  lst_dio_matrix
	    % expected type  (cons?[dio_matrix])
	  % is subsumed by get_lst_dio_matrix_TCC1
	% The subtype TCC (at line 69, column 21) in decl nil for
	 % term generated from get_lst_dio_matrix  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 80, column 47) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 95, column 48) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC3: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 95, column 31) for
	% find_vectors(cdr(mult_t))
	  % proved
	find_vectors_TCC4: OBLIGATION
	FORALL (mult_t: list[posnat], k: nat):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES
	     FORALL (a1: posnat, X1_values: list[nat], new_k_lst: list[nat]):
	       a1 = car(mult_t) AND
	        X1_values = from_min2max[nat](0, floor(k / a1)) AND
	         new_k_lst = get_new_value_lst(k, a1, X1_values)
	        IMPLIES <<[posnat](cdr[posnat](mult_t), mult_t)
	
	% Subtype TCC generated (at line 88, column 15) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	find_vectors_TCC5: OBLIGATION
	FORALL (mult_t: list[posnat]):
	    NOT null?(mult_t) AND NOT length(mult_t) = 1 IMPLIES cons?[posnat](mult_t)
	
	% Subtype TCC generated (at line 129, column 84) for  bound - 1
	% expected type  nat
	  % proved
	dio_solver_TCC1: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 >= 0
	
	% Termination TCC generated (at line 129, column 55) for
	% dio_solver(mult_t1, mult_t2, bound - 1)
	  % proved
	dio_solver_TCC2: OBLIGATION
	FORALL (bound: nat): NOT bound = 0 IMPLIES bound - 1 < bound
	
	% Subtype TCC generated (at line 137, column 43) for  mult_t
	% expected type  (cons?[posnat])
	  % proved
	prod_TCC1: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat): x1 = car(value_lst) IMPLIES cons?[posnat](mult_t)
	
	% Termination TCC generated (at line 138, column 17) for
	% prod(cdr(mult_t))(cdr(value_lst))
	  % proved
	prod_TCC2: OBLIGATION
	FORALL (mult_t: list[posnat], value_lst: list[nat]):
	    NOT null?(value_lst) AND NOT null?(mult_t) IMPLIES
	     FORALL (x1: nat, a1: posnat):
	       x1 = car(value_lst) AND a1 = car(mult_t) IMPLIES
	        <<[nat](cdr[nat](value_lst), value_lst)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 138, column 26) in decl nil for
	% term generated from prod  mult_t
	% expected type  (cons?[posnat])
	% The subtype TCC (at line 137, column 22) in decl nil for
	% term generated from prod  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 152, column 66) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 138, column 39) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 138, column 26) in decl nil for
	 % term generated from prod  mult_t
	    % expected type  (cons?[posnat])
	  % is subsumed by prod_TCC1
	% The subtype TCC (at line 137, column 22) in decl nil for
	 % term generated from prod  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Termination TCC generated (at line 152, column 42) for
	% dio_matrix_correct?(cdr(dio_matrix), mult_t1, mult_t2)
	  % proved
	dio_matrix_correct?_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, mult_t1: list[posnat],
	          mult_t2: list[posnat]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat]):
	       row = car(dio_matrix) AND row_cor?(row, mult_t1, mult_t2) IMPLIES
	        <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 151, column 23) for  dio_matrix
	% expected type  (cons?)
	  % proved
	dio_matrix_correct?_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 169, column 46) for  n
	% expected type  below[length[nat](get_new_value_lst(k, a1, value_lst))]
	  % proved
	get_new_value_lst_nth_TCC1: OBLIGATION
	FORALL (a1: posnat, k, n: nat, value_lst: list[nat]):
	    k - a1 * nth(value_lst, n) >= 0 AND n < length(value_lst) IMPLIES
	     n < length[nat](get_new_value_lst(k, a1, value_lst))
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% The subtype TCC (at line 177, column 66) in decl nil for
	% term generated from put_in_head_mem  value_lst
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 191, column 29) for  row
	% expected type  (cons?[nat])
	  % proved
	get_lst_dio_matrix_mem_nth_TCC1: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES cons?[nat](row)
	
	% The subtype TCC (at line 177, column 40) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	% The subtype TCC (at line 177, column 66) in decl nil for
	 % term generated from put_in_head_mem  value_lst
	    % expected type  (cons?[nat])
	  % is subsumed by get_new_value_lst_TCC6
	
	% Subtype TCC generated (at line 191, column 51) for  n
	% expected type  below[length[nat](value_lst)]
	  % proved
	get_lst_dio_matrix_mem_nth_TCC2: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    (NOT null?(row)) AND
	     member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	      n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[nat](value_lst)
	
	% Subtype TCC generated (at line 192, column 41) for  n
	% expected type  below[length[dio_matrix](lst_dio_matrix)]
	  % proved
	get_lst_dio_matrix_mem_nth_TCC3: OBLIGATION
	FORALL (lst_dio_matrix: list[dio_matrix], n: nat, row, value_lst: list[nat]):
	    car(row) = nth(value_lst, n) AND
	     (NOT null?(row)) AND
	      member(row, nth(get_lst_dio_matrix(value_lst, lst_dio_matrix), n)) AND
	       n < length(get_lst_dio_matrix(value_lst, lst_dio_matrix))
	     IMPLIES n < length[dio_matrix](lst_dio_matrix)

END diophantine_TCCS