%
% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%

% File: aux_unification.pvs
% Description: auxiliary functions called in the unification algorithm.

%%%%%%%%%%%%%%%%%%%%%%%

aux_unification: THEORY
BEGIN
	IMPORTING unification, diophantine, list_theory[number], list_theory[args],
	list_theory[unif_pair], list_theory[dio_matrix], list_theory[bool],
	more_list_theory_props[term], list_theory[unif_prb], list_theory2[unif_prb, list[variable]],
	map_theory[list[unif_prb], unif_prb], map_theory[args, term],
	map_theory[list[unif_prb], [list[unif_prb], finite_set[variable]]],
	list_theory2[list[unif_prb], finite_set[variable]], list_theory2[unif_prb, finite_set[variable]]
		  

% this type is used in some parts of the code, but is deprecated. I am now using ac_sol2
ac_sol: TYPE = [unif_prb, list[variable]]

% an ac solution is a unification problem and a list of variables to stay away
ac_sol2: TYPE = [unif_prb, finite_set[variable]]

% we can simplify an ac-solution and instantiate variables. Therefore, we define

	IMPORTING list_theory[ac_sol], map_theory[dio_matrix, ac_sol]

sigma, sigma2, gamma: VAR sub

X, Y: VAR variable

unif_pair: VAR unif_pair
unif_prb, unif_prb1, unif_prb2, seen_unif_prb, unseen_unif_prb: VAR unif_prb
ac_results_so_far, lst_unif_prb, lst_unif_prb1, lst_unif_prb2: VAR list[unif_prb]

ac_results_subs: VAR list[[unif_prb, sub]]

sym: VAR string

t, s, t1, t2, tsigma: VAR term
args: VAR args
lst_args: VAR list[args]

mult_t1, mult_t2: VAR list[posnat]
row, col: VAR list[nat]
bound, i, n, num_col: VAR nat

dio_sol_matrix, dio_matrix, dio_matrix1: VAR dio_matrix
submatrix_sol_lst, dio_matrix_lst: VAR list[dio_matrix]

vars2avoid, new_vars2avoid: VAR list[variable]

set_vars2avoid: VAR finite_set[variable]

ac_sol: VAR ac_sol
ac_sol_lst: VAR list[ac_sol]

lst_unif_prb_and_subs: VAR list[[unif_prb, sub]]
lst_new_input: VAR list[[unif_prb, sub, finite_set[variable]]]

f: VAR ac_symbol

% this corresponds to function elimcom in Fages paper
elim_com_arg(t1, t2, sym): [args, list[nat], list[nat]] =
     LET
     % get arguments of t1 and t2
     args1 = get_args(sym)(t1), args2 = get_args(sym)(t2),
     % remove common elements
     no_rep_args1 = remove_common(args1, args2, equal?), 
     no_rep_args2 = remove_common(args2, args1, equal?),  
     % get arguments of t1 and their multiplicity
     (new_args_t1, new_coef_t1) = count_elem(null, null, no_rep_args1, equal?), 
     % get arguments of t2 and their multiplicity
     (new_args_t2, new_coef_t2) = count_elem(null, null, no_rep_args2, equal?)
     IN (append(new_args_t1, new_args_t2), new_coef_t1, new_coef_t2)

elim_com_arg_pos: LEMMA
   member(n, elim_com_arg(t1, t2, sym)`2) IMPLIES n > 0 
   
elim_com_arg_pos2: LEMMA
   member(n, elim_com_arg(t1, t2, sym)`3) IMPLIES n > 0 

% check if column i is empty (all coeficients equal to 0)
% you must make sure dio_matrix is a matrix and i < num_col_dio_matrix 
empty_col?(dio_matrix)(i): bool =
    LET col_i = get_col_i[nat](dio_matrix, i) IN 
    	IF (FORALL n: member(n, col_i) => n = 0) THEN TRUE
    	ELSE FALSE
    	ENDIF

% Constraint 1: Every column has at least one coefficient greater than 0 
const1?(dio_matrix, num_col): bool =
     LET empty_col_lst = map(empty_col?(dio_matrix))(from_min2max[nat](1, num_col)) IN
     IF member(TRUE, empty_col_lst) THEN FALSE
     ELSE TRUE 
     ENDIF
     
% Constraint 2: One coefficient is equal to one, the others are zero 
const2?(col): bool =
    IF count(1, col) = 1 AND count(0, col) = length(col) - 1 THEN TRUE
    ELSE FALSE
    ENDIF

% returns false if column "i" corresponds to a non-variable argument and does not satisfy constraint 2
% returns true otherwise
if_non_var_const2_col?(dio_matrix, args)(i): bool = 
    IF i > length(args) OR i = 0 THEN FALSE 
    ELSE LET arg = nth(args, i-1) IN 
    	     IF var?(arg) THEN TRUE
	     ELSE LET col_i = get_col_i[nat](dio_matrix, i) IN
	     	      const2?(col_i)
	     ENDIF
    ENDIF

% return true if all columns that correspond to a non-variable argument satisfy constraint 2
if_non_var_const2?(dio_matrix, args): bool =
     LET lst_non_var_const2 =
     	 map(if_non_var_const2_col?(dio_matrix, args))(from_min2max[nat](1, length(args))) IN
     IF member(FALSE, lst_non_var_const2) THEN FALSE
     ELSE TRUE
     ENDIF

% a nice submatrix is one that satisfies constraint 1 and for every column that is not a variable
% satisfies constraint 2
nice_submatrix?(dio_matrix, args): bool =
     length(args) > 0 AND matrix?(dio_matrix, length(args)) AND
     const1?(dio_matrix, length(args)) AND if_non_var_const2?(dio_matrix, args)

% receives a list of dio matrix
% returns a list of the ones that satisfy the property of being nice
get_nice_submatrices(dio_matrix_lst, args): RECURSIVE list[dio_matrix] =
    IF null?(dio_matrix_lst) THEN null
    ELSE LET dio_matrix = car(dio_matrix_lst) IN
    	 IF nice_submatrix?(dio_matrix, args) THEN
	    cons(dio_matrix, get_nice_submatrices(cdr(dio_matrix_lst), args))
	 ELSE get_nice_submatrices(cdr(dio_matrix_lst), args)
	 ENDIF
    ENDIF
MEASURE dio_matrix_lst BY << 


% extract the relevant submatrices. Each submatrix corresponds to one ac-solution
% this corresponds to function partit in Fages article
extract_submatrices(dio_sol_matrix, args): list[dio_matrix] =
    % check that the dio_sol_matrix is not only a list of lists but also a matrix
    IF nonmatrix?(dio_sol_matrix) THEN null
    ELSE LET all_submatrices = get_all_sublists(dio_sol_matrix) 
    	     IN get_nice_submatrices(all_submatrices, args)
    ENDIF
    	   
% add to lst_args[i] the term "t" the amount of times specified in row[i] for each i
add_new_arg(lst_args, row, t): RECURSIVE list[args] = 
    IF null?(lst_args) OR null?(row) THEN lst_args
    ELSE LET args = car(lst_args), 
    	     args2 = get_repeat_lst(t, car(row)), 
	     new_args = append(args, args2) IN 
	     cons(new_args, add_new_arg(cdr(lst_args), cdr(row), t))
    ENDIF
MEASURE row BY << 

% return a variable that is not in vars2avoid
get_new_var(vars2avoid): variable = select_greater[nat](vars2avoid) + 1

% the initial call to this function should be with lst_args = [null, ..., null]
% each row in dio_matrix gives rise to a new variable 
% add the new_variable to lst_args[i] the amount of times indicated in row[i],
% i ranges from 1 <= "i" <= length(lst_args)
get_pre_new_args(lst_args, dio_matrix, vars2avoid): RECURSIVE [list[args], list[variable]] = 
     IF null?(dio_matrix) THEN (lst_args, vars2avoid)
     ELSE LET row = car(dio_matrix), 
     	      new_var = get_new_var(vars2avoid), 
	      new_lst_args = add_new_arg(lst_args, row, variable(new_var)), 
	      new_vars2avoid = cons(new_var, vars2avoid) 
	      IN get_pre_new_args(new_lst_args, cdr(dio_matrix), new_vars2avoid)
     ENDIF
MEASURE dio_matrix BY << 

% this corresponds to function trans in Fages paper
% some simplification is done
dio_matrix2ac_sol(args, vars2avoid, sym)(dio_matrix): ac_sol = 
     LET num_col = length(args), 
     % get list of list of args
     null_lst = get_repeat_lst[args](null, num_col), 
     (pre_new_args, new_vars2avoid) = get_pre_new_args(null_lst, dio_matrix, vars2avoid),
     % for each "args" in pre_new_args, make an ac term whose args are "args"
     %new_args = get_ac_from_args_gt1(sym)(pre_new_args), 
     new_args = map(get_ac_from_args(sym))(pre_new_args),
     % pareate
     new_unif_prb = pareate(args, new_args) IN
     (new_unif_prb, new_vars2avoid) 

    
% this corresponds to function "dio" in Fages paper
solve_ac(t1, t2, vars2avoid, sym): list[ac_sol] =
    LET
%    eliminate common arguments from t1 and t2, obtaining the different arguments on each one
%    and their multiplicity
     (args, mult_t1, mult_t2) = elim_com_arg(t1, t2, sym),
%    calculate upper bound from which we can solve the diophantine equation
     bound = calculate_upper_bound(mult_t1, mult_t2),
%    solve diophantine equation until the upper bound 
     dio_sol_matrix = dio_solver(mult_t1, mult_t2, bound),
%    extract "nice" submatrices of solutions
     submatrix_sol_lst = extract_submatrices(dio_sol_matrix, args), 
%    for every diophantine submatrix obtain the corresponding unification solution
     results = map(dio_matrix2ac_sol(args, vars2avoid, sym))(submatrix_sol_lst) 
     IN results


% try to unify two terms t and s by instantiating them (may skip) 
% returns
%   1 - a substitution "sigma", indicating the substitution if it happened
%   2 - a boolean "skip" indicating that the terms can't be unified via a simple instantiation
%       and therefore we skipped 
%   3 - a boolean "impossible" indicating that the terms can't be unified
instantiate_step(t, s): [sub, bool, bool] =  
   IF var?(s) THEN
        IF (NOT member(V(s), vars(t))) THEN LET
	    sigma = cons((V(s), t), null), skip = FALSE, impossible = FALSE IN
	    (sigma, skip, impossible) 
	ELSIF var?(t) AND V(t) = V(s) THEN LET
	    sigma = null, skip = FALSE, impossible = FALSE IN 
	    (sigma, skip, impossible) 
	ELSE LET 
	    sigma = null, skip = FALSE, impossible = TRUE IN
	    (sigma, skip, impossible) 
	ENDIF
   ELSIF var?(t) THEN
        IF (NOT member(V(t), vars(s))) THEN LET
	    sigma = cons((V(t), s), null), skip = FALSE, impossible = FALSE IN
	    (sigma, skip, impossible) 
	ELSE LET 
	    sigma = null, skip = FALSE, impossible = TRUE IN
	    (sigma, skip, impossible) 
	ENDIF
   ELSE LET sigma = null, skip = TRUE, impossible = FALSE IN
   	(sigma, skip, impossible) 
   ENDIF

% extends "instantiate_step" to a unification problem
% receives:
%	1 - list of unification problem we still have not tried to instantiate
%       2 - list of unification problem we already have tried to instantiate
% 	2 - the substitution "sigma" computed so far
% returns:
%	1 - the unification problem after we make all the instantiations
% 	2 - the substitution computed
% 	3 - a boolean that is TRUE if one of the unification pairs
% 	    gave an impossible substitution
instantiate_step(unseen_unif_prb, seen_unif_prb, sigma): RECURSIVE [unif_prb, sub, bool] =
   IF null?(unseen_unif_prb) THEN (seen_unif_prb, sigma, FALSE) 
   ELSE LET 
   	(t, s) = car(unseen_unif_prb),
   	(delta, skip, fail) = instantiate_step(t, s) IN
	IF fail THEN (null, sigma, TRUE)
	ELSIF skip THEN  
	     instantiate_step(cdr(unseen_unif_prb), cons((t, s), seen_unif_prb), sigma)
	ELSE LET
	     new_unseen_unif_prb = apply_sub(delta, cdr(unseen_unif_prb)), 
	     new_seen_unif_prb = apply_sub(delta, seen_unif_prb), 
	     new_sigma = append(delta, sigma) IN
	     instantiate_step(new_unseen_unif_prb, new_seen_unif_prb, new_sigma)
	ENDIF
   ENDIF
MEASURE length(unseen_unif_prb)

% extends "instantiate_step" to a list of unification problems
% if a unification problem fails when we try to instantiate it, it is removed from the list
instantiate_step(lst_unif_prb): RECURSIVE list[[unif_prb, sub]] =
    IF null?(lst_unif_prb) THEN null
    ELSE LET
    	 unif_prb = car(lst_unif_prb),
    	 (new_unif_prb, sigma, fail) = instantiate_step(unif_prb, null, null) IN 
	 IF fail THEN instantiate_step(cdr(lst_unif_prb))
	 ELSE cons((new_unif_prb, sigma), instantiate_step(cdr(lst_unif_prb)))
	 ENDIF
    ENDIF
MEASURE lst_unif_prb BY << 


% choose the first non-ac unification problem it encounters
choose_not_ac(seen_unif_prb, unseen_unif_prb): RECURSIVE [unif_pair, unif_prb] =
   IF null?(unseen_unif_prb) THEN ((unit, unit), seen_unif_prb)
   ELSE LET unif_pair = car(unseen_unif_prb) IN
   	IF ac_prb?(unif_pair) THEN choose_not_ac(cons(unif_pair, seen_unif_prb), cdr(unseen_unif_prb))
	ELSE (unif_pair, append(seen_unif_prb, cdr(unseen_unif_prb)))
	ENDIF
   ENDIF
MEASURE unseen_unif_prb BY << 

% choose the unification pair that will be simplified
% prioritizes non-AC unification problems, if possible
% return (unif_pair, remaining_unification_problems)
% should be passed with unif_prb different than null
choose_unif_pair(unif_prb): [unif_pair, unif_prb] = 
   IF null?(unif_prb) THEN ((unit, unit), unif_prb)
   ELSIF all_ac_prb?(unif_prb) THEN (car(unif_prb), cdr(unif_prb))
   ELSE choose_not_ac(null, unif_prb) 
   ENDIF


%%%%%%%%%%%%%%%%%%%%%%% Theorems
% get nice submatrices and get_all_sublists
get_nice_submatrices_mem: LEMMA
   member(dio_matrix, get_nice_submatrices(dio_matrix_lst, args)) IMPLIES
   member(dio_matrix, dio_matrix_lst)
   
get_all_sublists_dio_cor: LEMMA
   member(dio_matrix1, get_all_sublists(dio_matrix)) AND 
   dio_matrix_correct?(dio_matrix, mult_t1, mult_t2) IMPLIES
   dio_matrix_correct?(dio_matrix1, mult_t1, mult_t2)

get_nice_submatrices_cor: LEMMA
   member(dio_matrix1, get_nice_submatrices(dio_matrix_lst, args)) IMPLIES
   nice_submatrix?(dio_matrix1, args)

% add new arg
add_new_arg_mem: LEMMA
   member(t1, add_new_arg(lst_args, row, t)) IMPLIES
   member(t1, lst_args) OR t1 = t

% extract submatrices
extract_submatrices_cor: LEMMA
   dio_matrix_correct?(dio_matrix, mult_t1, mult_t2) AND 
   member(dio_matrix1, extract_submatrices(dio_matrix, args))
   IMPLIES dio_matrix_correct?(dio_matrix1, mult_t1, mult_t2) 
   
extract_submatrices_nice: LEMMA
   member(dio_matrix1, extract_submatrices(dio_matrix, args)) IMPLIES
   nice_submatrix?(dio_matrix1, args)

% get_new_var, add_new_arg_len
get_new_var_select_greater: LEMMA
    select_greater[nat](cons(get_new_var(vars2avoid), vars2avoid)) =
    select_greater[nat](vars2avoid) + 1

get_new_var_correct: LEMMA
    NOT member(get_new_var(vars2avoid), vars2avoid)

add_new_arg_len: LEMMA
    length(add_new_arg(lst_args, row, t)) = length(lst_args)

add_new_arg_split: LEMMA
    split(add_new_arg(lst_args, row, t), n)`1 =
    add_new_arg(split(lst_args, n)`1, split[nat](row, n)`1, t)

add_new_arg_split2: LEMMA
    split(add_new_arg(lst_args, row, t), n)`2 =
    add_new_arg(split(lst_args, n)`2, split[nat](row, n)`2, t)

add_new_arg_all_var?: LEMMA
    all_var?(lst_args) IMPLIES all_var?(add_new_arg(lst_args, row, variable(n)))

add_new_arg_null_nth: LEMMA
    n < length(lst_args) AND length(lst_args) = length(row) AND null?(nth(add_new_arg(lst_args, row, t), n))
    IMPLIES null?(nth(lst_args, n)) AND nth(row, n) = 0
    
map_count_add_new_arg: LEMMA
    length(row) = length(lst_args) IMPLIES
    map(count(t1, equal?))(add_new_arg(lst_args, row, t2)) = 
    IF equal?(t1, t2) THEN sum_lsts(map(count(t1, equal?))(lst_args), row)
    ELSE map(count(t1, equal?))(lst_args)
    ENDIF
    
add_new_arg_var: LEMMA
    subset?(vars(add_new_arg(lst_args, row, t)), union(vars(lst_args), vars(t)))

% get_pre_new_args
get_pre_new_args_mem_mem_var: LEMMA
    member(args, get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1) AND member(t, args) IMPLIES
    member(t, lst_args) OR var?(t)

get_pre_new_args_mem_var: LEMMA
    member(args, get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1) AND
    NOT member(X, vars(lst_args)) AND member(X, vars(args)) IMPLIES
    NOT member(X, vars2avoid)

get_pre_new_args_len: LEMMA
    length(get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1) = length(lst_args) 

get_pre_new_args_all_var?: LEMMA
    all_var?(lst_args) IMPLIES
    all_var?(get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1)
    
split_get_pre_new_args: LEMMA
    split(get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1, n)`1 = 
    get_pre_new_args(split(lst_args, n)`1, split_matrix[nat](dio_matrix, n)`1, vars2avoid)`1

split_get_pre_new_args2: LEMMA
    split(get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1, n)`2 = 
    get_pre_new_args(split(lst_args, n)`2, split_matrix[nat](dio_matrix, n)`2, vars2avoid)`1

get_pre_new_args_null_nth: LEMMA
    n < length(lst_args) AND matrix?(dio_matrix, length(lst_args)) AND
    null?(nth(get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1, n)) IMPLIES
    null?(nth(lst_args, n)) AND empty_col?(dio_matrix)(n+1)
    
no_null_get_pre_new_args: LEMMA
    const1?(dio_matrix, length(lst_args)) AND length(lst_args) > 0 AND
    matrix?(dio_matrix, length(lst_args)) IMPLIES
    no_null_entries?(get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1)

get_pre_new_args_count: LEMMA
    matrix?(dio_matrix, length(lst_args)) IMPLIES
    dot_product(map(count(t, equal?))(get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1), mult_t1) =
    IF var?(t) AND V(t) > select_greater[nat](vars2avoid) AND
       V(t) <= select_greater[nat](vars2avoid) + length(dio_matrix) THEN
       LET n = V(t) - select_greater[nat](vars2avoid) IN 
       dot_product(nth(dio_matrix, n-1), mult_t1) +
       dot_product(map(count(t, equal?))(lst_args), mult_t1)
    ELSE dot_product(map(count(t, equal?))(lst_args), mult_t1)   
    ENDIF

% elim_com_arg
elim_com_arg_mem: LEMMA
   member(t, elim_com_arg(t1, t2, f)`1) IMPLIES
   member(t, get_args(f)(t1)) OR member(t, get_args(f)(t2))

elim_com_arg_correct: LEMMA
   LET (args, mult_t1, mult_t2) = elim_com_arg(t1, t2, f),
       (args1, args2) = split(args, length(mult_t1)),  
       args1_cor_mult = get_lst_mult(args1, mult_t1),
       args2_cor_mult = get_lst_mult(args2, mult_t2), 
       new_t1 = get_ac_from_args(f)(args1_cor_mult),
       new_t2 = get_ac_from_args(f)(args2_cor_mult)
       IN are_ac?(t1, t2, f) AND unifies?(sigma, (new_t1, new_t2))
       AND NOT null?(args1) AND NOT null?(args2) IMPLIES
       unifies?(sigma, (t1, t2)) 

elim_com_arg_solve_ac_null: LEMMA
   LET (args, mult_t1, mult_t2) = elim_com_arg(t1, t2, f),
       (args1, args2) = split(args, length(mult_t1)) IN
   null?(args1) OR null?(args2) IMPLIES
   solve_ac(t1, t2, vars2avoid, f) = null


% TODO: add a comment explaining
dio_matrix2ac_sol_correct: LEMMA
   LET (unif_prb, new_vars2avoid) = dio_matrix2ac_sol(args, vars2avoid, f)(dio_matrix), 
    	new_args = snd_proj(unif_prb),
	(args1, args2) = split(new_args, length(mult_t1)),
	args1_cor_mult = get_lst_mult(args1, mult_t1), 
	args2_cor_mult = get_lst_mult(args2, mult_t2) IN 
    dio_matrix_correct?(dio_matrix, mult_t1, mult_t2) AND
    length(args) = length(mult_t1) + length(mult_t2) AND
    nice_submatrix?(dio_matrix, args) IMPLIES
    perm?(map(get_args(f))(args1_cor_mult), map(get_args(f))(args2_cor_mult))

% solve_ac
solve_ac_soundness: LEMMA
    member((unif_prb, new_vars2avoid), solve_ac(t1, t2, vars2avoid, f)) AND   
    are_ac?(t1, t2, f) AND unifies?(sigma, unif_prb)
    IMPLIES unifies?(sigma, (t1, t2))

solve_ac_no_pair: LEMMA
    member(unif_prb2, first_proj(solve_ac(t, s, vars2avoid, f)))
    IMPLIES no_pair?(unif_prb2)

solve_ac_vars_vars2avoid: LEMMA
    member(unif_prb, first_proj(solve_ac(t, s, vars2avoid, f))) AND 
    member(t1, subterms(unif_prb)) AND NOT member(t1, subterms((t, s))) AND
    member(X, vars(t1)) IMPLIES NOT member(X, vars2avoid) 

solve_ac_mem_lhs: CONJECTURE 
    member(unif_prb, first_proj(solve_ac(t, s, vars2avoid, f))) AND
    member(t1, lhs(unif_prb)) IMPLIES
    (member(t1, get_args(f)(t)) OR member(t1, get_args(f)(s)))
    
solve_ac_disjoint_lhs_rhs: CONJECTURE
    member(unif_prb, first_proj(solve_ac(t, s, vars2avoid, f))) AND
    subset?(vars((t, s)), vars2avoid) IMPLIES
    disjoint?(list2set(lhs(unif_prb)), list2set(rhs(unif_prb)))
    
solve_ac_func: LEMMA
    member(unif_prb, first_proj(solve_ac(t, s, vars2avoid, f))) AND 
    func?(t1) AND member(t1, subterms(unif_prb)) AND NOT member(t1, subterms((t, s)))
    IMPLIES is_ac_sym?(t1, f)
    
solve_ac_same_func: LEMMA
    member(unif_prb, first_proj(solve_ac(t, s, vars2avoid, f))) AND 
    func?(t1) AND member(t1, subterms(unif_prb)) AND NOT member(t1, subterms((t, s))) AND
    func?(t2) AND member(t2, subterms(unif_prb)) AND NOT member(t2, subterms((t, s))) 
    IMPLIES same_func?(t1, t2)

% choose not ac 
choose_not_ac_seen: LEMMA
   member(unif_pair, seen_unif_prb) IMPLIES member(unif_pair, choose_not_ac(seen_unif_prb, unseen_unif_prb)`2)

choose_not_ac_unseen: LEMMA
   LET result = choose_not_ac(seen_unif_prb, unseen_unif_prb) IN 
   member(unif_pair, unseen_unif_prb)
   IMPLIES
   (unif_pair = result`1 OR member(unif_pair, result`2))
    
choose_not_ac_mem1: LEMMA
   NOT all_ac_prb?(unif_prb) IMPLIES 
   member(choose_not_ac(seen_unif_prb, unif_prb)`1, unif_prb)

choose_not_ac_mem2: LEMMA
   member(unif_pair, choose_not_ac(seen_unif_prb, unseen_unif_prb)`2) IMPLIES 
   member(unif_pair, seen_unif_prb) OR member(unif_pair, unseen_unif_prb)  

choose_not_ac2_size: LEMMA
   NOT all_ac_prb?(unseen_unif_prb) IMPLIES
   size(choose_not_ac(seen_unif_prb, unseen_unif_prb)`2) <
   size(seen_unif_prb) + size(unseen_unif_prb)

choose_not_ac_not_ac: LEMMA
   NOT ac_prb?(choose_not_ac(seen_unif_prb, unseen_unif_prb)`1)

% choose_unif
choose_unif_pair_mem: LEMMA
    member(unif_pair, unif_prb) IMPLIES
    (unif_pair = choose_unif_pair(unif_prb)`1 OR
    member(unif_pair, choose_unif_pair(unif_prb)`2))

choose_unif_pair_mem1: LEMMA
    NOT null?(unif_prb) IMPLIES 
    member(choose_unif_pair(unif_prb)`1, unif_prb) 

choose_unif_pair_mem2: LEMMA
    member(unif_pair, choose_unif_pair(unif_prb)`2) IMPLIES
    member(unif_pair, unif_prb)

choose_unif_size2: LEMMA
    NOT null?(unif_prb) IMPLIES 
    size(choose_unif_pair(unif_prb)`2) < size(unif_prb) 

choose_unif_correct: LEMMA
    ac_prb?(choose_unif_pair(unif_prb)`1) IMPLIES 
    all_ac_prb?(unif_prb)

% instantiate step
instantiate_step_skip: LEMMA
    LET skip = instantiate_step(t, s)`2 IN
    skip IMPLIES (NOT var?(t) AND NOT var?(s))

instantiate_step_append: LEMMA
    instantiate_step(append(lst_unif_prb1, lst_unif_prb2)) =
    append(instantiate_step(lst_unif_prb1), instantiate_step(lst_unif_prb2))

instantiate_step_img: LEMMA
    img(instantiate_step(t, s)`1) = emptyset OR
    img(instantiate_step(t, s)`1) = singleton(t) OR
    (img(instantiate_step(t, s)`1) = singleton(s) AND NOT var?(s))
    
instantiate_step_fail: LEMMA
    LET sigma = instantiate_step(t, s)`1, fail = instantiate_step(t, s)`3 IN
    NOT fail IMPLIES idempotent?(sigma) 
 
instantiate_step_idempotent2: LEMMA
    idempotent?(instantiate_step(t, s)`1)

instantiate_step_fail_null: LEMMA
    LET fail = instantiate_step(unif_prb, seen_unif_prb, sigma)`3
    IN fail AND NOT null?(unif_prb) IMPLIES instantiate_step(unif_prb, seen_unif_prb, sigma)`1 = null

instantiate_step_idempotent: LEMMA
    LET delta = instantiate_step(unif_prb, seen_unif_prb, sigma)`2 IN
    idempotent?(sigma) AND disjoint?(vars(unif_prb), dom(sigma)) IMPLIES 
    idempotent?(delta)

instantiate_step_sub: LEMMA
    member((unif_prb1, sigma), instantiate_step(lst_unif_prb)) IMPLIES
    idempotent?(sigma)  

instantiate_step_sub_append: LEMMA
    LET delta = instantiate_step(unif_prb, seen_unif_prb, sigma)`2,
        delta1 = instantiate_step(unif_prb, seen_unif_prb, null)`2 IN 
	delta = append(delta1, sigma)

instantiate_step2_no_effect: LEMMA
    instantiate_step(unif_prb, unif_prb1, sigma)`2 =
    instantiate_step(unif_prb, unif_prb2, sigma)`2

instantiate_step3_no_effect: LEMMA
    instantiate_step(unif_prb, unif_prb1, sigma)`3 =
    instantiate_step(unif_prb, unif_prb2, sigma)`3

instantiate_step3_no_effect2: LEMMA
    instantiate_step(unif_prb, unif_prb1, sigma)`3 =
    instantiate_step(unif_prb, unif_prb1, sigma2)`3
    
instantiate_step1_sub: LEMMA
    instantiate_step(unif_prb, seen_unif_prb, append(sigma, sigma2))`1 =
    instantiate_step(unif_prb, seen_unif_prb, sigma2)`1 

instantiate_step1_sub2: LEMMA
    instantiate_step(unif_prb, seen_unif_prb, sigma)`1 =
    instantiate_step(unif_prb, seen_unif_prb, null)`1 

instantiate_step1_append: LEMMA
    LET delta = instantiate_step(unif_prb, seen_unif_prb, null)`2,
        fail = instantiate_step(unif_prb, seen_unif_prb, null)`3 IN 
    NOT fail IMPLIES
    instantiate_step(unif_prb, seen_unif_prb, null)`1 = 
    append(instantiate_step(unif_prb, null, null)`1, apply_sub(delta, seen_unif_prb))

instantiate_step1_mem: LEMMA
    LET delta = instantiate_step(unif_prb, null, null)`2 IN
    member(t, instantiate_step(unif_prb, null, null)`1) IMPLIES 
    EXISTS s:
       NOT var?(s) AND member(s, unif_prb) AND t = subs(delta)(s)

instantiate_step_mem: LEMMA
    member((unif_prb, sigma), instantiate_step(lst_unif_prb)) IMPLIES
    EXISTS unif_prb1:
	 member(unif_prb1, lst_unif_prb) AND 
         unif_prb = instantiate_step(unif_prb1, null, null)`1 AND
	 sigma = instantiate_step(unif_prb1, null, null)`2
	 
instantiate_step_no_var_pair: LEMMA
    unif_prb1 = instantiate_step(unif_prb2, null, null)`1 AND no_pair?(unif_prb2)
    IMPLIES no_var_pair?(unif_prb1) 

instantiate_step_no_pair_img: LEMMA
     no_pair?(unif_prb) IMPLIES no_pair?(img(instantiate_step(unif_prb, null, null)`2))

instantiate_step_sub_im_under: LEMMA
    LET delta = instantiate_step(unif_prb, null, null)`2 IN
    member(t, subterms(img(delta))) AND im_under?(X, t) AND no_pair?(unif_prb) IMPLIES
    EXISTS Y, s:
        member(s, subterms(unif_prb)) AND subs(delta)(Y) = variable(X)
	AND im_under?(Y, s) AND same_func?(t, s)

instantiate_step_var_member: CONJECTURE 
     LET delta = instantiate_step(unif_prb, null, null)`2 IN 
     X /= Y AND subs(delta)(X) = variable(Y) IMPLIES
     member(variable(X), unif_prb) AND member(variable(Y), unif_prb)

instantiate_step: CONJECTURE
    LET delta = instantiate_step(unif_prb, null, null)`2 IN 
    disjoint?(list2set(lhs(unif_prb)), list2set(rhs(unif_prb))) AND
    member(variable(X), rhs(unif_prb))
    IMPLIES subs(delta)(X) /= variable(X)

END aux_unification 
