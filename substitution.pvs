%
% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%

% File: substitution.pvs
% Description: Definition of a substitution and related properties

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

substitution: THEORY
BEGIN
	IMPORTING basic_notions, Term[Constant, Variable, F_symbol, Ac_f_symbol]
	
X, Y: VAR Variable
t, s: VAR Term

% a basic substitution is one of the form {variable->term}, as in X->s
Basic_sub: TYPE = [Variable, Term]
sigma_basic: VAR Basic_sub

% applies the substitution X -> s in the term t
subs(sigma_basic, t): RECURSIVE Term =
    LET X = sigma_basic`1,
    	s = sigma_basic`2
	IN CASES t OF
           const(a): const(a),
	   variable(Y): IF X = Y THEN s
		     	ELSE variable(Y)
		     	ENDIF,
	   unit: unit,
	   pair(t1, t2): pair(subs(sigma_basic, t1), subs(sigma_basic, t2)),
	   app(f, arg): app(f, subs(sigma_basic, arg)),
	   ac_app(f, arg): ac_app(f, subs(sigma_basic, arg))
    ENDCASES
MEASURE t by <<

% A substitution is represented as a list of basic substitutions
% This way the composition of substitutions sigma and delta, represented in math as
% "(sigma o delta)" can be implemented as "append(sigma, delta)".
Sub: TYPE = list[Basic_sub]

sigma, delta: VAR Sub

% action of a substitution sigma on a term t.
% notice that in "(sigma o delta)(t) = sigma(delta(t))" we apply the substitution delta first,
% and the substitution sigma after. Since "(sigma o delta)(t)" is represented as
% "append(sigma, delta)", we must apply first the basic substitution in the tail of the list
Subs(sigma, t): RECURSIVE Term =
    CASES sigma OF
    	  null: t,
	  cons(head, tail): subs(head, Subs(tail, t))
    ENDCASES
MEASURE sigma BY << 

END substitution
