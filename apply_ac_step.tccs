%% TCCs associated with theory apply_ac_step
%% This file was automatically generated by PVS, please **do not modify** by hand.
apply_ac_step_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 53, column 42) for  unif_prb
	% expected type  (cons?[unif_pair])
	  % untried
	simplify_TCC1: OBLIGATION
	FORALL (unif_prb: unif_prb):
	    NOT null?(unif_prb) IMPLIES
	     FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	             s: term[constant, variable, f_symbol, ac_symbol]):
	       (t = car(unif_prb)`1 AND s = car(unif_prb)`2) AND equal?(t, s) IMPLIES
	        cons?[unif_pair](unif_prb)
	
	% Termination TCC generated (at line 53, column 29) for
	% simplify(cdr(unif_prb))
	  % untried
	simplify_TCC2: OBLIGATION
	FORALL (unif_prb: unif_prb):
	    NOT null?(unif_prb) IMPLIES
	     FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	             s: term[constant, variable, f_symbol, ac_symbol]):
	       (t = car(unif_prb)`1 AND s = car(unif_prb)`2) AND equal?(t, s) IMPLIES
	        <<[unif_pair](cdr[unif_pair](unif_prb), unif_prb)
	
	% Subtype TCC generated (at line 54, column 32) for  unif_prb
	% expected type  (cons?[unif_pair])
	  % untried
	simplify_TCC3: OBLIGATION
	FORALL (unif_prb: unif_prb):
	    NOT null?(unif_prb) IMPLIES
	     FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	             s: term[constant, variable, f_symbol, ac_symbol]):
	       (t = car(unif_prb)`1 AND s = car(unif_prb)`2) AND NOT equal?(t, s)
	        IMPLIES cons?[unif_pair](unif_prb)
	
	% Termination TCC generated (at line 54, column 19) for
	% simplify(cdr(unif_prb))
	  % untried
	simplify_TCC4: OBLIGATION
	FORALL (unif_prb: unif_prb):
	    NOT null?(unif_prb) IMPLIES
	     FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	             s: term[constant, variable, f_symbol, ac_symbol]):
	       (t = car(unif_prb)`1 AND s = car(unif_prb)`2) AND NOT equal?(t, s)
	        IMPLIES <<[unif_pair](cdr[unif_pair](unif_prb), unif_prb)
	
	% Subtype TCC generated (at line 52, column 25) for  unif_prb
	% expected type  (cons?[unif_pair])
	  % untried
	simplify_TCC5: OBLIGATION
	FORALL (unif_prb: unif_prb):
	    NOT null?(unif_prb) IMPLIES cons?[unif_pair](unif_prb)
	
	% Subtype TCC generated (at line 70, column 37) for  ac_results_subs
	% expected type  (cons?[[unif_prb, sub]])
	  % untried
	input_apply_ac_step_TCC1: OBLIGATION
	FORALL (ac_results_subs: list[[unif_prb, sub]], unseen_unif_prb: unif_prb,
	          seen_unif_prb: unif_prb, sigma: sub,
	          vars2avoid: finite_set[variable]):
	    NOT null?(ac_results_subs) IMPLIES
	     FORALL (unif_prb1: unif_prb, delta: sub):
	       unif_prb1 = car(ac_results_subs)`1 AND delta = car(ac_results_subs)`2
	        IMPLIES
	        FORALL (new_unseen_unif_prb: unif_prb,
	                new_seen_unif_prb: list[unif_pair], new_sigma: list[basic_sub],
	                input: [unif_prb, unif_prb, sub, finite_set[variable]]):
	          new_unseen_unif_prb = apply_sub(delta, unseen_unif_prb) AND
	           new_seen_unif_prb =
	            append(unif_prb1, apply_sub(delta, seen_unif_prb))
	            AND
	            new_sigma = append(delta, sigma) AND
	             input =
	              (new_unseen_unif_prb, new_seen_unif_prb, new_sigma, vars2avoid)
	           IMPLIES cons?[[unif_prb, sub]](ac_results_subs)
	
	% Termination TCC generated (at line 70, column 13) for
	% input_apply_ac_step(cdr(ac_results_subs), unseen_unif_prb,
	%                     seen_unif_prb, sigma, vars2avoid)
	  % untried
	input_apply_ac_step_TCC2: OBLIGATION
	FORALL (ac_results_subs: list[[unif_prb, sub]], unseen_unif_prb: unif_prb,
	          seen_unif_prb: unif_prb, sigma: sub,
	          vars2avoid: finite_set[variable]):
	    NOT null?(ac_results_subs) IMPLIES
	     FORALL (unif_prb1: unif_prb, delta: sub):
	       unif_prb1 = car(ac_results_subs)`1 AND delta = car(ac_results_subs)`2
	        IMPLIES
	        FORALL (new_unseen_unif_prb: unif_prb,
	                new_seen_unif_prb: list[unif_pair], new_sigma: list[basic_sub],
	                input: [unif_prb, unif_prb, sub, finite_set[variable]]):
	          new_unseen_unif_prb = apply_sub(delta, unseen_unif_prb) AND
	           new_seen_unif_prb =
	            append(unif_prb1, apply_sub(delta, seen_unif_prb))
	            AND
	            new_sigma = append(delta, sigma) AND
	             input =
	              (new_unseen_unif_prb, new_seen_unif_prb, new_sigma, vars2avoid)
	           IMPLIES
	           length[[unif_prb, sub]](cdr[[unif_prb, sub]](ac_results_subs)) <
	            length[[unif_prb, sub]](ac_results_subs)
	
	% Subtype TCC generated (at line 65, column 33) for  ac_results_subs
	% expected type  (cons?[[unif_prb, sub]])
	  % untried
	input_apply_ac_step_TCC3: OBLIGATION
	FORALL (ac_results_subs: list[[unif_prb, sub]]):
	    NOT null?(ac_results_subs) IMPLIES cons?[[unif_prb, sub]](ac_results_subs)
	
	% Subtype TCC generated (at line 91, column 63) for  t
	% expected type  (ac_app?)
	  % untried
	apply_ac_step_TCC1: OBLIGATION
	FORALL (unseen_unif_prb: unif_prb, seen_unif_prb: unif_prb,
	          vars2avoid: finite_set[variable]):
	    all_ac_prb?(unseen_unif_prb) AND NOT null?(unseen_unif_prb) IMPLIES
	     FORALL (unif_pair: unif_pair):
	       unif_pair = car(unseen_unif_prb) IMPLIES
	        FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	                s: term[constant, variable, f_symbol, ac_symbol]):
	          t = unif_pair`1 AND s = unif_pair`2 IMPLIES
	           FORALL (cur_vars2avoid: finite_set[variable],
	                   lst_vars2avoid: list[variable]):
	             cur_vars2avoid =
	              union(vars(unseen_unif_prb),
	                    union(vars2avoid, vars(seen_unif_prb)))
	              AND lst_vars2avoid = finset2list[variable](cur_vars2avoid)
	              IMPLIES ac_app?[constant, variable, f_symbol, ac_symbol](t)
	
	% Termination-subtype TCC generated (at line 98, column 32) for  input_lst
	% expected type  [{z: [unif_prb, unif_prb, sub, finite_set[variable]] |
	%     length(z`1) < length(unseen_unif_prb)} ->
	%    list[ac_sol_simp]]
	  % untried
	apply_ac_step_TCC2: OBLIGATION
	FORALL (unseen_unif_prb: unif_prb, seen_unif_prb: unif_prb, sigma: sub,
	          vars2avoid: finite_set[variable]):
	    all_ac_prb?(unseen_unif_prb) AND NOT null?(unseen_unif_prb) IMPLIES
	     FORALL (unif_pair: unif_pair):
	       unif_pair = car(unseen_unif_prb) IMPLIES
	        FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	                s: term[constant, variable, f_symbol, ac_symbol]):
	          t = unif_pair`1 AND s = unif_pair`2 IMPLIES
	           FORALL (cur_vars2avoid: finite_set[variable],
	                   lst_vars2avoid: list[variable], ac_results: list[unif_prb],
	                   new_vars2avoid: finite_set[variable],
	                   ac_results_subs: list[[unif_prb, sub]]):
	                  (cur_vars2avoid =
	                    union(vars(unseen_unif_prb),
	                          union(vars2avoid, vars(seen_unif_prb))))
	              AND (lst_vars2avoid = finset2list[variable](cur_vars2avoid))
	              AND (ac_results =
	                    first_proj(solve_ac(t, s, lst_vars2avoid, ac_sym(t))))
	              AND (new_vars2avoid =
	                    vars(sec_proj(solve_ac(t, s, lst_vars2avoid, ac_sym(t)))))
	              AND (ac_results_subs = instantiate_step(ac_results))
	              AND NOT null?(ac_results_subs)
	              IMPLIES
	              FORALL (input_lst:
	                        list[[unif_prb, unif_prb, sub, finite_set[variable]]]):
	                input_lst =
	                 input_apply_ac_step(ac_results_subs, cdr(unseen_unif_prb),
	                                     seen_unif_prb, sigma, new_vars2avoid)
	                 IMPLIES
	                 every[[list[unif_pair], list[unif_pair], list[basic_sub],
	                        finite_set[variable]]]
	                     (LAMBDA (z:
	                                [unif_prb, unif_prb, sub,
	                                 finite_set[variable]]):
	                        length[unif_pair](z`1) <
	                         length[unif_pair](unseen_unif_prb))
	                     (input_lst)
	
	% The subtype TCC (at line 92, column 70) in decl nil for
	 % term generated from apply_ac_step  t
	    % expected type  (ac_app?)
	  % is subsumed by apply_ac_step_TCC1
	% The subtype TCC (at line 96, column 58) in decl nil for
	 % term generated from apply_ac_step  unseen_unif_prb
	    % expected type  (cons?[unif_pair])
	  % is subsumed by simplify_TCC5
	% The termination TCC (at line 83, column 0) in decl nil for
	 % term generated from apply_ac_step  apply_ac_step(x)
	  % was not generated because it simplifies to TRUE.
	% The termination-subtype TCC (at line 98, column 32) in decl nil for
	 % term generated from apply_ac_step  input_lst
	    % expected type  [{z: [unif_prb, unif_prb, sub, finite_set[variable]] |
	                   %     length(z`1) < length(unseen_unif_prb)} ->
	                   %    list[ac_sol_simp]]
	  % is subsumed by apply_ac_step_TCC2
	% The subtype TCC (at line 87, column 20) in decl nil for
	 % term generated from apply_ac_step  unseen_unif_prb
	    % expected type  (cons?[unif_pair])
	  % is subsumed by simplify_TCC5
	% The subtype TCC (at line 110, column 20) in decl nil for
	 % term generated from next_input?  unseen_unif_prb
	    % expected type  (cons?[unif_pair])
	  % is subsumed by simplify_TCC5
	% The subtype TCC (at line 114, column 63) in decl nil for
	 % term generated from next_input?  t
	    % expected type  (ac_app?)
	  % is subsumed by apply_ac_step_TCC1
	% The subtype TCC (at line 115, column 70) in decl nil for
	 % term generated from next_input?  t
	    % expected type  (ac_app?)
	  % is subsumed by apply_ac_step_TCC1

END apply_ac_step_TCCS