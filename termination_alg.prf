(termination_alg
 (vars_under2more_TCC1 0
  (vars_under2more_TCC1-1 nil 3819316174 ("" (tcc))
   ((injective? const-decl "bool" functions nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (vars_under2more subtype
    "{X | EXISTS t, s:      term_properties.dif_func?(termination_alg.t, termination_alg.s) AND term_properties.im_under?(termination_alg.X, termination_alg.t) AND term_properties.im_under?(termination_alg.X, termination_alg.s) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.t, unification.subterms(termination_alg.unif_prb)) AND sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, unification.subterms(termination_alg.unif_prb))}"
    "finite_set[variable]")))
 (vars_not_ac_TCC1 0
  (vars_not_ac_TCC1-1 nil 3819454827 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.t1)" "nil")))
 (vars_not_ac_TCC2 0
  (vars_not_ac_TCC2-1 nil 3819454827 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.t2)" "nil")))
 (vars_not_ac_TCC3 0
  (vars_not_ac_TCC3-1 nil 3819454827 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(termination_alg.arg)" "nil")))
 (vars_not_ac_TCC4 0
  (vars_not_ac_TCC1-1 nil 3819454692
   ("" (skeep)
    (("" (lemma "every_nth[term[number, number, f_symbol, ac_symbol]]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (skeep)
              (("" (typepred "i")
                (("" (lemma "not_var_args_nth2")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (skeep)
                        (("" (replace -2 1)
                          (("" (lemma "get_args_nth")
                            (("" (inst? -1)
                              ((""
                                (split -1)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma "subterms_aux_TCC")
                                      (("1" (inst? -1) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "ac_select_size")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (rewrite "get_args_len")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_args_nth formula-decl nil term_properties nil)
    (subterms_aux_TCC formula-decl nil term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (select def-decl "term" term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (get_args const-decl "args" term_properties nil)
    (not_var_args def-decl "args" term_properties nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ac_select_size formula-decl nil term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (get_args_len formula-decl nil term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_var_args_nth2 formula-decl nil term_properties nil)
    (every_nth formula-decl nil list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil))
   shostak
   (vars_not_ac termination-subtype
    "term_properties.not_var_args(termination_alg.sym)(termination_alg.t)"
    "[{z: term_adt[constant, variable, f_symbol, ac_symbol].term | reals.<(term_properties.size(z), term_properties.size(termination_alg.t))} -> finite_set[variable]]")))
 (vars_not_ac_TCC5 0
  (vars_not_ac_TCC5-1 nil 3824129283 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (vars_not_ac_TCC6 0
  (vars_not_ac_TCC6-1 nil 3824129283 ("" (termination-tcc) nil nil) nil
   nil
   (vars_not_ac termination
    "termination_alg.vars_not_ac(list_adt[unif_pair].cdr(termination_alg.unif_prb))"
    "nil")))
 (vars_not_ac_TCC7 0
  (vars_not_ac_TCC7-1 nil 3824129283 ("" (subtype-tcc) nil nil) nil nil
   (vars_not_ac subtype "termination_alg.unif_prb"
    "(list_adt[unif_pair].cons?)")))
 (vars_not_ac_TCC8 0
  (vars_not_ac_TCC5-1 nil 3823285901 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (vars_not_ac subtype "termination_alg.fin_set_t"
    "(sets[term[constant, variable, f_symbol, ac_symbol]].nonempty?)")))
 (vars_not_ac_TCC9 0
  (vars_not_ac_TCC6-1 nil 3823285901 ("" (termination-tcc) nil nil) nil
   shostak
   (vars_not_ac termination
    "termination_alg.vars_not_ac(sets[term[constant, variable, f_symbol, ac_symbol]].rest(termination_alg.fin_set_t))"
    "nil")))
 (admissible_subterms_TCC1 0
  (admissible_subterms_TCC1-1 nil 3819316174
   ("" (skeep)
    (("" (lemma "finite_subset[term]")
      (("" (inst -1 "prop_subterms(t)" "_")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "subset?" 1)
                (("" (skeep) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (prop_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil))
   shostak
   (admissible_subterms subtype
    "{s | booleans.AND(sets[term[constant, variable, f_symbol, ac_symbol]].member(termination_alg.s, term_properties.prop_subterms(termination_alg.t)), (booleans.NOT)(term_adt[constant, variable, f_symbol, ac_symbol].var?(termination_alg.s)))}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (vars_not_ac_vars_t 0
  (vars_not_ac_vars_t-1 nil 3823286315
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "member" -2)
                  (("4" (expand "union" -2)
                    (("4" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (prop)
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "vars" 4)
                                (("1"
                                  (expand "member" 4)
                                  (("1"
                                    (expand "union" 4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (prop)
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "vars" 4)
                                (("1"
                                  (expand "member" 4)
                                  (("1"
                                    (expand "union" 4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst -3 "arg(t)")
                  (("5" (prop)
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (expand "vars" 5)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 2 3 4 5)
                    (("1" (lemma "mem_union_map[term, variable]")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (skolem -1 "ti")
                            (("1" (flatten)
                              (("1"
                                (hide -4)
                                (("1"
                                  (expand "vars" 1)
                                  (("1"
                                    (lemma
                                     "mem_union_map[term, variable]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (inst 1 "ti")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "not_var_args_get_args")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -4 "ti")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst -1 "X")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "not_var_args_get_args")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "get_args_size")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 7) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (term2 adt-accessor-decl "[pair -> term]" term_adt nil)
    (term1 adt-accessor-decl "[pair -> term]" term_adt nil)
    (pair type-eq-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (not_var_args const-decl "args" term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (not_var_args_get_args formula-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (vars_not_ac_vars_unif_pair 0
  (vars_not_ac_vars_unif_pair-1 nil 3823286219
   ("" (skeep)
    (("" (expand "vars" 1)
      (("" (expand "vars_not_ac" -1)
        (("" (expand "member")
          (("" (expand "union")
            (("" (prop)
              (("1" (lemma "vars_not_ac_vars_t")
                (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
               ("2" (lemma "vars_not_ac_vars_t")
                (("2" (inst -1 "X" "unif_pair`2")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (union const-decl "set" sets nil)
    (vars_not_ac_vars_t formula-decl nil termination_alg nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (vars const-decl "finite_set[variable]" unification nil))
   shostak))
 (vars_not_ac_vars 0
  (vars_not_ac_vars-1 nil 3823285901
   ("" (induct "unif_prb" 1)
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "vars_not_ac" -2)
            (("2" (expand "member" -2)
              (("2" (expand "union" -2)
                (("2" (prop)
                  (("1" (expand "vars" 1)
                    (("1" (expand "member" 1)
                      (("1" (expand "union" 1)
                        (("1" (prop)
                          (("1" (lemma "vars_not_ac_vars_unif_pair")
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "vars" 1)
                    (("2" (expand "member" 1)
                      (("2" (expand "union" 1)
                        (("2" (prop)
                          (("2" (inst? -2) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (vars_not_ac_vars_unif_pair formula-decl nil termination_alg nil))
   shostak))
 (vars_not_ac_unif_prb_mem 0
  (vars_not_ac_unif_prb_mem-1 nil 3824130542
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "X")
            (("2" (expand "vars_not_ac" 1 1)
              (("2" (expand "member" 1 1)
                (("2" (expand "union" 1 1)
                  (("2" (prop)
                    (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (inst 1 "unif_pair")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (inst 1 "hd") (("3" (grind) nil nil)) nil)
                     ("4" (skeep)
                      (("4" (inst 3 "unif_pair")
                        (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_not_ac_singleton 0
  (vars_not_ac_singleton-1 nil 3824130760
   ("" (skeep)
    (("" (expand "vars_not_ac" 1 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide 1) (("1" (grind) nil nil)) nil)
           ("2" (lemma "rest_singleton[term]")
            (("2" (inst? -1)
              (("2" (replace -1 2)
                (("2" (expand "vars_not_ac" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (lemma "union_empty[variable]")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (replace -1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "choose_singleton[term]")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (rest_singleton formula-decl nil sets_lemmas nil))
   shostak))
 (vars_not_ac_apply_sub_t 0
  (vars_not_ac_apply_sub_t-1 nil 3824132734
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars_not_ac" 1 3)
            (("" (lift-if)
              (("" (prop)
                (("1" (lemma "term_const_eta")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 :dir rl)
                      (("1" (hide -1)
                        (("1" (rewrite "subs_const")
                          (("1" (expand "vars_not_ac" 1 1)
                            (("1" (lemma "subset_emptyset[variable]")
                              (("1" (inst? -1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                 ("4" (postpone) nil nil) ("5" (postpone) nil nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (postpone) nil nil)
                   ("2" (hide 3 -1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vars_not_ac_apply_sub_unif_pair 0
  (vars_not_ac_apply_sub_unif_pair-1 nil 3824132490
   ("" (skeep)
    (("" (expand "apply_sub" 1)
      (("" (expand "subset?" 1)
        (("" (skolem 1 "X") (("" (prop) (("" (postpone) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vars_not_ac_apply_sub 0
  (vars_not_ac_apply_sub-1 nil 3824131326
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "vars_not_ac" 1 1)
              (("2" (expand "subset?" 1)
                (("2" (skolem 1 "X")
                  (("2" (prop)
                    (("2" (expand "member" -2)
                      (("2" (expand "union" -2)
                        (("2" (prop)
                          (("1" (postpone) nil nil)
                           ("2" (inst -2 "sigma")
                            (("2" (expand "subset?" -2)
                              (("2"
                                (inst -2 "X")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

