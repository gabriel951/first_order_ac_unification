%
% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%

% File: unification_alg.pvs
% Description: Definition of the first order unification algorithm 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

unification_alg: THEORY
BEGIN
	IMPORTING apply_ac_step, list_theory[sub], termination_alg

sigma, sigma1, delta: VAR sub
vars2avoid: VAR finite_set[variable]
unif_prb: VAR unif_prb
id: VAR sub

% the AC-unification algorithm 
unify(unif_prb, sigma, vars2avoid): RECURSIVE list[sub] =
  IF null?(unif_prb) THEN cons(sigma, null)
  ELSE LET
     (unif_pair, unif_prb1) = choose_unif_pair(unif_prb), 
     (t, s) = unif_pair IN 
     IF var?(s) AND (NOT member(V(s), vars(t))) THEN LET
     	sigma1 = cons((V(s), t), null), 
	new_sigma = append(sigma1, sigma), 
	new_unif_prb = apply_sub(sigma1, unif_prb1) IN
	unify(new_unif_prb, new_sigma, vars2avoid) 

     ELSE CASES t OF
        const(a):
	  IF s = const(a) THEN unify(unif_prb1, sigma, vars2avoid)
	  ELSE null
	  ENDIF,

	variable(X):
	  IF (NOT member(X, vars(s))) THEN LET
	    sigma1 = cons((X, s), null), 
	    new_sigma = append(sigma1, sigma), 
	    new_unif_prb = apply_sub(sigma1, unif_prb1) IN
	    unify(new_unif_prb, new_sigma, vars2avoid)
	  ELSIF s = variable(X) THEN LET id = null IN cons(id, null) 
	  ELSE null
	  ENDIF,

	unit:
	  IF s = unit THEN unify(unif_prb1, sigma, vars2avoid)  
	  ELSE null 
	  ENDIF,

	pair(t1, t2):
	  IF NOT pair?(s) THEN null
	  ELSE LET
	       unif_pair1 = (t1, term1(s)), unif_pair2 = (t2, term2(s)), 
	       new_unif_prb = cons(unif_pair1, cons(unif_pair2, unif_prb1)) IN
	       unify(new_unif_prb, sigma, vars2avoid) 
	  ENDIF,

	app(f, arg):
	  IF NOT app?(s) OR f /= f_sym(s) THEN null 
	  ELSE LET new_unif_pair = (arg, arg(s)),
	       	   new_unif_prb = cons(new_unif_pair, unif_prb1) IN
		   unify(new_unif_prb, sigma, vars2avoid)
	  ENDIF,

	ac_app(f, ac_arg):
	  IF NOT ac_app?(s) OR f /= ac_sym(s) THEN null
	  ELSE LET
	     input_lst = apply_ac_step(simplify(unif_prb), null, sigma, vars2avoid), 
	     lst_results = map(unify)(input_lst) IN 
	     flatten(lst_results) 
	  ENDIF
        ENDCASES
    ENDIF
  ENDIF
MEASURE lex4(card(vars_not_ac(unif_prb)), card(vars_under2more(unif_prb)),
	card(admissible_subterms(unif_prb)), size(unif_prb))

% Theorem of Correctness
%unify_alg_correct: CONJECTURE
%    member(delta, unify(unif_prb, sigma, vars2avoid)) IMPLIES 
%    unifies?(delta, unif_prb)

% Theorem of Completeness
%unify_alg_complete: CONJECTURE
%    unifies?(delta, unif_prb) IMPLIES EXISTS sigma1:
%    member(sigma1, unify(unif_prb, sigma, vars2avoid)) AND more_general?(sigma1, delta) 

END unification_alg
