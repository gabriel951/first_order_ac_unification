%% TCCs associated with theory aux_unification
%% This file was automatically generated by PVS, please **do not modify** by hand.
aux_unification_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 78, column 48) for  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % untried
	elim_com_arg_TCC1: OBLIGATION
	FORALL (t1: term[constant, variable, f_symbol, ac_symbol],
	          t2: term[constant, variable, f_symbol, ac_symbol], sym: string,
	          args1: args, args2: args):
	    args1 = get_args(sym)(t1) AND args2 = get_args(sym)(t2) IMPLIES
	     equivalence?[term[constant, variable, f_symbol, ac_symbol]](equal?)
	
	% The subtype TCC (at line 79, column 48) in decl nil for
	% term generated from elim_com_arg  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 81, column 71) in decl nil for
	% term generated from elim_com_arg  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 83, column 71) in decl nil for
	% term generated from elim_com_arg  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% Subtype TCC generated (at line 114, column 29) for  i - 1
	% expected type  below[length
	%           [term[constant,
	%                 variable,
	%                 f_symbol,
	%                 ac_symbol]]
	%           (args)]
	  % untried
	if_non_var_const2_col?_TCC1: OBLIGATION
	FORALL (args: args, i: nat):
	    NOT i > length(args) AND NOT i = 0 IMPLIES
	     i - 1 >= 0 AND
	      i - 1 < length[term[constant, variable, f_symbol, ac_symbol]](args)
	
	% The subtype TCC (at line 79, column 48) in decl nil for
	 % term generated from elim_com_arg  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by elim_com_arg_TCC1
	% The subtype TCC (at line 81, column 71) in decl nil for
	 % term generated from elim_com_arg  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by elim_com_arg_TCC1
	% The subtype TCC (at line 83, column 71) in decl nil for
	 % term generated from elim_com_arg  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by elim_com_arg_TCC1
	
	% Subtype TCC generated (at line 141, column 47) for  dio_matrix_lst
	% expected type  (cons?[dio_matrix])
	  % untried
	get_nice_submatrices_TCC1: OBLIGATION
	FORALL (dio_matrix_lst: list[dio_matrix], args: args):
	    NOT null?(dio_matrix_lst) IMPLIES
	     FORALL (dio_matrix: dio_matrix):
	       dio_matrix = car(dio_matrix_lst) AND
	        nice_submatrix?(dio_matrix, args) AND NOT null?(dio_matrix)
	        IMPLIES cons?[dio_matrix](dio_matrix_lst)
	
	% Termination TCC generated (at line 141, column 22) for
	% get_nice_submatrices(cdr(dio_matrix_lst), args)
	  % untried
	get_nice_submatrices_TCC2: OBLIGATION
	FORALL (dio_matrix_lst: list[dio_matrix], args: args):
	    NOT null?(dio_matrix_lst) IMPLIES
	     FORALL (dio_matrix: dio_matrix):
	       dio_matrix = car(dio_matrix_lst) AND
	        nice_submatrix?(dio_matrix, args) AND NOT null?(dio_matrix)
	        IMPLIES <<[dio_matrix](cdr[dio_matrix](dio_matrix_lst), dio_matrix_lst)
	
	% Subtype TCC generated (at line 142, column 32) for  dio_matrix_lst
	% expected type  (cons?[dio_matrix])
	  % untried
	get_nice_submatrices_TCC3: OBLIGATION
	FORALL (dio_matrix_lst: list[dio_matrix], args: args):
	    NOT null?(dio_matrix_lst) IMPLIES
	     FORALL (dio_matrix: dio_matrix):
	       dio_matrix = car(dio_matrix_lst) AND
	        NOT (nice_submatrix?(dio_matrix, args) AND NOT null?(dio_matrix))
	        IMPLIES cons?[dio_matrix](dio_matrix_lst)
	
	% Termination TCC generated (at line 142, column 7) for
	% get_nice_submatrices(cdr(dio_matrix_lst), args)
	  % untried
	get_nice_submatrices_TCC4: OBLIGATION
	FORALL (dio_matrix_lst: list[dio_matrix], args: args):
	    NOT null?(dio_matrix_lst) IMPLIES
	     FORALL (dio_matrix: dio_matrix):
	       dio_matrix = car(dio_matrix_lst) AND
	        NOT (nice_submatrix?(dio_matrix, args) AND NOT null?(dio_matrix))
	        IMPLIES <<[dio_matrix](cdr[dio_matrix](dio_matrix_lst), dio_matrix_lst)
	
	% Subtype TCC generated (at line 139, column 30) for  dio_matrix_lst
	% expected type  (cons?[dio_matrix])
	  % untried
	get_nice_submatrices_TCC5: OBLIGATION
	FORALL (dio_matrix_lst: list[dio_matrix]):
	    NOT null?(dio_matrix_lst) IMPLIES cons?[dio_matrix](dio_matrix_lst)
	
	% Subtype TCC generated (at line 160, column 40) for  row
	% expected type  (cons?[nat])
	  % untried
	add_new_arg_TCC1: OBLIGATION
	FORALL (lst_args: list[args], row: list[nat]):
	    NOT null?(lst_args) AND NOT null?(row) IMPLIES
	     FORALL (args: args): args = car(lst_args) IMPLIES cons?[nat](row)
	
	% Subtype TCC generated (at line 162, column 37) for  lst_args
	% expected type  (cons?[args])
	  % untried
	add_new_arg_TCC2: OBLIGATION
	FORALL (lst_args: list[args], row: list[nat],
	          t: term[constant, variable, f_symbol, ac_symbol]):
	    NOT null?(lst_args) AND NOT null?(row) IMPLIES
	     FORALL (args: args,
	             args2: list[term[constant, variable, f_symbol, ac_symbol]],
	             new_args: list[term[constant, variable, f_symbol, ac_symbol]]):
	       args = car(lst_args) AND
	        args2 = get_repeat_lst(t, car(row)) AND new_args = append(args, args2)
	        IMPLIES cons?[args](lst_args)
	
	% Termination TCC generated (at line 162, column 21) for
	% add_new_arg(cdr(lst_args), cdr(row), t)
	  % untried
	add_new_arg_TCC3: OBLIGATION
	FORALL (lst_args: list[args], row: list[nat],
	          t: term[constant, variable, f_symbol, ac_symbol]):
	    NOT null?(lst_args) AND NOT null?(row) IMPLIES
	     FORALL (args: args,
	             args2: list[term[constant, variable, f_symbol, ac_symbol]],
	             new_args: list[term[constant, variable, f_symbol, ac_symbol]]):
	       args = car(lst_args) AND
	        args2 = get_repeat_lst(t, car(row)) AND new_args = append(args, args2)
	        IMPLIES <<[nat](cdr[nat](row), row)
	
	% Subtype TCC generated (at line 159, column 24) for  lst_args
	% expected type  (cons?[args])
	  % untried
	add_new_arg_TCC4: OBLIGATION
	FORALL (lst_args: list[args], row: list[nat]):
	    NOT null?(lst_args) AND NOT null?(row) IMPLIES cons?[args](lst_args)
	
	% The subtype TCC (at line 162, column 52) in decl nil for
	% term generated from add_new_arg  row
	% expected type  (cons?[nat])
	% Subtype TCC generated (at line 179, column 45) for  dio_matrix
	% expected type  (cons?)
	  % untried
	get_pre_new_args_TCC1: OBLIGATION
	FORALL (lst_args: list[args], dio_matrix: dio_matrix,
	          vars2avoid: list[variable]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat], new_var: variable, new_lst_args: list[args],
	             new_vars2avoid: (cons?[variable])):
	       row = car(dio_matrix) AND
	        new_var = get_new_var(vars2avoid) AND
	         new_lst_args = add_new_arg(lst_args, row, variable(new_var)) AND
	          new_vars2avoid = cons(new_var, vars2avoid)
	        IMPLIES cons?[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 162, column 52) in decl nil for
	 % term generated from add_new_arg  row
	    % expected type  (cons?[nat])
	  % is subsumed by add_new_arg_TCC1
	
	% Termination TCC generated (at line 179, column 10) for
	% get_pre_new_args(new_lst_args, cdr(dio_matrix), new_vars2avoid)
	  % untried
	get_pre_new_args_TCC2: OBLIGATION
	FORALL (lst_args: list[args], dio_matrix: dio_matrix,
	          vars2avoid: list[variable]):
	    NOT null?(dio_matrix) IMPLIES
	     FORALL (row: list[nat], new_var: variable, new_lst_args: list[args],
	             new_vars2avoid: (cons?[variable])):
	       row = car(dio_matrix) AND
	        new_var = get_new_var(vars2avoid) AND
	         new_lst_args = add_new_arg(lst_args, row, variable(new_var)) AND
	          new_vars2avoid = cons(new_var, vars2avoid)
	        IMPLIES <<[list[nat]](cdr[list[nat]](dio_matrix), dio_matrix)
	
	% Subtype TCC generated (at line 175, column 24) for  dio_matrix
	% expected type  (cons?)
	  % untried
	get_pre_new_args_TCC3: OBLIGATION
	FORALL (dio_matrix: dio_matrix):
	    NOT null?(dio_matrix) IMPLIES cons?[list[nat]](dio_matrix)
	
	% Subtype TCC generated (at line 190, column 13) for  args
	% expected type  (cons?[term[constant, variable, f_symbol, ac_symbol]])
	  % untried
	get_ac_from_args_gt1_TCC1: OBLIGATION
	FORALL (args: args):
	    NOT null?(args) AND NOT length(args) /= 1 IMPLIES
	     cons?[term[constant, variable, f_symbol, ac_symbol]](args)
	
	% Subtype TCC generated (at line 214, column 35) for  mult_t1
	% expected type  list[posnat]
	  % untried
	solve_ac_TCC1: OBLIGATION
	FORALL (t1: term[constant, variable, f_symbol, ac_symbol],
	          t2: term[constant, variable, f_symbol, ac_symbol], sym: string,
	          args: args, mult_t1: list[nat], mult_t2: list[nat]):
	    args = elim_com_arg(t1, t2, sym)`1 AND
	     mult_t1 = elim_com_arg(t1, t2, sym)`2 AND
	      mult_t2 = elim_com_arg(t1, t2, sym)`3
	     IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (x >= 0) AND (x > 0))
	         (mult_t1)
	
	% Subtype TCC generated (at line 214, column 44) for  mult_t2
	% expected type  list[posnat]
	  % untried
	solve_ac_TCC2: OBLIGATION
	FORALL (t1: term[constant, variable, f_symbol, ac_symbol],
	          t2: term[constant, variable, f_symbol, ac_symbol], sym: string,
	          args: args, mult_t1: list[nat], mult_t2: list[nat]):
	    args = elim_com_arg(t1, t2, sym)`1 AND
	     mult_t1 = elim_com_arg(t1, t2, sym)`2 AND
	      mult_t2 = elim_com_arg(t1, t2, sym)`3
	     IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (x >= 0) AND (x > 0))
	         (mult_t2)
	
	% The subtype TCC (at line 216, column 33) in decl nil for
	% term generated from solve_ac  mult_t1
	% expected type  list[posnat]
	% The subtype TCC (at line 216, column 42) in decl nil for
	% term generated from solve_ac  mult_t2
	% expected type  list[posnat]
	% Subtype TCC generated (at line 271, column 27) for  unseen_unif_prb
	% expected type  (cons?[unif_pair])
	  % untried
	instantiate_step_TCC1: OBLIGATION
	FORALL (unseen_unif_prb: unif_prb):
	    NOT null?(unseen_unif_prb) IMPLIES
	     FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	             s: term[constant, variable, f_symbol, ac_symbol]):
	       t = car(unseen_unif_prb)`1 AND s = car(unseen_unif_prb)`2 IMPLIES
	        FORALL (delta: sub, skip: bool, fail: bool):
	               (delta = instantiate_step(t, s)`1)
	           AND (skip = instantiate_step(t, s)`2)
	           AND (fail = instantiate_step(t, s)`3) AND (NOT fail) AND skip
	           IMPLIES cons?[unif_pair](unseen_unif_prb)
	
	% The subtype TCC (at line 216, column 33) in decl nil for
	 % term generated from solve_ac  mult_t1
	    % expected type  list[posnat]
	  % is subsumed by solve_ac_TCC1
	% The subtype TCC (at line 216, column 42) in decl nil for
	 % term generated from solve_ac  mult_t2
	    % expected type  list[posnat]
	  % is subsumed by solve_ac_TCC2
	
	% Termination TCC generated (at line 271, column 6) for
	% instantiate_step(cdr(unseen_unif_prb), cons((t, s), seen_unif_prb),
	%                  sigma)
	  % untried
	instantiate_step_TCC2: OBLIGATION
	FORALL (unseen_unif_prb: unif_prb):
	    NOT null?(unseen_unif_prb) IMPLIES
	     FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	             s: term[constant, variable, f_symbol, ac_symbol]):
	       t = car(unseen_unif_prb)`1 AND s = car(unseen_unif_prb)`2 IMPLIES
	        FORALL (delta: sub, skip: bool, fail: bool):
	               (delta = instantiate_step(t, s)`1)
	           AND (skip = instantiate_step(t, s)`2)
	           AND (fail = instantiate_step(t, s)`3) AND (NOT fail) AND skip
	           IMPLIES
	           length[unif_pair](cdr[unif_pair](unseen_unif_prb)) <
	            length[unif_pair](unseen_unif_prb)
	
	% Subtype TCC generated (at line 273, column 49) for  unseen_unif_prb
	% expected type  (cons?[unif_pair])
	  % untried
	instantiate_step_TCC3: OBLIGATION
	FORALL (unseen_unif_prb: unif_prb):
	    NOT null?(unseen_unif_prb) IMPLIES
	     FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	             s: term[constant, variable, f_symbol, ac_symbol]):
	       t = car(unseen_unif_prb)`1 AND s = car(unseen_unif_prb)`2 IMPLIES
	        FORALL (delta: sub, skip: bool, fail: bool):
	               (delta = instantiate_step(t, s)`1)
	           AND (skip = instantiate_step(t, s)`2)
	           AND (fail = instantiate_step(t, s)`3) AND (NOT fail) AND NOT skip
	           IMPLIES cons?[unif_pair](unseen_unif_prb)
	
	% Termination TCC generated (at line 276, column 6) for
	% instantiate_step(new_unseen_unif_prb, new_seen_unif_prb, new_sigma)
	  % untried
	instantiate_step_TCC4: OBLIGATION
	FORALL (unseen_unif_prb: unif_prb, seen_unif_prb: unif_prb, sigma: sub):
	    NOT null?(unseen_unif_prb) IMPLIES
	     FORALL (t: term[constant, variable, f_symbol, ac_symbol],
	             s: term[constant, variable, f_symbol, ac_symbol]):
	       t = car(unseen_unif_prb)`1 AND s = car(unseen_unif_prb)`2 IMPLIES
	        FORALL (delta: sub, skip: bool, fail: bool):
	               (delta = instantiate_step(t, s)`1)
	           AND (skip = instantiate_step(t, s)`2)
	           AND (fail = instantiate_step(t, s)`3) AND (NOT fail) AND NOT skip
	           IMPLIES
	           FORALL (new_unseen_unif_prb: unif_prb, new_seen_unif_prb: unif_prb,
	                   new_sigma: list[basic_sub]):
	             new_unseen_unif_prb = apply_sub(delta, cdr(unseen_unif_prb)) AND
	              new_seen_unif_prb = apply_sub(delta, seen_unif_prb) AND
	               new_sigma = append(delta, sigma)
	              IMPLIES
	              length[unif_pair](new_unseen_unif_prb) <
	               length[unif_pair](unseen_unif_prb)
	
	% Subtype TCC generated (at line 267, column 17) for  unseen_unif_prb
	% expected type  (cons?[unif_pair])
	  % untried
	instantiate_step_TCC5: OBLIGATION
	FORALL (unseen_unif_prb: unif_prb):
	    NOT null?(unseen_unif_prb) IMPLIES cons?[unif_pair](unseen_unif_prb)
	
	% Subtype TCC generated (at line 288, column 36) for  lst_unif_prb
	% expected type  (cons?[unif_prb])
	  % untried
	instantiate_step_TCC6: OBLIGATION
	FORALL (lst_unif_prb: list[unif_prb]):
	    NOT null?(lst_unif_prb) IMPLIES
	     FORALL (unif_prb: unif_prb):
	       unif_prb = car(lst_unif_prb) IMPLIES
	        FORALL (new_unif_prb: unif_prb, sigma: sub, fail: bool):
	          (new_unif_prb = instantiate_step(unif_prb, null, null)`1 AND
	            sigma = instantiate_step(unif_prb, null, null)`2 AND
	             fail = instantiate_step(unif_prb, null, null)`3)
	           AND fail
	           IMPLIES cons?[unif_prb](lst_unif_prb)
	
	% Termination TCC generated (at line 288, column 15) for
	% instantiate_step(cdr(lst_unif_prb))
	  % untried
	instantiate_step_TCC7: OBLIGATION
	FORALL (lst_unif_prb: list[unif_prb]):
	    NOT null?(lst_unif_prb) IMPLIES
	     FORALL (unif_prb: unif_prb):
	       unif_prb = car(lst_unif_prb) IMPLIES
	        FORALL (new_unif_prb: unif_prb, sigma: sub, fail: bool):
	          (new_unif_prb = instantiate_step(unif_prb, null, null)`1 AND
	            sigma = instantiate_step(unif_prb, null, null)`2 AND
	             fail = instantiate_step(unif_prb, null, null)`3)
	           AND fail
	           IMPLIES <<[unif_prb](cdr[unif_prb](lst_unif_prb), lst_unif_prb)
	
	% Subtype TCC generated (at line 289, column 56) for  lst_unif_prb
	% expected type  (cons?[unif_prb])
	  % untried
	instantiate_step_TCC8: OBLIGATION
	FORALL (lst_unif_prb: list[unif_prb]):
	    NOT null?(lst_unif_prb) IMPLIES
	     FORALL (unif_prb: unif_prb):
	       unif_prb = car(lst_unif_prb) IMPLIES
	        FORALL (new_unif_prb: unif_prb, sigma: sub, fail: bool):
	          (new_unif_prb = instantiate_step(unif_prb, null, null)`1 AND
	            sigma = instantiate_step(unif_prb, null, null)`2 AND
	             fail = instantiate_step(unif_prb, null, null)`3)
	           AND NOT fail
	           IMPLIES cons?[unif_prb](lst_unif_prb)
	
	% Termination TCC generated (at line 289, column 35) for
	% instantiate_step(cdr(lst_unif_prb))
	  % untried
	instantiate_step_TCC9: OBLIGATION
	FORALL (lst_unif_prb: list[unif_prb]):
	    NOT null?(lst_unif_prb) IMPLIES
	     FORALL (unif_prb: unif_prb):
	       unif_prb = car(lst_unif_prb) IMPLIES
	        FORALL (new_unif_prb: unif_prb, sigma: sub, fail: bool):
	          (new_unif_prb = instantiate_step(unif_prb, null, null)`1 AND
	            sigma = instantiate_step(unif_prb, null, null)`2 AND
	             fail = instantiate_step(unif_prb, null, null)`3)
	           AND NOT fail
	           IMPLIES <<[unif_prb](cdr[unif_prb](lst_unif_prb), lst_unif_prb)
	
	% Subtype TCC generated (at line 286, column 21) for  lst_unif_prb
	% expected type  (cons?[unif_prb])
	  % untried
	instantiate_step_TCC10: OBLIGATION
	FORALL (lst_unif_prb: list[unif_prb]):
	    NOT null?(lst_unif_prb) IMPLIES cons?[unif_prb](lst_unif_prb)
	
	% Termination TCC generated (at line 298, column 31) for
	% choose_not_ac(cons(unif_pair, seen_unif_prb), cdr(unseen_unif_prb))
	  % untried
	choose_not_ac_TCC1: OBLIGATION
	FORALL (unseen_unif_prb: unif_prb):
	    NOT null?(unseen_unif_prb) IMPLIES
	     FORALL (unif_pair: unif_pair):
	       unif_pair = car(unseen_unif_prb) AND ac_prb?(unif_pair) IMPLIES
	        <<[unif_pair](cdr[unif_pair](unseen_unif_prb), unseen_unif_prb)
	
	% The subtype TCC (at line 298, column 81) in decl nil for
	% term generated from choose_not_ac  unseen_unif_prb
	% expected type  (cons?[unif_pair])
	% The subtype TCC (at line 299, column 44) in decl nil for
	% term generated from choose_not_ac  unseen_unif_prb
	% expected type  (cons?[unif_pair])
	% The subtype TCC (at line 297, column 28) in decl nil for
	% term generated from choose_not_ac  unseen_unif_prb
	% expected type  (cons?[unif_pair])
	% The subtype TCC (at line 310, column 41) in decl nil for
	% term generated from choose_unif_pair  unif_prb
	% expected type  (cons?[unif_pair])
	% The subtype TCC (at line 310, column 56) in decl nil for
	% term generated from choose_unif_pair  unif_prb
	% expected type  (cons?[unif_pair])
	% Subtype TCC generated (at line 343, column 52) for  i
	% expected type  below[length[nat](row)]
	  % untried
	const1_implies_non_empty_row_n_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, i, n: nat):
	    i < n AND const1?(dio_matrix, n) AND matrix?(dio_matrix, n) IMPLIES
	     FORALL (row): member(row, dio_matrix) IMPLIES i < length[nat](row)
	
	% The subtype TCC (at line 298, column 81) in decl nil for
	 % term generated from choose_not_ac  unseen_unif_prb
	    % expected type  (cons?[unif_pair])
	  % is subsumed by instantiate_step_TCC5
	% The subtype TCC (at line 299, column 44) in decl nil for
	 % term generated from choose_not_ac  unseen_unif_prb
	    % expected type  (cons?[unif_pair])
	  % is subsumed by instantiate_step_TCC5
	% The subtype TCC (at line 297, column 28) in decl nil for
	 % term generated from choose_not_ac  unseen_unif_prb
	    % expected type  (cons?[unif_pair])
	  % is subsumed by instantiate_step_TCC5
	% The subtype TCC (at line 310, column 41) in decl nil for
	 % term generated from choose_unif_pair  unif_prb
	    % expected type  (cons?[unif_pair])
	  % is subsumed by instantiate_step_TCC5
	% The subtype TCC (at line 310, column 56) in decl nil for
	 % term generated from choose_unif_pair  unif_prb
	    % expected type  (cons?[unif_pair])
	  % is subsumed by instantiate_step_TCC5
	
	% Subtype TCC generated (at line 383, column 105) for  n
	% expected type  below[length[args](add_new_arg(lst_args, row, t))]
	  % untried
	add_new_arg_null_nth_TCC1: OBLIGATION
	FORALL (lst_args: list[args], n: nat, row: list[nat],
	          t: term[constant, variable, f_symbol, ac_symbol]):
	    length(lst_args) = length(row) AND n < length(lst_args) IMPLIES
	     n < length[args](add_new_arg(lst_args, row, t))
	
	% Subtype TCC generated (at line 384, column 49) for  n
	% expected type  below[length[nat](row)]
	  % untried
	add_new_arg_null_nth_TCC2: OBLIGATION
	FORALL (lst_args: list[args], n: nat, row: list[nat],
	          t: term[constant, variable, f_symbol, ac_symbol]):
	    null?(nth(lst_args, n)) AND
	     null?(nth(add_new_arg(lst_args, row, t), n)) AND
	      length(lst_args) = length(row) AND n < length(lst_args)
	     IMPLIES n < length[nat](row)
	
	% Subtype TCC generated (at line 388, column 46) for  n
	% expected type  below[length[args](add_new_arg(lst_args, row, t))]
	  % untried
	add_new_arg_nth_len_TCC1: OBLIGATION
	FORALL (lst_args: list[args], n: nat, row: list[nat],
	          t: term[constant, variable, f_symbol, ac_symbol]):
	    length(row) = length(lst_args) AND n < length(lst_args) IMPLIES
	     n < length[args](add_new_arg(lst_args, row, t))
	
	% Subtype TCC generated (at line 388, column 88) for  n
	% expected type  below[length[nat](row)]
	  % untried
	add_new_arg_nth_len_TCC2: OBLIGATION
	FORALL (lst_args: list[args], n: nat, row: list[nat]):
	    length(row) = length(lst_args) AND n < length(lst_args) IMPLIES
	     n < length[nat](row)
	
	% Subtype TCC generated (at line 392, column 18) for  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % untried
	map_count_add_new_arg_TCC1: OBLIGATION
	FORALL (lst_args: list[args], row: list[nat]):
	    length(row) = length(lst_args) IMPLIES
	     equivalence?[term[constant, variable, f_symbol, ac_symbol]](equal?)
	
	% The subtype TCC (at line 393, column 50) in decl nil for
	% term generated from map_count_add_new_arg  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 394, column 23) in decl nil for
	% term generated from map_count_add_new_arg  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% Subtype TCC generated (at line 400, column 26) for  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % untried
	dot_product_count_add_new_arg_TCC1: OBLIGATION
	FORALL (lst_args: list[args], row: list[nat],
	          s, t: term[constant, variable, f_symbol, ac_symbol]):
	    equal?(t, s) AND length(lst_args) = length(row) IMPLIES
	     equivalence?[term[constant, variable, f_symbol, ac_symbol]](equal?)
	
	% The subtype TCC (at line 393, column 50) in decl nil for
	 % term generated from map_count_add_new_arg  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by map_count_add_new_arg_TCC1
	% The subtype TCC (at line 394, column 23) in decl nil for
	 % term generated from map_count_add_new_arg  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by map_count_add_new_arg_TCC1
	
	% Subtype TCC generated (at line 403, column 26) for  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % untried
	dot_product_count_add_new_arg_TCC2: OBLIGATION
	FORALL (lst_args: list[args], row: list[nat],
	          s, t: term[constant, variable, f_symbol, ac_symbol]):
	    NOT equal?(t, s) AND length(lst_args) = length(row) IMPLIES
	     equivalence?[term[constant, variable, f_symbol, ac_symbol]](equal?)
	
	% The subtype TCC (at line 401, column 26) in decl nil for
	% term generated from dot_product_count_add_new_arg  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 404, column 26) in decl nil for
	% term generated from dot_product_count_add_new_arg  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% Subtype TCC generated (at line 425, column 85) for  n
	% expected type  below[length[nat](row)]
	  % untried
	get_pre_new_args_not_null_aux_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, lst_args: list[args], n: nat):
	    null?(nth(lst_args, n)) AND
	     n < length(lst_args) AND matrix?(dio_matrix, length(lst_args))
	     IMPLIES FORALL (row): member(row, dio_matrix) IMPLIES n < length[nat](row)
	
	% The subtype TCC (at line 401, column 26) in decl nil for
	 % term generated from dot_product_count_add_new_arg  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by dot_product_count_add_new_arg_TCC1
	% The subtype TCC (at line 404, column 26) in decl nil for
	 % term generated from dot_product_count_add_new_arg  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by dot_product_count_add_new_arg_TCC2
	
	% Subtype TCC generated (at line 427, column 72) for  n
	% expected type  below[length[args]
	%           (get_pre_new_args(lst_args,
	%                             dio_matrix,
	%                             vars2avoid)`1)]
	  % untried
	get_pre_new_args_not_null_aux_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, lst_args: list[args], n: nat,
	          vars2avoid: list[variable]):
	    (NOT null?(nth(lst_args, n)) OR
	      EXISTS row: member(row, dio_matrix) AND nth(row, n) > 0)
	     AND n < length(lst_args) AND matrix?(dio_matrix, length(lst_args))
	     IMPLIES
	     n < length[args](get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1)
	
	% Subtype TCC generated (at line 452, column 68) for  n
	% expected type  below[length[args]
	%           (get_pre_new_args(lst_args,
	%                             dio_matrix,
	%                             vars2avoid)`1)]
	  % untried
	get_pre_new_args_null_nth_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, lst_args: list[args], n: nat,
	          vars2avoid: list[variable]):
	    matrix?(dio_matrix, length(lst_args)) AND n < length(lst_args) IMPLIES
	     n < length[args](get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1)
	
	% Subtype TCC generated (at line 466, column 29) for  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % untried
	get_pre_new_args_count_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, lst_args: list[args]):
	    matrix?(dio_matrix, length(lst_args)) IMPLIES
	     equivalence?[term[constant, variable, f_symbol, ac_symbol]](equal?)
	
	% Subtype TCC generated (at line 470, column 35) for  n - 1
	% expected type  below[length(dio_matrix)]
	  % untried
	get_pre_new_args_count_TCC2: OBLIGATION
	FORALL (dio_matrix: dio_matrix, lst_args: list[args],
	          t: term[constant, variable, f_symbol, ac_symbol],
	          vars2avoid: list[variable]):
	    V(t) <= select_greater[nat](vars2avoid) + length(dio_matrix) AND
	     V(t) > select_greater[nat](vars2avoid) AND
	      var?(t) AND matrix?(dio_matrix, length(lst_args))
	     IMPLIES
	     FORALL (n: int):
	       n = V(t) - select_greater[nat](vars2avoid) IMPLIES
	        n - 1 >= 0 AND n - 1 < length[list[nat]](dio_matrix)
	
	% The subtype TCC (at line 471, column 32) in decl nil for
	% term generated from get_pre_new_args_count  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 472, column 34) in decl nil for
	% term generated from get_pre_new_args_count  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 477, column 69) in decl nil for
	% term generated from get_pre_new_args_nth_len  n
	% expected type  below[length[args]
	%           (get_pre_new_args(lst_args,
	%                             dio_matrix,
	%                             vars2avoid)`1)]
	% Subtype TCC generated (at line 494, column 29) for  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % untried
	get_pre_new_args_dot_product_TCC1: OBLIGATION
	FORALL (dio_matrix: dio_matrix, lst_args: list[args],
	          mult_t1, mult_t2: list[posnat], vars2avoid: list[variable],
	          new_lst_args: list[args]):
	    new_lst_args = get_pre_new_args(lst_args, dio_matrix, vars2avoid)`1 IMPLIES
	     FORALL (lst_args1: list[args], lst_args2: list[args]):
	       lst_args1 = split(lst_args, length(mult_t1))`1 AND
	        lst_args2 = split(lst_args, length(mult_t1))`2
	        IMPLIES
	        FORALL (new_lst_args1: list[args], new_lst_args2: list[args]):
	          (new_lst_args1 = split(new_lst_args, length(mult_t1))`1 AND
	            new_lst_args2 = split(new_lst_args, length(mult_t1))`2)
	           AND dio_matrix_correct?(dio_matrix, mult_t1, mult_t2)
	           IMPLIES
	           equivalence?[term[constant, variable, f_symbol, ac_symbol]](equal?)
	
	% The subtype TCC (at line 471, column 32) in decl nil for
	 % term generated from get_pre_new_args_count  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_pre_new_args_count_TCC1
	% The subtype TCC (at line 472, column 34) in decl nil for
	 % term generated from get_pre_new_args_count  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_pre_new_args_count_TCC1
	% The subtype TCC (at line 477, column 69) in decl nil for
	 % term generated from get_pre_new_args_nth_len  n
	    % expected type  below[length[args]
	                   %           (get_pre_new_args(lst_args,
	                   %                             dio_matrix,
	                   %                             vars2avoid)`1)]
	  % is subsumed by get_pre_new_args_null_nth_TCC1
	
	% The subtype TCC (at line 495, column 29) in decl nil for
	% term generated from get_pre_new_args_dot_product  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 498, column 29) in decl nil for
	% term generated from get_pre_new_args_dot_product  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 499, column 29) in decl nil for
	% term generated from get_pre_new_args_dot_product  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 508, column 49) in decl nil for
	% term generated from get_pre_new_args_same_count  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 511, column 53) in decl nil for
	% term generated from get_pre_new_args_same_count  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% Subtype TCC generated (at line 556, column 44) for  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % untried
	get_ac_from_args_gt1_get_args_same_count_aux_TCC1: OBLIGATION
	equivalence?[term[constant, variable, f_symbol, ac_symbol]](equal?)
	
	% The subtype TCC (at line 495, column 29) in decl nil for
	 % term generated from get_pre_new_args_dot_product  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_pre_new_args_dot_product_TCC1
	% The subtype TCC (at line 498, column 29) in decl nil for
	 % term generated from get_pre_new_args_dot_product  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_pre_new_args_dot_product_TCC1
	% The subtype TCC (at line 499, column 29) in decl nil for
	 % term generated from get_pre_new_args_dot_product  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_pre_new_args_dot_product_TCC1
	% The subtype TCC (at line 508, column 49) in decl nil for
	 % term generated from get_pre_new_args_same_count  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_pre_new_args_dot_product_TCC1
	% The subtype TCC (at line 511, column 53) in decl nil for
	 % term generated from get_pre_new_args_same_count  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_pre_new_args_dot_product_TCC1
	
	% The subtype TCC (at line 558, column 60) in decl nil for
	% term generated from get_ac_from_args_gt1_get_args_same_count_aux  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 559, column 61) in decl nil for
	% term generated from get_ac_from_args_gt1_get_args_same_count_aux  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 562, column 43) in decl nil for
	% term generated from get_ac_from_args_gt1_get_args_same_count  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% The subtype TCC (at line 566, column 2) in decl nil for
	% term generated from get_ac_from_args_gt1_get_args_same_count  equal?
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	% Subtype TCC generated (at line 604, column 39) for  =
	% expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % untried
	elim_com_arg_count_TCC1: OBLIGATION
	equivalence?[term[constant, variable, f_symbol, ac_symbol]](=)
	
	% The subtype TCC (at line 558, column 60) in decl nil for
	 % term generated from get_ac_from_args_gt1_get_args_same_count_aux  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_ac_from_args_gt1_get_args_same_count_aux_TCC1
	% The subtype TCC (at line 559, column 61) in decl nil for
	 % term generated from get_ac_from_args_gt1_get_args_same_count_aux  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_ac_from_args_gt1_get_args_same_count_aux_TCC1
	% The subtype TCC (at line 562, column 43) in decl nil for
	 % term generated from get_ac_from_args_gt1_get_args_same_count  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_ac_from_args_gt1_get_args_same_count_aux_TCC1
	% The subtype TCC (at line 566, column 2) in decl nil for
	 % term generated from get_ac_from_args_gt1_get_args_same_count  equal?
	    % expected type  equiv[term[constant, variable, f_symbol, ac_symbol]]
	  % is subsumed by get_ac_from_args_gt1_get_args_same_count_aux_TCC1

END aux_unification_TCCS