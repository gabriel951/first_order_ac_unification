# unify
(name-replace "up" "choose_unif_pair(P)`1")
(name-replace "t" "up`1")
(name-replace "s" "up`2")
(name-replace "P1" "choose_unif_pair(P)`2") 

(name-replace "sig1" "cons((V(s), t), null)") 
(name-replace "new_sig" "append(sig1, sig)") 
(name-replace "new_P" "apply_sub(sig1, P1)") 

(name-replace "sig1" "cons((V(t), s), null)") 
(name-replace "new_sig" "append(sig1, sig)") 
(name-replace "new_P" "apply_sub(sig1, P1)") 

(name-replace "P2" "decompose(arg(t), arg(s))")
(name-replace "new_P" "append(P2, P1)")
(name-replace "f" "f_sym(t)")


# solve_ac
(name-replace "args" "elim_com_arg(t1, t2, f)`1")
(name-replace "mult_t1" "elim_com_arg(t1, t2, f)`2")
(name-replace "mult_t2" "elim_com_arg(t1, t2, f)`3")
(name-replace "B" "calculate_upper_bound(mult_t1, mult_t2)") 
(name-replace "D" "dio_solver(mult_t1, mult_t2, B)")
(name-replace "submatrix_lst" "extract_submatrices(D, args)")
(name-replace "results" "map(dio_matrix2ac_sol(args, vars2avoid, f))(submatrix_lst)")

# instantiate_step unif_prb
(name-replace "t" "car(P)`1")
(name-replace "s" "car(P)`2")
(name-replace "delta" "instantiate_step(t, s)`1") 
(name-replace "skip1" "instantiate_step(t, s)`2")
(name-replace "fail1" "instantiate_step(t, s)`3")

# apply_ac_step
(name-replace "up" "car(Pu)")
(name-replace "t" "up`1")
(name-replace "s" "up`2")
(name-replace "cur_V" "union(vars(Pu), union(V, vars(Ps)))")
(name-replace "lst_V" "finset2list[variable](cur_V)")
(name-replace "f" "ac_sym(t)")
(name-replace "ac_results" "first_proj(solve_ac(t, s, lst_V, f))")
(name-replace "V1" "vars(sec_proj(solve_ac(t, s, lst_V, f)))")
(name-replace "ac_results_subs" "instantiate_step(ac_results)") 
(name-replace "input_lst" "input_apply_ac_step(ac_results_subs, cdr(Pu), Ps, sig, V1)")


##################### OLD
# unify
(name-replace "unif_pair" "choose_unif_pair(unif_prb)`1")
(name-replace "t" "unif_pair`1")
(name-replace "s" "unif_pair`2")
(name-replace "unif_prb1" "choose_unif_pair(unif_prb)`2") 

(name-replace "sigma1" "cons((V(s), t), null)") 
(name-replace "new_sigma" "append(sigma1, sigma)") 
(name-replace "new_unif_prb" "apply_sub(sigma1, unif_prb1)") 

(name-replace "sigma1" "cons((V(t), s), null)") 

(name-replace "unif_pair1" "(term1(t), term1(s))") 
(name-replace "unif_pair2" "(term2(t), term2(s))") 
(name-replace "new_unif_prb" "cons(unif_pair1, cons(unif_pair2, unif_prb1))")

(name-replace "new_unif_pair" "(arg(t), arg(s))") 

# solve_ac
(name-replace "args" "elim_com_arg(t1, t2, f)`1")
(name-replace "mult_t1" "elim_com_arg(t1, t2, f)`2")
(name-replace "mult_t2" "elim_com_arg(t1, t2, f)`3")
(name-replace "bound" "calculate_upper_bound(mult_t1, mult_t2)") 
(name-replace "dio_sol_matrix" "dio_solver(mult_t1, mult_t2, bound)")
(name-replace "submatrix_sol_lst" "extract_submatrices(dio_sol_matrix, args)")
(name-replace "results" "map(dio_matrix2ac_sol(args, vars2avoid, f))(submatrix_sol_lst)")

# apply_ac_step
(name-replace "unif_pair" "car(unseen_unif_prb)")
(name-replace "t" "unif_pair`1")
(name-replace "s" "unif_pair`2")
(name-replace "cur_vars2avoid" "union(vars(unseen_unif_prb), union(vars2avoid, vars(seen_unif_prb)))")
(name-replace "lst_vars2avoid" "finset2list[variable](cur_vars2avoid)")
(name-replace "ac_results" "first_proj(solve_ac(t, s, lst_vars2avoid, ac_sym(t)))")
(name-replace "new_vars2avoid" "vars(sec_proj(solve_ac(t, s, lst_vars2avoid, ac_sym(t))))")
(name-replace "ac_results_subs" "instantiate_step(ac_results)") 
(name-replace "input_lst" "input_apply_ac_step(ac_results_subs, cdr(unseen_unif_prb), seen_unif_prb, sigma, new_vars2avoid)")

# instantiate_step unif_prb
(name-replace "t" "car(unif_prb)`1")
(name-replace "s" "car(unif_prb)`2")
(name-replace "delta" "instantiate_step(t, s)`1") 
(name-replace "skip1" "instantiate_step(t, s)`2")
(name-replace "fail1" "instantiate_step(t, s)`3")


# instantiate_step lst_unif_prb
(name-replace "unif_prb" "car(lst_unif_prb)") 
(name-replace "new_unif_prb" "instantiate_step(unif_prb, null, null)`1") 
(name-replace "sigma1" "instantiate_step(unif_prb, null, null)`2")
(name-replace "fail1" "instantiate_step(unif_prb, null, null)`3")

# get_pre_new_args
(name-replace "row" "car(dio_matrix)") 
(name-replace "new_var" "get_new_var(vars2avoid)") 
(name-replace "new_lst_args" "add_new_arg(lst_args, row, variable(new_var))")
(name-replace "new_vars2avoid" "cons(new_var, vars2avoid)")

# construct sub
(name-replace "new_var"  "get_new_var(vars2avoid)")
(name-replace "new_vars2avoid"  "cons(new_var, vars2avoid)")   	
(name-replace "args_t"  "construct_sub_aux(args, get_col_i(coef_matrix, 1))")
(name-replace "t1" "get_ac_from_args_gt1(f)(args_t)")
