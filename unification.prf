(unification
 (member_TCC1 0
  (member_TCC1-1 nil 3827268617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (member subtype "unification.unif_prb"
     "(list_adt[unif_pair].cons?)")))
 (member_TCC2 0
  (member_TCC2-1 nil 3827268617 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (member termination
           "unification.member(unification.t, list_adt[unif_pair].cdr(unification.unif_prb))"
     "nil")))
 (member_TCC3 0
  (member_TCC3-1 nil 3827268617 ("" (subtype-tcc) nil nil) nil nil
   (member subtype "unification.unif_prb"
     "(list_adt[unif_pair].cons?)")))
 (member_TCC4 0
  (member_TCC4-1 nil 3827268617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (member subtype "unification.lst_unif_prb"
     "(list_adt[unification.unif_prb].cons?)")))
 (member_TCC5 0
  (member_TCC5-1 nil 3827268617 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (member termination
           "unification.member(unification.t, list_adt[unification.unif_prb].cdr(unification.lst_unif_prb))"
     "nil")))
 (member_TCC6 0
  (member_TCC6-1 nil 3827268617 ("" (subtype-tcc) nil nil) nil nil
   (member subtype "unification.lst_unif_prb"
     "(list_adt[unification.unif_prb].cons?)")))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3823281024 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (vars termination
    "unification.vars(list_adt[unif_pair].cdr(unification.unif_prb))"
    "nil")))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3830541001 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (vars termination
    "unification.vars(list_adt[unification.unif_prb].cdr(unification.lst_unif_prb))"
    "nil")))
 (temp?_TCC1 0
  (temp?_TCC1-1 nil 3836333125 ("" (subtype-tcc) nil nil) nil nil
   (temp? subtype "="
    "equiv[term[constant, variable, f_symbol, ac_symbol]]")))
 (first_proj_unif_prb 0
  (first_proj_unif_prb-1 nil 3836595772
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "first_proj" 2 1)
                  (("2" (inst -1 "cdr(args2)") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_unif_prb_equiv 0
  (member_unif_prb_equiv-1 nil 3827331147
   ("" (induct "unif_prb")
    (("1" (skeep)
      (("1" (prop)
        (("1" (hide 1) (("1" (grind) nil nil)) nil)
         ("2" (skolem -1 "unif_pair1")
          (("2" (hide 1)
            (("2" (flatten)
              (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (split)
                (("1" (hide -2)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst -2 "t")
                    (("2" (assert)
                      (("2" (skolem -2 "unif_pair1")
                        (("2" (inst 3 "unif_pair1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "unif_pair1")
              (("2" (flatten)
                (("2" (expand "member" -2)
                  (("2" (split -2)
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)
                     ("2" (inst -3 "t")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (split -3)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "unif_pair1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_unif_prb_append 0
  (member_unif_prb_append-1 nil 3828518065
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_lst_unif_prb_equiv 0
  (member_lst_unif_prb_equiv-1 nil 3827436365
   ("" (induct "lst_unif_prb")
    (("1" (skeep)
      (("1" (prop)
        (("1" (hide 1) (("1" (grind) nil nil)) nil)
         ("2" (skolem -1 "unif_prb1")
          (("2" (flatten)
            (("2" (hide-all-but -2) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (prop)
                (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                 ("2" (inst -2 "t")
                  (("2" (assert)
                    (("2" (skolem -2 "unif_prb1")
                      (("2" (inst 1 "unif_prb1")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "unif_prb1")
              (("2" (prop)
                (("2" (expand "member" -2)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "t")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "unif_prb1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (is_finite_mem_unif_prb 0
  (is_finite_mem_unif_prb-1 nil 3834828190
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb1")
      (("" (prop)
        (("" (case "null?(unif_prb1)")
          (("1" (hide -2)
            (("1" (case "{t | member(t, unif_prb1)} = emptyset")
              (("1" (replace -1)
                (("1" (rewrite "finite_emptyset") nil nil)) nil)
               ("2" (hide 2)
                (("2" (rewrite "subset_antisymmetric")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (case "{t | member(t, unif_prb1)} = add(car(unif_prb1)`1, add(car(unif_prb1)`2, {t | member(t, cdr(unif_prb1))}))")
            (("1" (replace -1)
              (("1" (hide -1 -2)
                (("1" (lemma "finite_add[term]")
                  (("1" (inst?)
                    (("1" (hide 3)
                      (("1" (lemma "finite_add[term]")
                        (("1" (inst?)
                          (("1" (hide 2)
                            (("1" (reveal -3)
                              (("1"
                                (inst -1 "cdr(unif_prb1)")
                                (("1" (grind) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 3)
              (("2" (decompose-equality 1) (("2" (grind) nil nil))
                nil))
              nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_add formula-decl nil finite_sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (injective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (member_lhs_rhs 0
  (member_lhs_rhs-1 nil 3832859176
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((sec_proj def-decl "list[T2]" list_theory2 nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (rhs const-decl "args" unification nil)
    (lhs const-decl "args" unification nil)
    (args type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_lhs_pareate 0
  (member_lhs_pareate-1 nil 3832929998
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -2)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "lhs" -2)
                    (("1" (expand "first_proj" -2)
                      (("1" (expand "member" -2)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "lhs" -1)
                    (("2" (expand "first_proj" -1)
                      (("2" (expand "member" -1)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst? -2)
                            (("2" (inst -2 "t")
                              (("2"
                                (expand "lhs" -2)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (lhs const-decl "args" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_rhs_pareate 0
  (member_rhs_pareate-1 nil 3832945912
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide-all-but -2) (("1" (grind) nil nil)) nil)
                 ("2" (expand "rhs" -1)
                  (("2" (expand "sec_proj")
                    (("2" (expand "member" -1)
                      (("2" (prop)
                        (("1" (hide -2) (("1" (grind) nil nil)) nil)
                         ("2" (inst -2 "cdr(args2)" "t")
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (rhs const-decl "args" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_unif_prb 0
  (vars_unif_prb-1 nil 3827693007
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars" -1)
              (("1" (expand "union" -1)
                (("1" (expand "member" -1 1)
                  (("1" (prop)
                    (("1" (expand "vars" -1)
                      (("1" (expand "member" -1)
                        (("1" (expand "union" -1)
                          (("1" (prop)
                            (("1" (inst 1 "hd`1")
                              (("1" (grind) nil nil)) nil)
                             ("2" (inst 1 "hd`2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "t") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (inst -3 "X")
                    (("3" (assert)
                      (("3" (flatten)
                        (("3" (hide -3)
                          (("3" (prop)
                            (("1" (expand "member" 3)
                              (("1"
                                (expand "vars" 3)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (inst 1 "t") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (lst_vars_append 0
  (lst_vars_append-1 nil 3830546802
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "lst_vars" 1 1)
              (("2" (expand "lst_vars" 1 3)
                (("2" (rewrite "append_assoc")
                  (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_assoc formula-decl nil list_props nil)
    (lst_vars const-decl "list[variable]" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (append def-decl "list[T]" list_props nil)
    (lst_vars def-decl "list[variable]" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_lst_vars_unif_prb 0
  (vars_lst_vars_unif_prb-1 nil 3830541084
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (lemma "subset_antisymmetric[variable]")
          (("2"
            (inst -1 "vars(cons(hd, tail))" "lst_vars(cons(hd, tail))")
            (("2" (prop)
              (("1" (hide 2)
                (("1" (expand "subset?" 1)
                  (("1" (skeep)
                    (("1" (expand "vars" -1)
                      (("1" (expand "member" -1)
                        (("1" (expand "union" -1)
                          (("1" (prop)
                            (("1" (expand "lst_vars" 1)
                              (("1"
                                (lemma "lst2set_append_mem[variable]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "vars" -1)
                                        (("1"
                                          (expand "union" -1)
                                          (("1"
                                            (expand "member" -1 1)
                                            (("1"
                                              (expand "lst_vars" 1)
                                              (("1"
                                                (hide 2 3)
                                                (("1"
                                                  (lemma
                                                   "lst2set_append_mem[variable]")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (rewrite
                                                             "vars_lst_vars")
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "vars_lst_vars")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -2 -1)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "lst_vars" 1)
                                  (("2"
                                    (lemma
                                     "lst2set_append_mem[variable]")
                                    (("2"
                                      (inst? -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "subset?" 1)
                  (("2" (skeep)
                    (("2" (expand "lst_vars" -1)
                      (("2" (lemma "lst2set_append_mem[variable]")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (hide -2)
                                (("1"
                                  (expand "vars" 1)
                                  (("1"
                                    (expand "member" 1)
                                    (("1"
                                      (expand "union" 1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "lst_vars" -1)
                                          (("1"
                                            (expand "vars" 1)
                                            (("1"
                                              (expand "member" 1)
                                              (("1"
                                                (expand "union" 1)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (rewrite
                                                       "lst2set_append_mem")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (rewrite
                                                           "vars_lst_vars")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "vars_lst_vars")
                                                          (("2"
                                                            (rewrite
                                                             "vars_lst_vars")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -3 :dir rl)
                                (("2"
                                  (hide -2 -3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (lst_vars const-decl "list[variable]" unification nil)
    (vars_lst_vars formula-decl nil term_properties nil)
    (lst_vars def-decl "list[variable]" term_properties nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (lst2set_append_mem formula-decl nil list_theory nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (lst_vars def-decl "list[variable]" unification nil)
    (list2set def-decl "set[T]" list2set nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_lst_vars_flatten_lst_unif_prb 0
  (vars_lst_vars_flatten_lst_unif_prb-1 nil 3830545936
   ("" (induct "lst_unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (lemma "vars_lst_vars_unif_prb")
          (("2" (inst -1 "hd")
            (("2" (lemma "subset_antisymmetric[variable]")
              (("2"
                (inst -1 "vars(cons(hd, tail))"
                 "list2set(lst_vars(flatten(cons(hd, tail))))")
                (("2" (assert)
                  (("2" (prop)
                    (("1" (expand "subset?" 1)
                      (("1" (skeep)
                        (("1" (expand "member" -1)
                          (("1" (expand "vars" -1)
                            (("1" (expand "union" -1)
                              (("1"
                                (expand "flatten" 1)
                                (("1"
                                  (rewrite "lst_vars_append")
                                  (("1"
                                    (rewrite "lst2set_append_mem")
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "subset?" 1)
                      (("2" (skeep)
                        (("2" (expand "vars" 1)
                          (("2" (expand "member" 1)
                            (("2" (expand "union" 1)
                              (("2"
                                (prop)
                                (("2"
                                  (expand "flatten" -1)
                                  (("2"
                                    (rewrite "lst_vars_append")
                                    (("2"
                                      (rewrite "lst2set_append_mem")
                                      (("2"
                                        (prop)
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list2set def-decl "set[T]" list2set nil)
    (lst_vars def-decl "list[variable]" unification nil)
    (flatten def-decl "list[T]" list_theory nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lst2set_append_mem formula-decl nil list_theory nil)
    (lst_vars_append formula-decl nil unification nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (vars_lst_vars_unif_prb formula-decl nil unification nil))
   shostak))
 (no_var_pair_append 0
  (no_var_pair_append-1 nil 3832698793
   ("" (skeep)
    (("" (case "no_var_pair?(append(unif_prb!1, unif_prb1))")
      (("1" (assert)
        (("1" (prop)
          (("1" (expand "no_var_pair?" 1)
            (("1" (skeep)
              (("1" (expand "no_var_pair?" -2)
                (("1" (inst -2 "t")
                  (("1" (assert)
                    (("1" (rewrite "member_unif_prb_append") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "no_var_pair?" 1)
            (("2" (skeep)
              (("2" (expand "no_var_pair?" -2)
                (("2" (inst -2 "t")
                  (("2" (rewrite "member_unif_prb_append")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (case "(no_var_pair?(unif_prb!1) AND no_var_pair?(unif_prb1))")
        (("1" (hide 2)
          (("1" (prop)
            (("1" (expand "no_var_pair?" 1)
              (("1" (skeep)
                (("1" (rewrite "member_unif_prb_append")
                  (("1" (split -3)
                    (("1" (expand "no_var_pair?" -2)
                      (("1" (inst -2 "t") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (expand "no_var_pair?" -3)
                      (("2" (inst -3 "t") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (no_var_pair? const-decl "bool" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (member_unif_prb_append formula-decl nil unification nil))
   shostak))
 (all_ac_prb_no_var_pair 0
  (all_ac_prb_no_var_pair-1 nil 3834091178
   ("" (skeep)
    (("" (expand "all_ac_prb?" -1)
      (("" (expand "no_var_pair?" 1)
        (("" (skeep)
          (("" (rewrite "member_unif_prb_equiv")
            (("" (skolem -2 "unif_pair1")
              (("" (inst -1 "unif_pair1")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_ac_prb? const-decl "bool" unification nil)
    (ac_prb? const-decl "bool" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (no_var_pair? const-decl "bool" unification nil))
   shostak))
 (size_app_unif_prb 0
  (size_app_unif_prb-1 nil 3824128807
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (size def-decl "nat" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subterms_mem 0
  (subterms_mem-1 nil 3823963076
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subterms" 1 1)
            (("2" (expand "member" 1 1)
              (("2" (expand "union" 1 1)
                (("2" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "t")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "unif_pair!1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skolem -1 "unif_pair1")
                    (("3" (flatten)
                      (("3" (expand "member" -2)
                        (("3" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst -3 "t")
                            (("2" (assert)
                              (("2"
                                (inst 3 "unif_pair1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subterms_mem_unif_prb 0
  (subterms_mem_unif_prb-1 nil 3830009261
   ("" (skolem 1 ("s" "unif_prb1"))
    (("" (lemma "subterms_mem")
      (("" (prop)
        (("1" (inst -2 "s" "unif_prb1")
          (("1" (assert)
            (("1" (skolem -2 "unif_pair1")
              (("1" (prop)
                (("1" (expand "subterms" -2)
                  (("1" (expand "member" -2)
                    (("1" (expand "union" -2)
                      (("1" (prop)
                        (("1" (inst 1 "unif_pair1`1")
                          (("1" (prop)
                            (("1" (lemma "member_unif_prb_equiv")
                              (("1"
                                (inst -1 "unif_pair1`1" "unif_prb1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst 1 "unif_pair1`2")
                          (("2" (prop)
                            (("2" (lemma "member_unif_prb_equiv")
                              (("2"
                                (inst -1 "unif_pair1`2" "unif_prb1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem -1 "t")
          (("2" (prop)
            (("2" (inst -3 "s" "unif_prb1")
              (("2" (assert)
                (("2" (hide 1)
                  (("2" (lemma "member_unif_prb_equiv")
                    (("2" (inst? -1)
                      (("2" (assert)
                        (("2" (skeep) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterms_mem formula-decl nil unification nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (union const-decl "set" sets nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (member const-decl "bool" sets nil))
   shostak))
 (subterms_append 0
  (subterms_append-1 nil 3832333109
   ("" (induct "unif_prb1")
    (("1" (expand "append" 1)
      (("1" (skeep)
        (("1" (expand "subterms" 1 2)
          (("1" (expand "member" 1 2)
            (("1" (expand "emptyset" 1) (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "subterms" 1 1)
              (("2" (expand "subterms" 1 3)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (expand "member" -1)
                      (("1" (expand "union" -1)
                        (("1" (expand "member" 1)
                          (("1" (expand "union" 1)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (inst? -2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "member" -1 1)
                      (("2" (expand "union" -1 1)
                        (("2" (expand "member" 1)
                          (("2" (expand "union" 1)
                            (("2" (prop)
                              (("1"
                                (inst? -2)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst? -2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subterms_pareate 0
  (subterms_pareate-1 nil 3832793186
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "pareate" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (expand "subterms" -1)
                  (("3" (expand "union" -1)
                    (("3" (expand "member" -1 1)
                      (("3" (prop)
                        (("1" (hide -2) (("1" (grind) nil nil)) nil)
                         ("2" (inst -2 "cdr(args1)")
                          (("2" (prop)
                            (("1" (inst -1 "cdr(args2)" "t")
                              (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (unifies?_append 0
  (unifies?_append-1 nil 3805641015
   ("" (measure-induct "length(unif_prb1)" "unif_prb1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "unifies?" 1 2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (lemma "list_cons_eta[unif_pair]")
                    (("2" (inst? -1)
                      (("1" (expand "append" 2 1)
                        (("1" (assert)
                          (("1" (expand "unifies?" 2 1)
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "cdr(lst1)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "sigma" "unif_prb2")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (unifies? def-decl "bool" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (unifies?_pareate 0
  (unifies?_pareate-1 nil 3807735593
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "pareate" -2)
        (("1" (case "args2 = null")
          (("1" (grind) nil nil)
           ("2" (hide 2 -2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
                 ("2" (expand "unifies?" -1)
                  (("2" (flatten)
                    (("2" (expand "length" -4 2)
                      (("2" (assert)
                        (("2" (expand "subs" 2 2)
                          (("2" (expand "subs" 2 1)
                            (("2" (expand "equal?" 2)
                              (("2"
                                (expand "length" -4 1)
                                (("2"
                                  (inst? -3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unifies? const-decl "bool" unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (subs def-decl "args" substitution nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (unifies? def-decl "bool" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (apply_sub_mem 0
  (apply_sub_mem-1 nil 3827693738
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "apply_sub" -1)
              (("1" (expand "member" -1)
                (("1" (prop)
                  (("1" (expand "apply_sub" -1)
                    (("1" (inst 1 "hd`1") (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (expand "apply_sub" -1)
                    (("2" (inst 1 "hd`2") (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (inst -2 "sigma" "t")
                    (("3" (assert)
                      (("3" (skeep)
                        (("3" (inst 3 "s") (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (expand "apply_sub" 1)
                    (("1" (expand "member" 1)
                      (("1" (prop)
                        (("1" (expand "apply_sub" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "apply_sub" 1)
                    (("2" (expand "member" 1)
                      (("2" (prop)
                        (("2" (expand "apply_sub" 2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst -3 "sigma" "t")
                    (("3" (assert)
                      (("3" (flatten)
                        (("3" (hide -3)
                          (("3" (prop)
                            (("1" (expand "apply_sub" 3)
                              (("1"
                                (expand "member" 3)
                                (("1" (prop) nil nil))
                                nil))
                              nil)
                             ("2" (inst 1 "s") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_unif_pair 0
  (apply_sub_unif_pair-1 nil 3832969464
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skolem 1 ("sigma" "unif_pair2"))
          (("2" (prop)
            (("1" (expand "apply_sub" -1)
              (("1" (expand "member" -1)
                (("1" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "sigma" "unif_pair2")
                    (("2" (assert)
                      (("2" (skolem -2 "unif_pair1")
                        (("2" (inst 1 "unif_pair1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "unif_pair1")
              (("2" (prop)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "sigma" "unif_pair2")
                      (("2" (prop)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_subterms 0
  (apply_sub_subterms-1 nil 3832603309
   ("" (skeep)
    (("" (rewrite "subterms_mem_unif_prb")
      (("" (skolem -1 "t1_sigma")
        (("" (prop)
          (("" (rewrite "apply_sub_mem")
            (("" (skolem -2 "t1")
              (("" (prop)
                (("" (replace -3 -1)
                  (("" (lemma "subterms_subs")
                    (("" (inst? -1)
                      (("" (expand "subset?" -1)
                        (("" (inst -1 "t")
                          (("" (assert)
                            (("" (expand "member" -1)
                              ((""
                                (expand "union" -1)
                                ((""
                                  (expand "image" -1)
                                  ((""
                                    (expand "image" -1)
                                    ((""
                                      (expand "member" -1 1)
                                      ((""
                                        (skolem -1 "t2")
                                        ((""
                                          (inst 1 "t2")
                                          ((""
                                            (assert)
                                            ((""
                                              (rewrite
                                               "subterms_mem_unif_prb")
                                              ((""
                                                (typepred "t2")
                                                ((""
                                                  (inst 1 "t1")
                                                  ((""
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterms_mem_unif_prb formula-decl nil unification nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (member const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (subterms_subs formula-decl nil substitution nil)
    (apply_sub_mem formula-decl nil unification nil))
   shostak))
 (apply_sub_null 0
  (apply_sub_null-1 nil 3828517939
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "apply_sub" 1)
        (("2" (replace -1)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "subs" 1)
              (("2" (assert)
                (("2" (grind)
                  (("2" (case "cons1_var = (cons1_var`1, cons1_var`2)")
                    (("1" (replace -1 :dir rl) (("1" (propax) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_append 0
  (apply_sub_append-1 nil 3832355737
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append def-decl "list[T]" list_props nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (apply_sub const-decl "unif_pair" unification nil))
   shostak))
 (apply_sub_sub_append 0
  (apply_sub_sub_append-1 nil 3828518211
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "apply_sub" 1 2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "apply_sub" 2 1)
                  (("2" (expand "apply_sub" 2 5)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2"
                          (case "apply_sub(sigma, apply_sub(sigma1, car(unif_prb1))) = apply_sub(append(sigma, sigma1), car(unif_prb1))")
                          (("1" (inst -2 "cdr(unif_prb1)")
                            (("1" (prop)
                              (("1"
                                (inst? -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3)
                            (("2" (expand "apply_sub" 1 2)
                              (("2"
                                (expand "apply_sub" 1 1)
                                (("2"
                                  (expand "apply_sub" 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (rewrite "subs_append2")
                                      nil
                                      nil)
                                     ("2"
                                      (rewrite "subs_append2")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (subs_append2 formula-decl nil substitution nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (apply_sub_len 0
  (apply_sub_len-1 nil 3825711568
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "length" 1) (("2" (inst -1 "sigma") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_first_proj 0
  (apply_sub_first_proj-1 nil 3825711776
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "first_proj" 1)
              (("2" (expand "subs" 1)
                (("2" (inst? -1)
                  (("2" (assert)
                    (("2" (replace -1 1)
                      (("2" (expand "apply_sub" 1 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (subs def-decl "args" substitution nil)
    (args type-eq-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_sec_proj 0
  (apply_sub_sec_proj-1 nil 3825712010
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst? -1)
            (("2" (expand "sec_proj" 1 1)
              (("2" (expand "subs" 1)
                (("2" (expand "apply_sub" 1)
                  (("2" (expand "sec_proj" 1 2)
                    (("2" (replace -1 1)
                      (("2" (expand "apply_sub" 1 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (subs def-decl "args" substitution nil)
    (args type-eq-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_elim_var_unif_pair 0
  (apply_sub_elim_var_unif_pair-1 nil 3823281928
   ("" (skeep)
    (("" (expand "apply_sub" -2)
      (("" (expand "vars" -2)
        (("" (expand "member" -2)
          (("" (expand "union" -2)
            (("" (prop)
              (("1" (rewrite "apply_sub_elim_var_t") nil nil)
               ("2" (rewrite "apply_sub_elim_var_t") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (member const-decl "bool" sets nil)
    (unif_pair type-eq-decl nil unification nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (apply_sub_elim_var_t formula-decl nil substitution nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" unification nil))
   shostak))
 (apply_sub_elim_var 0
  (apply_sub_elim_var-1 nil 3823281548
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" -3)
            (("2" (expand "vars" -3)
              (("2" (expand "member" -3)
                (("2" (expand "union" -3)
                  (("2" (prop)
                    (("1" (hide -2)
                      (("1" (lemma "apply_sub_elim_var_unif_pair")
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X" "sigma")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (apply_sub_elim_var_unif_pair formula-decl nil unification nil)
    (subs const-decl "term" substitution nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_no_pair 0
  (apply_sub_no_pair-1 nil 3832677979
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "no_pair?" 1)
              (("2" (skeep)
                (("2" (expand "member" -4)
                  (("2" (prop)
                    (("1" (expand "apply_sub" -1)
                      (("1" (expand "no_pair?" -3)
                        (("1" (inst -3 "hd`1")
                          (("1" (replace -1 -5)
                            (("1" (lemma "subs_pair2")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (hide -4 -3)
                                      (("2"
                                        (expand "no_pair?" -3)
                                        (("2"
                                          (inst -3 "t")
                                          (("2"
                                            (lemma "term_variable_eta")
                                            (("2"
                                              (inst -1 "hd`1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   ("member" "img")
                                                   1)
                                                  (("2"
                                                    (inst 1 "V(hd`1)")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2)
                      (("2" (expand "apply_sub" -1)
                        (("2" (replace -1)
                          (("2" (lemma "subs_pair2")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "no_pair?" -3)
                                    (("1"
                                      (inst -3 "hd`2")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "no_pair?" -4)
                                    (("2"
                                      (inst -4 "t")
                                      (("2"
                                        (replace -2 -4)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "term_variable_eta")
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (expand "member" 1)
                                                (("2"
                                                  (expand "img" 1)
                                                  (("2"
                                                    (inst 1 "V(hd`2)")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (inst -2 "sigma")
                      (("3" (prop)
                        (("1" (expand "no_pair?" -1)
                          (("1" (inst -1 "t") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (expand "no_pair?" 1)
                          (("2" (skeep)
                            (("2" (expand "no_pair?" -4)
                              (("2"
                                (inst -4 "t!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (no_pair? const-decl "bool" unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (no_pair? const-decl "bool" term_properties nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair2 formula-decl nil substitution nil)
    (apply_sub const-decl "unif_pair" unification nil))
   shostak))
 (apply_sub_no_var_pair 0
  (apply_sub_no_var_pair-1 nil 3832097815
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "no_var_pair?" 1)
              (("2" (skeep)
                (("2" (expand "member" -3)
                  (("2" (split -3)
                    (("1" (split -1)
                      (("1" (expand "no_var_pair?" -3)
                        (("1" (inst -3 "hd`1")
                          (("1" (expand "member" -3)
                            (("1" (expand "apply_sub" -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "subs_var")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (inst? -2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -3 -1)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (lemma "subs_pair2")
                                          (("2"
                                            (inst? -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "apply_sub" -1)
                        (("2" (hide -2)
                          (("2" (expand "no_var_pair?" -2)
                            (("2" (inst -2 "hd`2")
                              (("2"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (lemma "subs_var")
                                        (("1"
                                          (inst? -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "subs_pair2")
                                      (("2"
                                        (inst? -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -2 "sigma")
                        (("2" (split -2)
                          (("1" (expand "no_var_pair?" -1)
                            (("1" (inst -1 "t") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (expand "no_var_pair?" -2)
                            (("2" (expand "no_var_pair?" 1)
                              (("2"
                                (hide 2 3 4)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -3 "t!1")
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (no_var_pair? const-decl "bool" unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (subs_pair2 formula-decl nil substitution nil)
    (subs_var formula-decl nil substitution nil)
    (apply_sub const-decl "unif_pair" unification nil))
   shostak))
 (apply_sub_var_not_dom_mem 0
  (apply_sub_var_not_dom_mem-1 nil 3836333125
   ("" (skolem 1 ("X" "sigma" "unif_pair1"))
    (("" (prop)
      (("" (expand "member" -1)
        (("" (prop)
          (("1" (expand "member" 2)
            (("1" (prop)
              (("1" (expand "apply_sub" 2) (("1" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (member const-decl "bool" unification nil))
   shostak))
 (apply_sub_var_not_dom_lhs_TCC1 0
  (apply_sub_var_not_dom_lhs_TCC1-1 nil 3836334613
   ("" (subtype-tcc) nil nil) nil nil
   (apply_sub_var_not_dom_lhs subtype "="
    "equiv[term[constant, variable, f_symbol, ac_symbol]]")))
 (apply_sub_var_not_dom_lhs 0
  (apply_sub_var_not_dom_lhs-1 nil 3836334614
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("1" (skolem 1 "unif_prb1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "lhs" 3)
            (("1" (expand "first_proj" 3 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (flatten)
                    (("2" (expand "count" 2 1)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "apply_sub" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "first_proj" 1 2)
                                  (("1"
                                    (expand "count" 1 2)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -3
                                               "cdr(unif_prb1)")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 2 -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "apply_sub" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "first_proj" 2 2)
                                  (("2"
                                    (expand "count" 2 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -2 1)
                                            (("1"
                                              (expand "apply_sub" -1)
                                              (("1"
                                                (lemma "subs_var")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       4)
                                                      (("1"
                                                        (expand
                                                         "img"
                                                         4)
                                                        (("1"
                                                          (lemma
                                                           "term_variable_eta")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(unif_prb1)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst?)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (subs const-decl "term" substitution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (subs_var formula-decl nil substitution nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (lhs const-decl "args" unification nil)
    (args type-eq-decl nil term_properties nil)
    (equiv type-eq-decl nil list_theory nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (equivalence? const-decl "bool" relations nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (apply_sub_var_not_dom_rhs 0
  (apply_sub_var_not_dom_rhs-2 nil 3836336234
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("1" (skolem 1 "unif_prb1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "rhs" 3)
            (("1" (expand "sec_proj" 3 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (flatten)
                    (("2" (expand "count" 2 1)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "apply_sub" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "sec_proj" 1 2)
                                  (("1"
                                    (expand "count" 1 2)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -3
                                               "cdr(unif_prb1)")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 2 -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "apply_sub" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "sec_proj" 2 2)
                                  (("2"
                                    (expand "count" 2 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -2 1)
                                            (("1"
                                              (expand "apply_sub" -1)
                                              (("1"
                                                (lemma "subs_var")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       4)
                                                      (("1"
                                                        (expand
                                                         "img"
                                                         4)
                                                        (("1"
                                                          (lemma
                                                           "term_variable_eta")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(unif_prb1)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst?)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equivalence? const-decl "bool" relations nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (equiv type-eq-decl nil list_theory nil)
    (args type-eq-decl nil term_properties nil)
    (rhs const-decl "args" unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (subs_var formula-decl nil substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs const-decl "term" substitution nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil))
   nil)
  (apply_sub_var_not_dom_rhs-1 nil 3836336188
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("1" (skolem 1 "unif_prb1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "lhs" 3)
            (("1" (expand "first_proj" 3 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (grind) nil)
                   ("2" (flatten)
                    (("2" (expand "count" 2 1)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "apply_sub" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "first_proj" 1 2)
                                  (("1"
                                    (expand "count" 1 2)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -3
                                               "cdr(unif_prb1)")
                                              (("1" (grind) nil)))))))
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 2 -2)
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))))
                           ("2" (flatten)
                            (("2" (expand "apply_sub" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "first_proj" 2 2)
                                  (("2"
                                    (expand "count" 2 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -2 1)
                                            (("1"
                                              (expand "apply_sub" -1)
                                              (("1"
                                                (lemma "subs_var")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       4)
                                                      (("1"
                                                        (expand
                                                         "img"
                                                         4)
                                                        (("1"
                                                          (lemma
                                                           "term_variable_eta")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (grind)
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(unif_prb1)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst?)
                                                (("1" (grind) nil)))
                                               ("2"
                                                (grind)
                                                nil)))))))))))))))))))))))))))))))))))))))))))
     ("2" (grind) nil))
    nil)
   nil nil))
 (apply_sub_var_not_dom_count 0
  (apply_sub_var_not_dom_count-1 nil 3836333362
   ("" (skeep)
    (("" (rewrite "count_append")
      (("" (rewrite "count_append")
        (("" (use "apply_sub_var_not_dom_lhs")
          (("" (assert)
            (("" (replace -1)
              (("" (assert)
                (("" (hide -1)
                  (("" (use "apply_sub_var_not_dom_rhs")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_append formula-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil) nil
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (args type-eq-decl nil term_properties nil)
    (lhs const-decl "args" unification nil)
    (rhs const-decl "args" unification nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (apply_sub_var_not_dom_lhs formula-decl nil unification nil)
    (apply_sub_var_not_dom_rhs formula-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil))
   shostak)))

