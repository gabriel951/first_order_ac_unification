(|diophantine|
 (|lcm_TCC1| 0
  (|lcm_TCC1-1| NIL 3803482194
   ("" (SKEEP)
    (("" (EXPAND "nonempty?")
      (("" (EXPAND "empty?" -1)
        (("" (INST -1 "a1 * a2")
          (("" (EXPAND "member")
            (("" (TYPEPRED "a1")
              (("" (TYPEPRED "a2")
                (("" (PROP)
                  (("1" (GRIND) NIL NIL)
                   ("2" (EXPAND "divides" 1)
                    (("2" (INST 1 "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   SHOSTAK))
 (|get_new_value_lst_TCC1| 0
  (|get_new_value_lst_TCC1-1| NIL 3803892545 ("" (TCC))
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_new_value_lst_TCC2| 0
  (|get_new_value_lst_TCC2-1| NIL 3803892545 ("" (TCC))
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_new_value_lst_TCC3| 0
  (|get_new_value_lst_TCC3-1| NIL 3803927799 ("" (TCC))
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_new_value_lst_TCC4| 0
  (|get_new_value_lst_TCC4-1| NIL 3803927799 ("" (TCC))
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_new_value_lst_TCC5| 0
  (|get_new_value_lst_TCC5-1| NIL 3803927799 ("" (TCC))
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_new_value_lst_TCC6| 0
  (|get_new_value_lst_TCC6-1| NIL 3803927799 ("" (TCC))
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_lst_dio_matrix_TCC1| 0
  (|get_lst_dio_matrix_TCC1-1| NIL 3803893135 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_lst_dio_matrix_TCC2| 0
  (|get_lst_dio_matrix_TCC2-1| NIL 3803920303 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|find_vectors_TCC1| 0
  (|find_vectors_TCC1-1| NIL 3803482194 ("" (TCC))
   ((|divides| CONST-DECL "bool" |divides| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|find_vectors_TCC2| 0
  (|find_vectors_TCC2-1| NIL 3803482194 ("" (TCC))
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|find_vectors_TCC3| 0
  (|find_vectors_TCC3-1| NIL 3803482194
   ("" (SKEEP)
    (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|find_vectors_TCC4| 0
  (|find_vectors_TCC4-1| NIL 3803482194
   ("" (SKEEP)
    (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL))
   SHOSTAK))
 (|find_vectors_TCC5| 0
  (|find_vectors_TCC5-1| NIL 3803482194 ("" (TCC))
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|dio_solver_TCC1| 0
  (|dio_solver_TCC1-1| NIL 3803482194 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|dio_solver_TCC2| 0 (|dio_solver_TCC2-1| NIL 3803482194 ("" (TCC)) NIL NIL))
 (|prod_TCC1| 0
  (|prod_TCC1-1| NIL 3807737143 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|prod_TCC2| 0
  (|prod_TCC2-1| NIL 3807737143 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|dio_matrix_correct?_TCC1| 0
  (|dio_matrix_correct?_TCC1-1| NIL 3807737143 ("" (SUBTYPE-TCC) NIL NIL)
   ((|row_cor?| CONST-DECL "bool" |diophantine| NIL)
    (|split| CONST-DECL "[list[T], list[T]]" |list_theory| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|dio_matrix_correct?_TCC2| 0
  (|dio_matrix_correct?_TCC2-1| NIL 3807737143 ("" (TERMINATION-TCC) NIL NIL)
   ((|row_cor?| CONST-DECL "bool" |diophantine| NIL)
    (|split| CONST-DECL "[list[T], list[T]]" |list_theory| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|dio_matrix_correct?_TCC3| 0
  (|dio_matrix_correct?_TCC3-1| NIL 3807737143 ("" (SUBTYPE-TCC) NIL NIL)
   ((|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|prod_get_repeat_lst0| 0
  (|prod_get_repeat_lst0-1| NIL 3807738288
   ("" (INDUCT "mult_t")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("a1" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "prod" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("2" (EXPAND "get_repeat_lst" 2 2)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (GRIND) NIL NIL)
                       ("2" (EXPAND "get_repeat_lst" 2)
                        (("2" (ASSERT) (("2" (INST? -1) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|prod| DEF-DECL "nat" |diophantine| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL))
   SHOSTAK))
 (|get_new_value_lst_len| 0
  (|get_new_value_lst_len-1| NIL 3808162744
   ("" (INDUCT "value_lst") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|get_new_value_lst| DEF-DECL "list[nat]" |diophantine| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|get_new_value_lst_nth_TCC1| 0
  (|get_new_value_lst_nth_TCC1-1| NIL 3808155006
   ("" (SKEEP) (("" (REWRITE "get_new_value_lst_len") NIL NIL)) NIL)
   ((|get_new_value_lst_len| FORMULA-DECL NIL |diophantine| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL))
   NIL))
 (|get_new_value_lst_nth| 0
  (|get_new_value_lst_nth-1| NIL 3808162683
   ("" (INDUCT "value_lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "nth" 1 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (EXPAND "get_new_value_lst" 1)
                  (("1" (EXPAND "nth" -4)
                    (("1" (ASSERT)
                      (("1" (EXPAND "nth" 1) (("1" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "nth" 2 2)
                  (("2" (ASSERT)
                    (("2" (INST -1 "a1" "k" "n-1")
                      (("2" (EXPAND "nth" -3) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP) (("3" (REWRITE "get_new_value_lst_len") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|get_new_value_lst_len| FORMULA-DECL NIL |diophantine| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|get_new_value_lst| DEF-DECL "list[nat]" |diophantine| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|put_in_head_matrix?| 0
  (|put_in_head_matrix?-1| NIL 3808145448
   ("" (INDUCT "dio")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("row" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "put_in_head" 1)
            (("2" (EXPAND "matrix?" 1)
              (("2" (EXPAND "matrix?" -2)
                (("2" (ASSERT)
                  (("2" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "length" 1 1)
                        (("1" (ASSERT)
                          (("1" (INST? -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|put_in_head| DEF-DECL "list[list[T]]" |list_theory| NIL)
    (|matrix?| DEF-DECL "bool" |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL))
   SHOSTAK))
 (|put_in_head_mem_TCC1| 0
  (|put_in_head_mem_TCC1-1| NIL 3808162744 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|put_in_head_mem| 0
  (|put_in_head_mem-1| NIL 3808149956
   ("" (INDUCT "dio")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("row" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "put_in_head" -2)
            (("2" (EXPAND "member" -2)
              (("2" (SPLIT -2)
                (("1" (GRIND) NIL NIL)
                 ("2" (INST? -2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|put_in_head| DEF-DECL "list[list[T]]" |list_theory| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   SHOSTAK))
 (|get_lst_dio_matrix_matrix?| 0
  (|get_lst_dio_matrix_matrix?-1| NIL 3808144710
   ("" (INDUCT "value_lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "get_lst_dio_matrix" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (HIDE 1)
                  (("2" (EXPAND "flatten" 1)
                    (("2" (REWRITE "matrix_append")
                      (("2" (PROP)
                        (("1" (LEMMA "put_in_head_matrix?")
                          (("1" (INST? -1)
                            (("1" (ASSERT)
                              (("1" (HIDE 2)
                                (("1" (INST? -2)
                                  (("1" (ASSERT)
                                    (("1" (HIDE 1)
                                      (("1" (HIDE -1)
                                        (("1" (GRIND)
                                          (("1" (REVEAL 3)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (INST -1 "cdr(lst_dio_matrix)" "n")
                          (("2" (ASSERT)
                            (("2" (SKEEP)
                              (("2" (INST -2 "dio")
                                (("2" (ASSERT)
                                  (("2" (GRIND)
                                    (("2" (HIDE 1 2)
                                      (("2" (GRIND)
                                        (("2" (REVEAL 3)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|put_in_head| DEF-DECL "list[list[T]]" |list_theory| NIL)
    (|matrix_append| FORMULA-DECL NIL |list_theory| NIL)
    (|put_in_head_matrix?| FORMULA-DECL NIL |diophantine| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|get_lst_dio_matrix| DEF-DECL "list[dio_matrix]" |diophantine| NIL)
    (|flatten| DEF-DECL "list[T]" |list_theory| NIL)
    (|matrix?| DEF-DECL "bool" |list_theory| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|get_lst_dio_matrix_len| 0
  (|get_lst_dio_matrix_len-1| NIL 3808149827
   ("" (INDUCT "value_lst" 1)
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "get_lst_dio_matrix" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "length" 2 1)
                  (("2" (EXPAND "length" 2 2)
                    (("2" (EXPAND "length" 2 3)
                      (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|get_lst_dio_matrix| DEF-DECL "list[dio_matrix]" |diophantine| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|get_lst_dio_matrix_mem_nth_TCC1| 0
  (|get_lst_dio_matrix_mem_nth_TCC1-1| NIL 3808149048
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_lst_dio_matrix_mem_nth_TCC2| 0
  (|get_lst_dio_matrix_mem_nth_TCC2-1| NIL 3808149048
   ("" (SKEEP)
    (("" (REWRITE "get_lst_dio_matrix_len") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|get_lst_dio_matrix_len| FORMULA-DECL NIL |diophantine| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL))
   NIL))
 (|get_lst_dio_matrix_mem_nth_TCC3| 0
  (|get_lst_dio_matrix_mem_nth_TCC3-1| NIL 3808153060
   ("" (SKEEP)
    (("" (REWRITE "get_lst_dio_matrix_len") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|get_lst_dio_matrix_len| FORMULA-DECL NIL |diophantine| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|get_lst_dio_matrix_mem_nth| 0
  (|get_lst_dio_matrix_mem_nth-1| NIL 3808149147
   ("" (MEASURE-INDUCT "length(lst_dio_matrix)" "lst_dio_matrix")
    (("1" (SKOLEM 1 "lst_dio_matrix")
      (("1" (PROP)
        (("1" (SKEEP)
          (("1" (HIDE -1)
            (("1" (EXPAND "get_lst_dio_matrix" -2)
              (("1" (LIFT-IF)
                (("1" (SPLIT)
                  (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (FLATTEN)
                    (("2" (EXPAND "nth" -1)
                      (("2" (LIFT-IF)
                        (("2" (SPLIT)
                          (("1" (FLATTEN)
                            (("1" (LEMMA "put_in_head_mem")
                              (("1" (INST? -1)
                                (("1" (ASSERT)
                                  (("1" (FLATTEN)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "nth" 4)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (REVEAL -1)
                              (("2" (INST -1 "cdr(lst_dio_matrix)")
                                (("2" (SPLIT)
                                  (("1" (EXPAND "nth" 4)
                                    (("1" (ASSERT)
                                      (("1" (HIDE -1)
                                        (("1" (REVEAL -2)
                                          (("1" (INST -1 "cdr(lst_dio_matrix)")
                                            (("1" (SPLIT -1)
                                              (("1"
                                                (INST -1 "n-1" "row"
                                                 "cdr(value_lst)")
                                                (("1" (ASSERT)
                                                  (("1" (SPLIT -1)
                                                    (("1" (PROPAX) NIL NIL)
                                                     ("2" (HIDE 5)
                                                      (("2" (HIDE -1)
                                                        (("2"
                                                          (LEMMA
                                                           "get_lst_dio_matrix_len")
                                                          (("2" (INST? -1)
                                                            (("2"
                                                              (REPLACE -1 1)
                                                              (("2" (HIDE -1)
                                                                (("2"
                                                                  (LEMMA
                                                                   "get_lst_dio_matrix_len")
                                                                  (("2"
                                                                    (INST? -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (GRIND) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (HIDE -1 -3 1)
          (("2" (LEMMA "get_lst_dio_matrix_len")
            (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP) (("3" (HIDE -1 -2 -3) (("3" (GRIND) NIL NIL)) NIL)) NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (LEMMA "get_lst_dio_matrix_len")
          (("4" (HIDE -3 1) (("4" (INST? -1) (("4" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP) (("5" (HIDE -1 -2) (("5" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|put_in_head_mem| FORMULA-DECL NIL |diophantine| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|get_lst_dio_matrix_len| FORMULA-DECL NIL |diophantine| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|get_lst_dio_matrix| DEF-DECL "list[dio_matrix]" |diophantine| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   SHOSTAK))
 (|find_vectors_matrix| 0
  (|find_vectors_matrix-1| NIL 3808143025
   ("" (INDUCT "mult_t")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("a1" "X"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "length" 1)
            (("2" (EXPAND "find_vectors" 1)
              (("2" (LIFT-IF)
                (("2" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2"
                      (NAME-REPLACE "X1_values"
                       "from_min2max[nat](0, floor(n/a1))")
                      (("2"
                        (NAME-REPLACE "new_k_lst"
                         "get_new_value_lst(n, a1, X1_values)")
                        (("2"
                          (NAME-REPLACE "lst_smaller_dio"
                           "map(find_vectors(X))(new_k_lst)")
                          (("2"
                            (NAME-REPLACE "lst_dio"
                             "get_lst_dio_matrix(X1_values, lst_smaller_dio)")
                            (("2" (EXPAND "lst_dio" 2)
                              (("2" (LEMMA "get_lst_dio_matrix_matrix?")
                                (("2" (INST? -1)
                                  (("2" (PROP)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE 2 3)
                                      (("2" (SKEEP)
                                        (("2" (EXPAND "lst_smaller_dio")
                                          (("2"
                                            (LEMMA "member_nth2[dio_matrix]")
                                            (("2" (INST? -1)
                                              (("2" (REPLACE -1 -2)
                                                (("2" (HIDE -1)
                                                  (("2" (SKOLEM -1 "i")
                                                    (("2"
                                                      (REWRITE "map_nth_rw")
                                                      (("1" (INST? -2)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (TYPEPRED "i")
                                                        (("2"
                                                          (REWRITE
                                                           "map_length")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|from_min2max| DEF-DECL "list[nat]" |list_theory| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL)
    (|lst_dio| SKOLEM-CONST-DECL "list[dio_matrix]" |diophantine| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|lst_smaller_dio| SKOLEM-CONST-DECL "list[dio_matrix]" |diophantine| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member_nth2| FORMULA-DECL NIL |list_theory| NIL)
    (|get_lst_dio_matrix_matrix?| FORMULA-DECL NIL |diophantine| NIL)
    (|get_lst_dio_matrix| DEF-DECL "list[dio_matrix]" |diophantine| NIL)
    (|get_new_value_lst| DEF-DECL "list[nat]" |diophantine| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|find_vectors| DEF-DECL "dio_matrix" |diophantine| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|matrix?| DEF-DECL "bool" |list_theory| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|find_vectors_len| 0
  (|find_vectors_len-1| NIL 3807901159
   ("" (SKEEP)
    (("" (LEMMA "find_vectors_matrix")
      (("" (INST? -1)
        (("" (LEMMA "matrix_mem[nat]")
          (("" (INST? -1)
            (("" (INST -1 "find_vectors(mult_t)(n)") (("" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|find_vectors_matrix| FORMULA-DECL NIL |diophantine| NIL)
    (|matrix_mem| FORMULA-DECL NIL |list_theory| NIL)
    (|find_vectors| DEF-DECL "dio_matrix" |diophantine| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|find_vectors_cor| 0
  (|find_vectors_cor-1| NIL 3808146734
   ("" (INDUCT "mult_t")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKOLEM 1 ("a1" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "prod" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (HIDE -2 1)
                  (("1" (LEMMA "find_vectors_len")
                    (("1" (INST? -1)
                      (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "find_vectors" -2)
                  (("2" (LIFT-IF)
                    (("2" (SPLIT)
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (FLATTEN)
                            (("1" (HIDE -1 -4) (("1" (GRIND) NIL NIL)) NIL))
                            NIL)
                           ("2" (HIDE -2 -3 1 2) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2"
                          (NAME-REPLACE "X1_values"
                           "from_min2max[nat](0, floor(n/a1))")
                          (("2"
                            (NAME-REPLACE "new_k_lst"
                             "get_new_value_lst(n, a1, X1_values)")
                            (("2"
                              (NAME-REPLACE "lst_smaller_dio"
                               "map(find_vectors(tail))(new_k_lst)")
                              (("2"
                                (NAME-REPLACE "lst_dio"
                                 "get_lst_dio_matrix(X1_values, lst_smaller_dio)")
                                (("2" (EXPAND "lst_dio")
                                  (("2" (LEMMA "flatten_mem[list[nat]]")
                                    (("2" (INST? -1)
                                      (("2" (ASSERT)
                                        (("2" (SKOLEM -1 "j")
                                          (("2" (HIDE -2)
                                            (("2"
                                              (LEMMA
                                               "get_lst_dio_matrix_mem_nth")
                                              (("2" (INST? -1)
                                                (("2" (ASSERT)
                                                  (("2" (HIDE -2)
                                                    (("2"
                                                      (EXPAND
                                                       "lst_smaller_dio")
                                                      (("2"
                                                        (REWRITE "map_nth_rw")
                                                        (("1"
                                                          (INST -2
                                                           "nth(new_k_lst, j)"
                                                           "cdr(value_lst)")
                                                          (("1" (ASSERT)
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                (("1" (HIDE -2)
                                                                  (("1"
                                                                    (REPLACE -2
                                                                             3)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "X1_values")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "nth_from_min2max")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           3)
                                                                          (("1"
                                                                            (HIDE
                                                                             -1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "new_k_lst")
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "get_new_value_lst_nth")
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -2)
                                                                                  (("1"
                                                                                    (INST?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (PROP)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         3)
                                                                                        (("1"
                                                                                          (HIDE
                                                                                           -1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "X1_values")
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "nth_from_min2max")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (TYPEPRED
                                                                                                 "j")
                                                                                                (("2"
                                                                                                  (REWRITE
                                                                                                   "get_lst_dio_matrix_len")
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "X1_values")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (TYPEPRED
                                                                                         "j")
                                                                                        (("2"
                                                                                          (REWRITE
                                                                                           "get_lst_dio_matrix_len")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("3"
                                                                                        (EXPAND
                                                                                         "X1_values")
                                                                                        (("3"
                                                                                          (REWRITE
                                                                                           "nth_from_min2max")
                                                                                          (("1"
                                                                                            (TYPEPRED
                                                                                             "j")
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "get_lst_dio_matrix_len")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "X1_values")
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "from_min2max_len")
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     2
                                                                                                     3
                                                                                                     4)
                                                                                                    (("1"
                                                                                                      (CASE
                                                                                                          "j <= floor(n/a1)")
                                                                                                      (("1"
                                                                                                        (HIDE
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (GRIND)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "floor_def")
                                                                                                            (("1"
                                                                                                              (INST?
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (FLATTEN)
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (CASE
                                                                                                                        " j <= n/a1")
                                                                                                                    (("1"
                                                                                                                      (HIDE
                                                                                                                       -2
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (CASE
                                                                                                                            "j = n/a1")
                                                                                                                        (("1"
                                                                                                                          (GRIND)
                                                                                                                          NIL
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (CASE 
                                                                                                                              "j < n/a1")
                                                                                                                          (("1"
                                                                                                                            (HIDE
                                                                                                                             -2
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (GRIND)
                                                                                                                              (("1"
                                                                                                                                (REWRITE
                                                                                                                                 "div_mult_pos_lt2")
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE
                                                                                                                       -1
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (GRIND)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (HIDE
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (GRIND)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (TYPEPRED
                                                                                             "j")
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               2
                                                                                               3
                                                                                               4
                                                                                               5)
                                                                                              (("2"
                                                                                                (REWRITE
                                                                                                 "get_lst_dio_matrix_len")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "X1_values")
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (TYPEPRED
                                                                           "j")
                                                                          (("2"
                                                                            (HIDE
                                                                             -2
                                                                             -3
                                                                             2
                                                                             4)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "get_lst_dio_matrix_len")
                                                                              (("2"
                                                                                (INST?
                                                                                 -1)
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   -2
                                                                                   NIL
                                                                                   T)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "X1_values")
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (TYPEPRED "j")
                                                          (("2"
                                                            (LEMMA
                                                             "get_lst_dio_matrix_len")
                                                            (("2" (INST? -1)
                                                              (("2"
                                                                (REPLACE -1 -2)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "lst_smaller_dio"
                                                                     -1)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "map_length")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|from_min2max| DEF-DECL "list[nat]" |list_theory| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL)
    (|lst_dio| SKOLEM-CONST-DECL "list[dio_matrix]" |diophantine| NIL)
    (|get_lst_dio_matrix_mem_nth| FORMULA-DECL NIL |diophantine| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lst_smaller_dio| SKOLEM-CONST-DECL "list[dio_matrix]" |diophantine| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|X1_values| SKOLEM-CONST-DECL "list[nat]" |diophantine| NIL)
    (|new_k_lst| SKOLEM-CONST-DECL "list[nat]" |diophantine| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|get_lst_dio_matrix_len| FORMULA-DECL NIL |diophantine| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|from_min2max_len| FORMULA-DECL NIL |list_theory| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|floor_def| FORMULA-DECL NIL |floor_ceil| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|get_new_value_lst_nth| FORMULA-DECL NIL |diophantine| NIL)
    (|nth_from_min2max| FORMULA-DECL NIL |list_theory| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|flatten_mem| FORMULA-DECL NIL |list_theory| NIL)
    (|get_lst_dio_matrix| DEF-DECL "list[dio_matrix]" |diophantine| NIL)
    (|get_new_value_lst| DEF-DECL "list[nat]" |diophantine| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|find_vectors_len| FORMULA-DECL NIL |diophantine| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|prod| DEF-DECL "nat" |diophantine| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|find_vectors| DEF-DECL "dio_matrix" |diophantine| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|dio_solver_n_member_find_vector| 0
  (|dio_solver_n_member_find_vector-1| NIL 3807866193
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (NAME-REPLACE "dio" "dio_solver_n(mult_t1, mult_t2, n)")
        (("" (PROP)
          (("1" (EXPAND "dio")
            (("1" (EXPAND "dio_solver_n" -1)
              (("1" (LEMMA "member_nth2[list[nat]]")
                (("1" (INST? -1)
                  (("1" (REPLACE -1 -2)
                    (("1" (HIDE -1)
                      (("1" (SKEEP)
                        (("1" (REWRITE "split_matrix_nth")
                          (("1" (REWRITE "map_nth_rw")
                            (("1" (LEMMA "split_append_pair[nat]")
                              (("1" (INST -1 "length(mult_t1)" "_")
                                (("1" (INST? -1)
                                  (("1" (PROP)
                                    (("1" (HIDE -2)
                                      (("1" (REPLACE -1 -2)
                                        (("1" (HIDE -1)
                                          (("1"
                                            (NAME-REPLACE "cart_prod"
                                             "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                                            (("1"
                                              (LEMMA
                                               "member_nth[[list[nat], list[nat]]]")
                                              (("1" (INST? -1)
                                                (("1" (PROP)
                                                  (("1"
                                                    (LEMMA
                                                     "cart_prod_mem[list[nat]]")
                                                    (("1" (INST? -1)
                                                      (("1"
                                                        (INST -1
                                                         "find_vectors(mult_t2)(n)"
                                                         "nth(cart_prod, n_1)`2")
                                                        (("1" (REPLACE -3 -1)
                                                          (("1" (ASSERT)
                                                            (("1" (REVEAL -4)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (REPLACE -1
                                                                           1)
                                                                  (("1"
                                                                    (HIDE -1 -3
                                                                     2)
                                                                    (("1"
                                                                      (GRIND)
                                                                      (("1"
                                                                        (CASE
                                                                            "nth(cart_prod, n_1) = (nth(cart_prod, n_1)`1, nth(cart_prod, n_1)`2)")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (TYPEPRED "n_1")
                                                    (("2"
                                                      (LEMMA
                                                       "split_matrix_len[nat]")
                                                      (("2" (INST? -1)
                                                        (("2" (FLATTEN)
                                                          (("2" (HIDE -2)
                                                            (("2"
                                                              (REPLACE -1 -2)
                                                              (("2" (HIDE -1)
                                                                (("2"
                                                                  (REWRITE
                                                                   "map_length")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "cart_prod"
                                                                     1)
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -1 2)
                                      (("2"
                                        (NAME-REPLACE "cart_prod"
                                         "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                                        (("2"
                                          (LEMMA
                                           "member_nth[[list[nat], list[nat]]]")
                                          (("2" (INST? -1)
                                            (("2" (PROP)
                                              (("1" (EXPAND "cart_prod")
                                                (("1"
                                                  (NAME-REPLACE "x1"
                                                   "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n)), n_1)")
                                                  (("1"
                                                    (LEMMA
                                                     "cart_prod_mem[list[nat]]")
                                                    (("1" (INST? -1)
                                                      (("1"
                                                        (INST -1 "x1`1" "x1`2")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (CASE
                                                                "member(x1`1, find_vectors(mult_t1)(n))")
                                                            (("1" (HIDE -2 -3)
                                                              (("1"
                                                                (LEMMA
                                                                 "find_vectors_len")
                                                                (("1"
                                                                  (INST? -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2" (GRIND)
                                                                (("2" (HIDE 1)
                                                                  (("2"
                                                                    (CASE
                                                                        "x1 = (x1`1, x1`2)")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 -2)
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE -1
                                                                       2)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2" (TYPEPRED "n_1")
                                                  (("2" (REVEAL -2)
                                                    (("2" (REPLACE -1 -2)
                                                      (("2" (HIDE -1)
                                                        (("2"
                                                          (LEMMA
                                                           "split_matrix_len[nat]")
                                                          (("2" (INST? -1)
                                                            (("2" (ASSERT)
                                                              (("2" (FLATTEN)
                                                                (("2"
                                                                  (REPLACE -1
                                                                           -3)
                                                                  (("2"
                                                                    (HIDE -1
                                                                     -2)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "map_length")
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -1)
                              (("2" (TYPEPRED "n_1")
                                (("2" (LEMMA "split_matrix_len[nat]")
                                  (("2" (INST? -1)
                                    (("2" (FLATTEN)
                                      (("2" (REPLACE -1 -3)
                                        (("2" (HIDE -1 -2)
                                          (("2" (REWRITE "map_length") NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1 2)
                            (("2" (TYPEPRED "n_1")
                              (("2" (LEMMA "split_matrix_len[nat]")
                                (("2" (INST? -1)
                                  (("2" (FLATTEN)
                                    (("2" (REPLACE -1 -3)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "dio" -1)
            (("2" (EXPAND "dio_solver_n" -1)
              (("2"
                (NAME-REPLACE "cart_prod"
                 "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                (("2" (LEMMA "member_nth2[list[nat]]")
                  (("2" (INST? -1)
                    (("2" (ASSERT)
                      (("2" (ASSERT)
                        (("2" (SKEEP)
                          (("2" (HIDE -2)
                            (("2" (LEMMA "split_matrix_nth2[nat]")
                              (("2" (INST? -1)
                                (("2" (PROP)
                                  (("1" (REPLACE -1 -2)
                                    (("1" (HIDE -1)
                                      (("1" (REWRITE "map_nth_rw")
                                        (("1" (LEMMA "split_append_pair[nat]")
                                          (("1" (INST? -1)
                                            (("1" (PROP)
                                              (("1" (REPLACE -2 -3)
                                                (("1" (HIDE -1 -2)
                                                  (("1"
                                                    (LEMMA
                                                     "member_nth[[list[nat], list[nat]]]")
                                                    (("1" (INST? -1)
                                                      (("1" (PROP)
                                                        (("1"
                                                          (LEMMA
                                                           "cart_prod_mem[list[nat]]")
                                                          (("1"
                                                            (EXPAND
                                                             "cart_prod")
                                                            (("1"
                                                              (NAME-REPLACE
                                                               "x2"
                                                               "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n)), n!1)")
                                                              (("1"
                                                                (INST -1
                                                                 "find_vectors(mult_t1)(n)"
                                                                 "find_vectors(mult_t2)(n)"
                                                                 "x2`1" "x2`2")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (HIDE -2 2)
                                                                    (("1"
                                                                      (GRIND)
                                                                      (("1"
                                                                        (CASE
                                                                            "x2 = (x2`1, x2`2)")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE -1 2)
                                                          (("2"
                                                            (TYPEPRED "n!1")
                                                            (("2"
                                                              (LEMMA
                                                               "split_matrix_len[nat]")
                                                              (("2" (INST? -1)
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "cart_prod"
                                                                     1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -2 -3)
                                                                        (("2"
                                                                          (REWRITE
                                                                           "map_length")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "cart_prod")
                                                                            (("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE -1 2)
                                                (("2" (EXPAND "cart_prod")
                                                  (("2"
                                                    (LEMMA "find_vectors_len")
                                                    (("2" (INST? -1)
                                                      (("2"
                                                        (INST -1
                                                         "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n)), n!1)`1")
                                                        (("2" (ASSERT)
                                                          (("2" (HIDE 2)
                                                            (("2" (REVEAL -9)
                                                              (("2"
                                                                (REPLACE -1 1)
                                                                (("2"
                                                                  (LEMMA
                                                                   "cart_prod_mem[list[nat]]")
                                                                  (("2"
                                                                    (INST -1
                                                                     "find_vectors(mult_t1)(n)"
                                                                     "find_vectors(mult_t2)(n)"
                                                                     "nth(cart_prod, n!1)`1"
                                                                     "nth(cart_prod, n!1)`2")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (HIDE
                                                                         2)
                                                                        (("2"
                                                                          (CASE
                                                                              "(nth(cart_prod, n!1)`1, nth(cart_prod, n!1)`2) = nth(cart_prod, n!1)")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -2
                                                                               1)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "member_nth[[list[nat], list[nat]]]")
                                                                                (("1"
                                                                                  (INST?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -1
                                                                                       -2
                                                                                       2)
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "split_matrix_len[nat]")
                                                                                          (("1"
                                                                                            (INST?
                                                                                             -1)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       "map_length")
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE -1 2)
                                          (("2" (TYPEPRED "n!1")
                                            (("2"
                                              (LEMMA "split_matrix_len[nat]")
                                              (("2" (INST? -1)
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE -1)
                                                    (("2" (REPLACE -1 -2)
                                                      (("2" (HIDE -1)
                                                        (("2"
                                                          (REWRITE
                                                           "map_length")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE -1 2)
                                    (("2" (TYPEPRED "n!1")
                                      (("2" (LEMMA "split_matrix_len[nat]")
                                        (("2" (INST? -1)
                                          (("2" (FLATTEN)
                                            (("2" (HIDE -1)
                                              (("2" (REPLACE -1 -2)
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|split_matrix_nth2| FORMULA-DECL NIL |list_theory| NIL)
    (|cart_prod| SKOLEM-CONST-DECL "list[[list[nat], list[nat]]]" |diophantine|
     NIL)
    (|dio_solver_n| CONST-DECL "dio_matrix" |diophantine| NIL)
    (|split_matrix| DEF-DECL "[list[list[T]], list[list[T]]]" |list_theory|
     NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL)
    (|append_pair| CONST-DECL "list[T]" |list_theory| NIL)
    (|cartesian_product| DEF-DECL "list[[T, T]]" |list_theory| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|find_vectors| DEF-DECL "dio_matrix" |diophantine| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|split_matrix_nth| FORMULA-DECL NIL |list_theory| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|split_append_pair| FORMULA-DECL NIL |list_theory| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|find_vectors_len| FORMULA-DECL NIL |diophantine| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|cart_prod| SKOLEM-CONST-DECL "list[[list[nat], list[nat]]]" |diophantine|
     NIL)
    (|member_nth| FORMULA-DECL NIL |list_theory| NIL)
    (|cart_prod_mem| FORMULA-DECL NIL |list_theory| NIL)
    (|split_matrix_len| FORMULA-DECL NIL |list_theory| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|cart_prod| SKOLEM-CONST-DECL "list[[list[nat], list[nat]]]" |diophantine|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|member_nth2| FORMULA-DECL NIL |list_theory| NIL))
   SHOSTAK))
 (|dio_solver_n_member_cor| 0
  (|dio_solver_n_member_cor-1| NIL 3807905860
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (LEMMA "dio_solver_n_member_find_vector")
        (("" (INST? -1)
          (("" (INST -1 "row")
            (("" (ASSERT)
              (("" (FLATTEN)
                (("" (PROP)
                  (("1" (REWRITE "find_vectors_cor") NIL NIL)
                   ("2" (REWRITE "find_vectors_cor") NIL NIL)
                   ("3" (REWRITE "find_vectors_cor") NIL NIL)
                   ("4" (REWRITE "find_vectors_cor") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|find_vectors_cor| FORMULA-DECL NIL |diophantine| NIL)
    (|dio_solver_n_member_find_vector| FORMULA-DECL NIL |diophantine| NIL))
   SHOSTAK))
 (|dio_solver_n_split_matrix| 0
  (|dio_solver_n_split_matrix-1| NIL 3807802920
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (PROP)
        (("1" (REWRITE "equal_lst_nth")
          (("1" (HIDE 2)
            (("1" (REWRITE "map_length")
              (("1" (REWRITE "get_repeat_lst_len")
                (("1" (LEMMA "split_matrix_len[nat]")
                  (("1" (INST? -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (SKOLEM 1 "i")
              (("2" (REWRITE "map_nth_rw")
                (("1" (LEMMA "dio_solver_n_member_cor")
                  (("1" (INST? -1)
                    (("1" (INST -1 "mult_t2")
                      (("1" (ASSERT)
                        (("1" (FLATTEN)
                          (("1" (HIDE -2)
                            (("1" (ASSERT)
                              (("1" (HIDE 2)
                                (("1" (LEMMA "member_nth[list[nat]]")
                                  (("1" (INST? -1)
                                    (("1" (ASSERT)
                                      (("1" (TYPEPRED "i")
                                        (("1" (REWRITE "map_length")
                                          (("1" (ASSERT)
                                            (("1"
                                              (LEMMA "get_repeat_lst_nth[nat]")
                                              (("1" (INST? -1)
                                                (("1" (ASSERT)
                                                  (("1" (HIDE 2 -2)
                                                    (("1"
                                                      (LEMMA
                                                       "split_matrix_len[nat]")
                                                      (("1" (INST? -1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "i") (("2" (REWRITE "map_length") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "equal_lst_nth")
          (("1" (HIDE 2)
            (("1" (REWRITE "map_length")
              (("1" (REWRITE "get_repeat_lst_len")
                (("1" (LEMMA "split_matrix_len[nat]")
                  (("1" (INST? -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (SKOLEM 1 "i")
              (("2" (REWRITE "map_nth_rw")
                (("1" (REWRITE "get_repeat_lst_nth")
                  (("1" (LEMMA "dio_solver_n_member_cor")
                    (("1" (INST -1 "mult_t1" "mult_t2" "n" "_")
                      (("1" (INST? -1)
                        (("1" (ASSERT)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (HIDE -1)
                                (("1" (HIDE 2)
                                  (("1" (LEMMA "member_nth[list[nat]]")
                                    (("1" (INST? -1)
                                      (("1" (ASSERT)
                                        (("1" (HIDE 2)
                                          (("1" (TYPEPRED "i")
                                            (("1" (REWRITE "map_length") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "i")
                    (("2" (REWRITE "map_length")
                      (("2" (HIDE 2)
                        (("2" (LEMMA "split_matrix_len[nat]")
                          (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (TYPEPRED "i") (("2" (REWRITE "map_length") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|get_repeat_lst_nth| FORMULA-DECL NIL |list_theory| NIL)
    (|member_nth| FORMULA-DECL NIL |list_theory| NIL)
    (|dio_solver_n_member_cor| FORMULA-DECL NIL |diophantine| NIL)
    (|get_repeat_lst_len| FORMULA-DECL NIL |list_theory| NIL)
    (|split_matrix_len| FORMULA-DECL NIL |list_theory| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|dio_solver_n| CONST-DECL "dio_matrix" |diophantine| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|split_matrix| DEF-DECL "[list[list[T]], list[list[T]]]" |list_theory|
     NIL)
    (|prod| DEF-DECL "nat" |diophantine| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|equal_lst_nth| FORMULA-DECL NIL |list_theory| NIL))
   SHOSTAK))
 (|dio_matrix_correct?_append| 0
  (|dio_matrix_correct?_append-1| NIL 3807743211
   ("" (INDUCT "dio_matrix1")
    (("1" (SKEEP)
      (("1" (EXPAND "append" 1)
        (("1" (EXPAND "dio_matrix_correct?" 1 2) (("1" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "append" 1 1)
            (("2" (EXPAND "dio_matrix_correct?" 1 1)
              (("2" (EXPAND "dio_matrix_correct?" 1 2)
                (("2" (ASSERT) (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|dio_matrix_correct?| DEF-DECL "bool" |diophantine| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL))
   SHOSTAK))
 (|dio_matrix_correct?_split| 0
  (|dio_matrix_correct?_split-1| NIL 3807800229
   ("" (MEASURE-INDUCT "length(dio_matrix)" "dio_matrix")
    (("" (SKOLEM 1 "dio")
      (("" (PROP)
        (("" (HIDE -1)
          (("" (SKEEP)
            (("" (EXPAND "dio_matrix_correct?" 1)
              (("" (LIFT-IF)
                (("" (SPLIT)
                  (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (FLATTEN)
                    (("2" (EXPAND "split_matrix" 2)
                      (("2" (LIFT-IF)
                        (("2" (ASSERT)
                          (("2" (EXPAND "map" 2)
                            (("2" (EXPAND "row_cor?" 2)
                              (("2" (REVEAL -1)
                                (("2" (INST -1 "cdr(dio)")
                                  (("2" (SPLIT -1)
                                    (("1" (INST -1 "mult_t1" "mult_t2")
                                      (("1" (ASSERT)
                                        (("1" (FLATTEN)
                                          (("1" (HIDE 1)
                                            (("1" (SPLIT 1)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (FLATTEN)
                                                (("2" (ASSERT)
                                                  (("2" (SPLIT 1)
                                                    (("1" (HIDE -2 -3)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (DECOMPOSE-EQUALITY)
                                                          NIL NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE -2)
                                                      (("2" (ASSERT)
                                                        (("2" (HIDE 1)
                                                          (("2"
                                                            (DECOMPOSE-EQUALITY)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|row_cor?| CONST-DECL "bool" |diophantine| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|split| CONST-DECL "[list[T], list[T]]" |list_theory| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|split_matrix| DEF-DECL "[list[list[T]], list[list[T]]]" |list_theory|
     NIL)
    (|prod| DEF-DECL "nat" |diophantine| NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|dio_matrix_correct?| DEF-DECL "bool" |diophantine| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|dio_solver_n_cor| 0
  (|dio_solver_n_cor-1| NIL 3807777173
   ("" (SKEEP)
    (("" (LEMMA "dio_matrix_correct?_split")
      (("" (INST? -1)
        (("" (ASSERT)
          (("" (PROP)
            (("" (HIDE 2 3)
              (("" (LEMMA "dio_solver_n_split_matrix")
                (("" (INST? -1)
                  (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|dio_matrix_correct?_split| FORMULA-DECL NIL |diophantine| NIL)
    (|dio_solver_n_split_matrix| FORMULA-DECL NIL |diophantine| NIL)
    (|dio_solver_n| CONST-DECL "dio_matrix" |diophantine| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|dio_solver_cor| 0
  (|dio_solver_cor-1| NIL 3807737143
   ("" (INDUCT "bound")
    (("1" (SKEEP)
      (("1" (EXPAND "dio_solver" 1)
        (("1" (EXPAND "dio_matrix_correct?" 1)
          (("1" (PROP)
            (("1" (EXPAND "row_cor?" 1)
              (("1" (LEMMA "split_append[nat]")
                (("1" (LEMMA "get_repeat_lst_append[nat]")
                  (("1" (INST? -1)
                    (("1" (REPLACE -1 1 RL)
                      (("1" (HIDE -1)
                        (("1" (INST? -1)
                          (("1" (REWRITE "get_repeat_lst_len")
                            (("1" (REPLACE -1 1)
                              (("1" (HIDE -1)
                                (("1" (ASSERT)
                                  (("1" (REWRITE "prod_get_repeat_lst0")
                                    (("1" (REWRITE "prod_get_repeat_lst0") NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKOLEM 1 "n")
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "dio_solver" 1)
            (("2" (REWRITE "dio_matrix_correct?_append")
              (("2" (INST? -1)
                (("2" (ASSERT)
                  (("2" (HIDE -1)
                    (("2" (LEMMA "dio_solver_n_cor") (("2" (INST? -1) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|dio_matrix_correct?_append| FORMULA-DECL NIL |diophantine| NIL)
    (|dio_solver_n| CONST-DECL "dio_matrix" |diophantine| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|dio_solver_n_cor| FORMULA-DECL NIL |diophantine| NIL)
    (|row_cor?| CONST-DECL "bool" |diophantine| NIL)
    (|get_repeat_lst_append| FORMULA-DECL NIL |list_theory| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|prod_get_repeat_lst0| FORMULA-DECL NIL |diophantine| NIL)
    (|get_repeat_lst_len| FORMULA-DECL NIL |list_theory| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|split_append| FORMULA-DECL NIL |list_theory| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|dio_solver| DEF-DECL "dio_matrix" |diophantine| NIL)
    (|dio_matrix_correct?| DEF-DECL "bool" |diophantine| NIL)
    (|dio_matrix| TYPE-EQ-DECL NIL |diophantine| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK)))

