(unification_alg
 (unify_TCC1 0
  (unify_TCC1-1 nil 3850901211
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (flatten)
      (("" (skolem 2 ("up" "P1"))
        (("" (flatten)
          (("" (skeep)
            (("" (skolem 3 ("sig1" "new_sig" "new_P"))
              (("" (flatten)
                (("" (lemma "nice_input_apply_sub")
                  (("" (inst -1 "V(s)" "t" "sig" "P" "P1" "V")
                    (("" (assert)
                      (("" (assert)
                        (("" (hide 4)
                          (("" (typepred "input")
                            (("" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (case "input = (P, sig, V)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (decompose-equality 1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "choose_unif_pair_mem1_alt")
                                (("2"
                                  (assert)
                                  (("2"
                                    (use "term_variable_eta")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (expand "member" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (use "choose_unif_pair_mem1_alt")
                                (("3"
                                  (assert)
                                  (("3"
                                    (replace -5 :dir rl)
                                    (("3"
                                      (expand "member" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (skolem 1 "t1")
                                (("4"
                                  (flatten)
                                  (("4"
                                    (lemma "choose_unif_pair_mem2_alt")
                                    (("4"
                                      (inst -1 "t1" "P")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (member const-decl "bool" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nice_input_apply_sub formula-decl nil apply_ac_step nil))
   nil
   (unify subtype
    "(unification_alg.new_unif_prb, unification_alg.new_sigma, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_TCC2 0
  (unify_TCC1-3 "" 3823722604
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (skolem 3 ("sig1" "new_sig" "new_P"))
              (("" (flatten)
                (("" (use "lex4_lt")
                  (("" (assert)
                    (("" (hide 4)
                      (("" (replace -1)
                        (("" (replace -1 :dir rl)
                          (("" (flatten)
                            (("" (hide 2)
                              ((""
                                (use "card_strict_subset[variable]")
                                ((""
                                  (assert)
                                  ((""
                                    (hide 2)
                                    ((""
                                      (expand "strict_subset?" 1)
                                      ((""
                                        (lemma "basic_sub_info")
                                        ((""
                                          (inst?)
                                          ((""
                                            (assert)
                                            ((""
                                              (replace -10 :dir rl)
                                              ((""
                                                (replace -12 1)
                                                ((""
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (use
                                                         "vars_not_ac_apply_sub")
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "union"
                                                                   -1)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (rewrite
                                                                         "vars_not_ac_singleton")
                                                                        (("1"
                                                                          (rewrite
                                                                           "vars_not_ac_unif_prb_mem2"
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "t")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "choose_unif_pair_mem1_alt")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member"
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "vars_not_ac_unif_prb_mem2"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "vars_not_ac_unif_prb_mem2"
                                                                         -1)
                                                                        (("2"
                                                                          (skolem
                                                                           -1
                                                                           "t1")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               "t1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "choose_unif_pair_mem2_alt")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "t1"
                                                                                     "P")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "member(V(s), vars_not_ac(P))")
                                                    (("1"
                                                      (replace
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "vars_not_ac_vars")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "apply_sub_elim_var")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "V(s)"
                                                                   "sig1"
                                                                   "P1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "singleton"
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -5)
                                                                            (("1"
                                                                              (rewrite
                                                                               "vars_singleton"
                                                                               -1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "vars_not_ac_unif_prb_mem2"
                                                       1)
                                                      (("2"
                                                        (inst 1 "s")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "vars_not_ac"
                                                             1)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (use
                                                                 "choose_unif_pair_mem1_alt")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "member"
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 ("member"
                                                                  "singleton")
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex4_lt formula-decl nil lex4 nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (size def-decl "nat" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (strict_subset_is_strict_order name-judgement
     "(strict_order?[set[T]])" sets_lemmas nil)
    (strict_subset? const-decl "bool" sets nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (union const-decl "set" sets nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (vars_not_ac_unif_prb_mem2 formula-decl nil termination_alg nil)
    (member const-decl "bool" unification nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil)
    (vars_not_ac_singleton formula-decl nil termination_alg nil)
    (member const-decl "bool" sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (vars_not_ac_apply_sub formula-decl nil termination_alg nil)
    (subset? const-decl "bool" sets nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars_singleton formula-decl nil term_properties nil)
    (apply_sub_elim_var formula-decl nil unification nil)
    (vars_not_ac_vars formula-decl nil termination_alg nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (basic_sub_info formula-decl nil substitution nil)
    (card_strict_subset formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (unify termination
    "unification_alg.unify(unification_alg.new_unif_prb, unification_alg.new_sigma, unification_alg.vars2avoid)"
    "nil"))
  (unify_TCC1-2 "" 3822388628
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide -1 -2 -3 -4 -5)
            (("" (rewrite "lex4_lt")
              (("" (flatten)
                (("" (hide 4)
                  (("" (rewrite "card_strict_subset")
                    (("" (hide 2 3 4)
                      (("" (expand "strict_subset?")
                        (("" (prop)
                          (("1" (replace -3)
                            (("1" (lemma "vars_not_ac_apply_sub")
                              (("1"
                                (inst -1 "sigma1" "unif_prb1")
                                (("1"
                                  (case
                                   "subset?(union(vars_not_ac(img(sigma1)), vars_not_ac(unif_prb1)), vars_not_ac(unif_prb))")
                                  (("1"
                                    (lemma
                                     "subset_transitive[variable]")
                                    (("1"
                                      (inst
                                       -1
                                       "vars_not_ac(apply_sub(sigma1, unif_prb1))"
                                       "union(vars_not_ac(img(sigma1)), vars_not_ac(unif_prb1))"
                                       "vars_not_ac(unif_prb)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (expand "subset?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "member" -1)
                                          (("2"
                                            (expand "union" -1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "img(sigma1) = singleton(t)")
                                                (("1"
                                                  (replace -1 -2)
                                                  (("1"
                                                    (rewrite
                                                     "vars_not_ac_singleton")
                                                    (("1"
                                                      (lemma
                                                       "vars_not_ac_unif_prb_mem")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "unif_pair")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (reveal
                                                                   -6)
                                                                  (("1"
                                                                    (expand
                                                                     "vars_not_ac"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "union")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (reveal
                                                                   -4)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "choose_unif_pair1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -2 1)
                                                  (("2"
                                                    (lemma
                                                     "img_basic_sub")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "vars_not_ac_unif_prb_mem")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (lemma
                                                     "choose_unif_pair2")
                                                    (("2"
                                                      (reveal -4)
                                                      (("2"
                                                        (replace -1 -4)
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "unif_pair!1"
                                                           "unif_prb")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "vars_not_ac_unif_prb_mem")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x"
                                                                 "unif_prb")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "unif_pair!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (case "member(V(s), vars_not_ac(unif_prb))")
                            (("1"
                              (case "NOT member(V(s), vars_not_ac(new_unif_prb))")
                              (("1"
                                (replace -2 -1 :dir rl)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (replace -6 -1)
                                (("2"
                                  (lemma "vars_not_ac_vars")
                                  (("2"
                                    (inst
                                     -1
                                     "V(s)"
                                     "apply_sub(sigma1, unif_prb1)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "apply_sub_elim_var")
                                        (("2"
                                          (inst
                                           -1
                                           "V(s)"
                                           "sigma1"
                                           "unif_prb1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (replace -5 1)
                                                (("1"
                                                  (lemma
                                                   "dom_basic_sub")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "singleton")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2 -3 -4 -5)
                                                (("2"
                                                  (replace -2 -1)
                                                  (("2"
                                                    (lemma
                                                     "img_basic_sub")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -2)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (rewrite
                                                               "vars_singleton")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal -1 -4)
                              (("2"
                                (lemma "vars_not_ac_unif_prb_mem")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "unif_pair")
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "vars_not_ac" 1)
                                            (("1"
                                              (expand "member" 1)
                                              (("1"
                                                (expand "union" 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (reveal -6)
                                                        (("1"
                                                          (expand
                                                           "vars_not_ac"
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -1 1)
                                            (("2"
                                              (rewrite
                                               "choose_unif_pair1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_elim_var formula-decl nil unification nil)
    (vars_singleton formula-decl nil term_properties nil)
    (dom_basic_sub formula-decl nil substitution nil)
    (vars_not_ac_vars formula-decl nil termination_alg nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (vars_not_ac_singleton formula-decl nil termination_alg nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (vars_not_ac_unif_prb_mem formula-decl nil termination_alg nil)
    (img_basic_sub formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (vars_not_ac_apply_sub formula-decl nil termination_alg nil)
    (size def-decl "nat" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   shostak
   (unify termination
    "unification_alg.unify(unification_alg.new_unif_prb, unification_alg.new_sigma, unification_alg.vars2avoid)"
    "nil"))
  (unify_TCC1-1 nil 3822387991 ("" (termination-tcc) nil nil) nil nil
   (unify termination
    "unification_alg.unify(unification_alg.new_unif_prb, unification_alg.new_sigma, unification_alg.vars2avoid)"
    "nil")))
 (unify_TCC3 0
  (unify_TCC3-1 nil 3850901211
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (flatten)
      (("" (skolem 2 ("up" "P1"))
        (("" (flatten)
          (("" (skeep)
            (("" (skeep)
              (("" (hide 2)
                (("" (lemma "nice_input_subterms")
                  (("" (inst -1 "sig" "P" "P1" "V")
                    (("" (assert)
                      (("" (prop)
                        (("1" (typepred "input")
                          (("1" (replace -2)
                            (("1" (replace -3)
                              (("1"
                                (replace -4)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "input = (input`1, input`2, input`3)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (decompose-equality 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "subset?" 1)
                          (("2" (skeep)
                            (("2" (rewrite "subterms_mem_unif_prb")
                              (("2"
                                (rewrite "subterms_mem_unif_prb")
                                (("2"
                                  (skolem -1 "t1")
                                  (("2"
                                    (inst 1 "t1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "choose_unif_pair_mem2_alt")
                                            (("2"
                                              (inst -1 "t1" "P")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (typepred "input")
                          (("3" (expand "nice_input?" -1)
                            (("3" (flatten)
                              (("3"
                                (replace -7 :dir rl)
                                (("3"
                                  (hide -1 -2 -3 -4 -6)
                                  (("3"
                                    (lemma
                                     "choose_unif_well_formed_no_pair")
                                    (("3"
                                      (inst -1 "P")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input_subterms formula-decl nil apply_ac_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_unif_well_formed_no_pair formula-decl nil aux_unification
     nil)
    (subset? const-decl "bool" sets nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (unify subtype
    "(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_TCC4 0
  (unify_TCC2-1 nil 3822387991
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (skeep)
                (("" (replace -1 :dir rl)
                  (("" (hide -1 -2 -3)
                    (("" (use "lex4_lt")
                      (("" (assert)
                        (("" (hide 3)
                          (("" (flatten)
                            ((""
                              (case "card(vars_not_ac(P1)) <= card(vars_not_ac(P))")
                              (("1"
                                (assert)
                                (("1"
                                  (use "lex3_lt")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case
                                           "card(vars_under2more(P1)) <= card(vars_under2more(P))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (use "lex2_lt")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (case
                                                         "card(admissible_subterms(P1)) <= card(admissible_subterms(P))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 1
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("1"
                                                                  (use
                                                                   "choose_unif_size2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("2"
                                                              (use
                                                               "card_subset[term]")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "subset?"
                                                                   1)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "admissible_subterms"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "member"
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           ("member"
                                                                            "admissible_subterms")
                                                                           1)
                                                                          (("2"
                                                                            (skolem
                                                                             -1
                                                                             "t1")
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               "t1")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "choose_unif_pair_mem2_alt")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "t1"
                                                                                       "P")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (use
                                                 "card_subset[variable]")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "subset?"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (lemma
                                                           "vars_under2more_subterms_subset")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "P")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "subset?"
                                                                   1)
                                                                  (("2"
                                                                    (skolem
                                                                     1
                                                                     "x1")
                                                                    (("2"
                                                                      (prop)
                                                                      (("2"
                                                                        (rewrite
                                                                         "subterms_mem_unif_prb")
                                                                        (("2"
                                                                          (rewrite
                                                                           "subterms_mem_unif_prb")
                                                                          (("2"
                                                                            (skolem
                                                                             -1
                                                                             "t1")
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "t1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "choose_unif_pair_mem2_alt")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "t1"
                                                                                       "P")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 3)
                                (("2"
                                  (use "card_subset[variable]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "subset?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (rewrite
                                           "vars_not_ac_unif_prb_mem2"
                                           1)
                                          (("2"
                                            (rewrite
                                             "vars_not_ac_unif_prb_mem2")
                                            (("2"
                                              (skolem -1 "t1")
                                              (("2"
                                                (inst 1 "t1")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "choose_unif_pair_mem2_alt")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "t1"
                                                         "P")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex4_lt formula-decl nil lex4 nil)
    (size def-decl "nat" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" reals nil)
    (lex3_lt formula-decl nil lex3 nil)
    (lex2_lt formula-decl nil lex2 nil)
    (card_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_unif_size2 formula-decl nil aux_unification nil)
    (vars_under2more_subterms_subset formula-decl nil termination_alg
     nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_not_ac_unif_prb_mem2 formula-decl nil termination_alg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (unify termination
    "unification_alg.unify(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nil")))
 (unify_TCC5 0
  (unify_TCC5-1 nil 3850901211
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (flatten)
      (("" (skolem 2 ("up" "P1"))
        (("" (flatten)
          (("" (skeep)
            (("" (hide 2)
              (("" (skolem 2 "x")
                (("" (flatten)
                  (("" (skolem 3 ("sig1" "new_sig" "new_P"))
                    (("" (flatten)
                      (("" (lemma "nice_input_apply_sub")
                        (("" (inst -1 "x" "s" "sig" "P" "P1" "V")
                          (("" (assert)
                            (("" (assert)
                              ((""
                                (hide 4)
                                ((""
                                  (typepred "input")
                                  ((""
                                    (prop)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "input = (P, sig, V)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "choose_unif_pair_mem1_alt")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -9 :dir rl)
                                          (("2"
                                            (expand "member" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (use "choose_unif_pair_mem1_alt")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -5 :dir rl)
                                          (("3"
                                            (expand "member" 1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skolem 1 "t1")
                                      (("4"
                                        (flatten)
                                        (("4"
                                          (lemma
                                           "choose_unif_pair_mem2_alt")
                                          (("4"
                                            (inst -1 "t1" "P")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (member const-decl "bool" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nice_input_apply_sub formula-decl nil apply_ac_step nil))
   nil
   (unify subtype
    "(unification_alg.new_unif_prb, unification_alg.new_sigma, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_TCC6 0
  (unify_TCC3-1 nil 3822387991
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (skolem 3 "x")
              (("" (flatten)
                (("" (hide 2)
                  (("" (skolem 3 ("sig1" "new_sig" "new_P"))
                    (("" (flatten)
                      (("" (use "lex4_lt")
                        (("" (assert)
                          (("" (hide 4)
                            (("" (replace -1)
                              ((""
                                (replace -1 :dir rl)
                                ((""
                                  (flatten)
                                  ((""
                                    (hide 2)
                                    ((""
                                      (use
                                       "card_strict_subset[variable]")
                                      ((""
                                        (assert)
                                        ((""
                                          (hide 2)
                                          ((""
                                            (expand "strict_subset?" 1)
                                            ((""
                                              (lemma "basic_sub_info")
                                              ((""
                                                (inst?)
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (replace
                                                     -10
                                                     :dir
                                                     rl)
                                                    ((""
                                                      (replace -12 1)
                                                      ((""
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           1)
                                                          (("1"
                                                            (skolem
                                                             1
                                                             "x1")
                                                            (("1"
                                                              (use
                                                               "vars_not_ac_apply_sub")
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "member"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "union"
                                                                             -1)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "vars_not_ac_singleton")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vars_not_ac_unif_prb_mem2"
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "s")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (use
                                                                                           "choose_unif_pair_mem1_alt")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 "vars_not_ac_unif_prb_mem2"
                                                                                 1)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "vars_not_ac_unif_prb_mem2"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (skolem
                                                                                     -1
                                                                                     "t1")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "t1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "choose_unif_pair_mem2_alt")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "t1"
                                                                                               "P")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "member(x, vars_not_ac(P))")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "vars_not_ac_vars")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "apply_sub_elim_var")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x"
                                                                         "sig1"
                                                                         "P1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "singleton"
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vars_singleton"
                                                                                     -1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "vars_not_ac_unif_prb_mem2"
                                                             1)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "t")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "vars_not_ac"
                                                                   1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (use
                                                                       "choose_unif_pair_mem1_alt")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "member"
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       ("member"
                                                                        "singleton")
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "term_variable_eta")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -13
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_strict_subset formula-decl nil finite_sets nil)
    (basic_sub_info formula-decl nil substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars_not_ac_vars formula-decl nil termination_alg nil)
    (apply_sub_elim_var formula-decl nil unification nil)
    (vars_singleton formula-decl nil term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (subset? const-decl "bool" sets nil)
    (vars_not_ac_apply_sub formula-decl nil termination_alg nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member const-decl "bool" sets nil)
    (vars_not_ac_singleton formula-decl nil termination_alg nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil)
    (member const-decl "bool" unification nil)
    (vars_not_ac_unif_prb_mem2 formula-decl nil termination_alg nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (union const-decl "set" sets nil)
    (strict_subset? const-decl "bool" sets nil)
    (strict_subset_is_strict_order name-judgement
     "(strict_order?[set[T]])" sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (size def-decl "nat" unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (lex4_lt formula-decl nil lex4 nil))
   nil
   (unify termination
    "unification_alg.unify(unification_alg.new_unif_prb, unification_alg.new_sigma, unification_alg.vars2avoid)"
    "nil")))
 (unify_TCC7 0
  (unify_TCC7-1 nil 3850901211
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (skeep)
                (("" (lemma "nice_input_subterms")
                  (("" (inst -1 "sig" "P" "P1" "V")
                    (("" (assert)
                      (("" (prop)
                        (("1" (typepred "input")
                          (("1" (case "input = (P, sig, V)")
                            (("1" (replace -1) (("1" (propax) nil nil))
                              nil)
                             ("2" (decompose-equality 1) nil nil))
                            nil))
                          nil)
                         ("2" (expand "subset?" 1)
                          (("2" (skeep)
                            (("2" (rewrite "subterms_mem_unif_prb")
                              (("2"
                                (rewrite "subterms_mem_unif_prb")
                                (("2"
                                  (skolem -1 "t1")
                                  (("2"
                                    (inst 1 "t1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "choose_unif_pair_mem2_alt")
                                            (("2"
                                              (inst -1 "t1" "P")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma "choose_unif_well_formed_no_pair")
                          (("3" (inst -1 "P")
                            (("3" (assert)
                              (("3"
                                (typepred "input")
                                (("3"
                                  (expand "nice_input?" -1)
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input_subterms formula-decl nil apply_ac_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_unif_well_formed_no_pair formula-decl nil aux_unification
     nil)
    (subset? const-decl "bool" sets nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (unify subtype
    "(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_TCC8 0
  (unify_TCC4-1 nil 3822387991
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (skeep)
                (("" (use "lex4_lt")
                  (("" (assert)
                    (("" (hide 3)
                      (("" (flatten)
                        ((""
                          (case "card(vars_not_ac(P1)) <= card(vars_not_ac(P))")
                          (("1" (assert)
                            (("1" (hide 1)
                              (("1"
                                (use "lex3_lt")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (case
                                       "card(vars_under2more(P1)) <= card(vars_under2more(P))")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (use "lex2_lt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 3)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "card(admissible_subterms(P1)) <= card(admissible_subterms(P))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (use
                                                               "choose_unif_size2")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (use
                                                             "card_subset[term]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "subset?"
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     ("member"
                                                                      "admissible_subterms")
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       ("member"
                                                                        "admissible_subterms")
                                                                       1)
                                                                      (("2"
                                                                        (skolem
                                                                         -1
                                                                         "t1")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "t1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "choose_unif_pair_mem2_alt")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "t1"
                                                                                   "P")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "vars_under2more_subterms_subset")
                                          (("2"
                                            (inst -1 "P" "P1")
                                            (("2"
                                              (use
                                               "card_subset[variable]")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "vars_under2more_subterms_subset")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "P1"
                                                       "P")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "subset?"
                                                           1)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (rewrite
                                                               "subterms_mem_unif_prb")
                                                              (("2"
                                                                (rewrite
                                                                 "subterms_mem_unif_prb")
                                                                (("2"
                                                                  (skolem
                                                                   -1
                                                                   "t1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "t1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "choose_unif_pair_mem2_alt")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "t1"
                                                                             "P")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3)
                            (("2" (use "card_subset[variable]")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "subset?" 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (rewrite
                                       "vars_not_ac_unif_prb_mem2"
                                       1)
                                      (("2"
                                        (rewrite
                                         "vars_not_ac_unif_prb_mem2")
                                        (("2"
                                          (skolem -1 "t1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst 1 "t1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "choose_unif_pair_mem2_alt")
                                                  (("2"
                                                    (inst -1 "t1" "P")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars_not_ac_unif_prb_mem2 formula-decl nil termination_alg nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex3_lt formula-decl nil lex3 nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (vars_under2more_subterms_subset formula-decl nil termination_alg
     nil)
    (choose_unif_size2 formula-decl nil aux_unification nil)
    (card_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (lex2_lt formula-decl nil lex2 nil)
    (<= const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (size def-decl "nat" unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (lex4_lt formula-decl nil lex4 nil))
   nil
   (unify termination
    "unification_alg.unify(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nil")))
 (unify_TCC9 0
  (unify_TCC9-1 nil 3850901211
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (lemma "nice_input_subterms")
                (("" (inst?)
                  (("" (inst -1 "P")
                    (("" (assert)
                      (("" (prop)
                        (("1" (typepred "input")
                          (("1" (case "input = (P, sig, V)")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (decompose-equality 1) nil nil))
                            nil))
                          nil)
                         ("2" (expand "subset?" 1)
                          (("2" (skeep)
                            (("2" (rewrite "subterms_mem_unif_prb")
                              (("2"
                                (rewrite "subterms_mem_unif_prb")
                                (("2"
                                  (skolem -1 "t1")
                                  (("2"
                                    (inst 1 "t1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "choose_unif_pair_mem2_alt")
                                          (("2"
                                            (inst -1 "t1" "P")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma "choose_unif_well_formed_no_pair")
                          (("3" (inst -1 "P")
                            (("3" (assert)
                              (("3"
                                (typepred "input")
                                (("3"
                                  (expand "nice_input?" -1)
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_unif_well_formed_no_pair formula-decl nil aux_unification
     nil)
    (subset? const-decl "bool" sets nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nice_input_subterms formula-decl nil apply_ac_step nil))
   nil
   (unify subtype
    "(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_TCC10 0
  (unify_TCC5-4 nil 3838285253
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (use "lex4_lt")
                (("" (assert)
                  (("" (hide 3)
                    (("" (flatten)
                      ((""
                        (case "card(vars_not_ac(P1)) <= card(vars_not_ac(P))")
                        (("1" (assert)
                          (("1" (hide 1)
                            (("1" (use "lex3_lt")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "card(vars_under2more(P1)) <= card(vars_under2more(P))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1 -2)
                                          (("1"
                                            (use "lex2_lt")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 3)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "card(admissible_subterms(P1)) <= card(admissible_subterms(P))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "choose_unif_size2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3)
                                                        (("2"
                                                          (use
                                                           "card_subset[term]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "subset?"
                                                               1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   ("member"
                                                                    "admissible_subterms")
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     ("member"
                                                                      "admissible_subterms")
                                                                     -1)
                                                                    (("2"
                                                                      (skolem
                                                                       -1
                                                                       "t1")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "t1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "choose_unif_pair_mem2_alt")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "t1"
                                                                                 "P")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (use
                                             "card_subset[variable]")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "vars_under2more_subterms_subset")
                                                (("2"
                                                  (inst -1 "P1" "P")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "subset?"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (rewrite
                                                           "subterms_mem_unif_prb")
                                                          (("2"
                                                            (rewrite
                                                             "subterms_mem_unif_prb")
                                                            (("2"
                                                              (skolem
                                                               -1
                                                               "t1")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "t1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "choose_unif_pair_mem2_alt")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "t1"
                                                                         "P")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2 3)
                          (("2" (use "card_subset[variable]")
                            (("2" (assert)
                              (("2"
                                (expand "subset?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (rewrite
                                     "vars_not_ac_unif_prb_mem2")
                                    (("2"
                                      (rewrite
                                       "vars_not_ac_unif_prb_mem2")
                                      (("2"
                                        (skolem -1 "t1")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst 1 "t1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "choose_unif_pair_mem2_alt")
                                                (("2"
                                                  (inst -1 "t1" "P")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex4_lt formula-decl nil lex4 nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (size def-decl "nat" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" reals nil)
    (vars_under2more_subterms_subset formula-decl nil termination_alg
     nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (lex2_lt formula-decl nil lex2 nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (choose_unif_size2 formula-decl nil aux_unification nil)
    (lex3_lt formula-decl nil lex3 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_not_ac_unif_prb_mem2 formula-decl nil termination_alg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (unify termination
    "unification_alg.unify(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nil"))
  (unify_TCC5-3 nil 3838285032
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (hide-all-but -3 -4)
              (("" (case "member(t, unif_prb) AND member(s, unif_prb)")
                (("1" (hide -1)
                  (("1" (hide-all-but 3)
                    (("1" (lemma "lex4_lt")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (flatten)
                              (("1"
                                (case
                                 "card(vars_not_ac(new_unif_prb)) <= card(vars_not_ac(unif_prb))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "lex3_lt")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 3)
                                          (("1"
                                            (hide -1 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "card(vars_under2more(new_unif_prb)) <= card(vars_under2more(unif_prb))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "lex2_lt")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 3)
                                                          (("1"
                                                            (hide -1 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "card(admissible_subterms(new_unif_prb)) <= card(admissible_subterms(unif_prb))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (reveal
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10
                                                                       -11
                                                                       -12
                                                                       -13
                                                                       -14
                                                                       -15
                                                                       -16)
                                                                      (("1"
                                                                        (lemma
                                                                         "choose_unif_size")
                                                                        (("1"
                                                                          (reveal
                                                                           7)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "unif_prb")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -8)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "size"
                                                                                       2
                                                                                       1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -7)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil)))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (hide
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (reveal
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     -11
                                                                     -13
                                                                     -14
                                                                     -15)
                                                                    (("2"
                                                                      (lemma
                                                                       "card_subset[term]")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "subset?"
                                                                               1)
                                                                              (("2"
                                                                                (skolem
                                                                                 1
                                                                                 "t3")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -8)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "admissible_subterms"
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member"
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "admissible_subterms"
                                                                                             -1
                                                                                             1)
                                                                                            (("2"
                                                                                              (skolem
                                                                                               -1
                                                                                               "t3S")
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (reveal
                                                                                                     -13)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "t")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -7
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "admissible_subterms"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "member"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "prop_subterms"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "adm_subterms_subset")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "arg")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "subset?"
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "t3")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "member"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "subterms"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "union"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (propax)
                                                                                                                                              nil)))))))))))))))))
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "adm_subterms_size")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "t3"
                                                                                                                                 "arg")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil)))))))))
                                                                                                                             ("3"
                                                                                                                              (expand
                                                                                                                               "admissible_subterms"
                                                                                                                               -4)
                                                                                                                              (("3"
                                                                                                                                (expand
                                                                                                                                 "member"
                                                                                                                                 -4
                                                                                                                                 1)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))))))))))))))))))))))
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "s")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "admissible_subterms"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "member"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "prop_subterms"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "term_app_eta")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "s")
                                                                                                                              (("2"
                                                                                                                                (prop)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "adm_subterms_subset")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "arg(s)")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "subset?"
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "t3")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             ("member"
                                                                                                                                              "subterms")
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "union"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil)))))))))))))))
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-1
                                                                                                                                    -2
                                                                                                                                    -4))
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "adm_subterms_size")
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil)))))))
                                                                                                                                 ("3"
                                                                                                                                  (expand
                                                                                                                                   "admissible_subterms"
                                                                                                                                   -4)
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "member"
                                                                                                                                     -4
                                                                                                                                     1)
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil)))))))))))))))))))))))))))))))
                                                                                                       ("3"
                                                                                                        (hide
                                                                                                         1
                                                                                                         2)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "t3S")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (lemma
                                                                                                               "choose_unif_pair_mem2_alt")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "t3S"
                                                                                                                 "unif_prb")
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                 ("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (lemma
                                                     "card_subset[variable]")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "vars_under2more_subterms_subset")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "subset?"
                                                                     1)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (reveal
                                                                         -6
                                                                         -7
                                                                         -8
                                                                         -9
                                                                         -10
                                                                         -11
                                                                         -12
                                                                         -13
                                                                         -14
                                                                         -15)
                                                                        (("2"
                                                                          (rewrite
                                                                           "subterms_mem_unif_prb")
                                                                          (("2"
                                                                            (rewrite
                                                                             "subterms_mem_unif_prb")
                                                                            (("2"
                                                                              (skolem
                                                                               -11
                                                                               "t2")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replace
                                                                                   -8
                                                                                   -13)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member"
                                                                                     -13)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "t")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "subterms"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ("member"
                                                                                                      "union")
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil)))))))))))))))
                                                                                       ("2"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "s")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "term_app_eta")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "s")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subterms"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "union")
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil)))))))))))))))))))
                                                                                       ("3"
                                                                                        (hide
                                                                                         1
                                                                                         2)
                                                                                        (("3"
                                                                                          (inst
                                                                                           1
                                                                                           "t2")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "choose_unif_pair_mem2_alt")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "t2"
                                                                                                 "unif_prb")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (hide 2 3)
                                  (("2"
                                    (lemma "card_subset[variable]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (expand "subset?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (rewrite
                                                 "vars_not_ac_unif_prb_mem2")
                                                (("2"
                                                  (rewrite
                                                   "vars_not_ac_unif_prb_mem2")
                                                  (("2"
                                                    (skolem -1 "t2")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (reveal
                                                         -3
                                                         -4
                                                         -5
                                                         -6
                                                         -7
                                                         -8
                                                         -9
                                                         -10
                                                         -11
                                                         -12)
                                                        (("2"
                                                          (replace
                                                           -8
                                                           -11)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             -11)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -8)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "t")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -5)
                                                                        (("1"
                                                                          (expand
                                                                           "vars_not_ac"
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))))))))
                                                               ("2"
                                                                (replace
                                                                 -8)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "s")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "term_app_eta")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "s")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (expand
                                                                                 "vars_not_ac"
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))
                                                               ("3"
                                                                (inst
                                                                 3
                                                                 "t2")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (lemma
                                                                     "choose_unif_pair_mem2_alt")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "t2"
                                                                       "unif_prb")
                                                                      (("3"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (hide-all-but (-1 -2 -3 1))
                  (("2" (reveal -6)
                    (("2" (reveal 1)
                      (("2" (prop)
                        (("1" (lemma "choose_unif_pair_mem1_alt")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (expand "member" 1)
                                (("1" (propax) nil)))))))))
                         ("2" (lemma "choose_unif_pair_mem1_alt")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (expand "member" 1)
                                (("2"
                                  (propax)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil
   (unify termination
    "unification_alg.unify(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nil"))
  (unify_TCC5-2 nil 3838284974
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (hide-all-but 3)
              (("" (lemma "lex4_lt")
                (("" (inst?)
                  (("" (assert)
                    (("" (hide 2)
                      (("" (flatten)
                        (("" (hide 1)
                          ((""
                            (case "vars_not_ac(new_unif_prb) = vars_not_ac(unif_prb)")
                            (("1" (assert)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "lex3_lt")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case
                                             "card(vars_under2more(new_unif_prb)) <= card(vars_under2more(unif_prb))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "lex2_lt")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "card(admissible_subterms(new_unif_prb)) <= card(admissible_subterms(unif_prb))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               1)
                                                              (("1"
                                                                (reveal
                                                                 -7
                                                                 -8
                                                                 -9
                                                                 -10
                                                                 -11
                                                                 -12
                                                                 -13
                                                                 -14
                                                                 -15)
                                                                (("1"
                                                                  (reveal
                                                                   -9)
                                                                  (("1"
                                                                    (replace
                                                                     -10)
                                                                    (("1"
                                                                      (lemma
                                                                       "choose_unif_size")
                                                                      (("1"
                                                                        (reveal
                                                                         7)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "unif_prb")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "size"
                                                                                         2
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "size"
                                                                                           2
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "term_pair_eta")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "s")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))
                                                           ("2"
                                                            (hide 2 3)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (lemma
                                                                 "card_subset[term]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?"
                                                                         1)
                                                                        (("2"
                                                                          (skolem
                                                                           1
                                                                           "t3")
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (reveal
                                                                               -7
                                                                               -8
                                                                               -9
                                                                               -10
                                                                               -11
                                                                               -12
                                                                               -13
                                                                               -14
                                                                               -15)
                                                                              (("2"
                                                                                (expand
                                                                                 "admissible_subterms"
                                                                                 -10)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   -10
                                                                                   1)
                                                                                  (("2"
                                                                                    (skolem
                                                                                     -10
                                                                                     "t3S")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "admissible_subterms"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -9)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member"
                                                                                               -10)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "t")
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "choose_unif_pair_mem1_alt")
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             10)
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -2
                                                                                                                   2
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member"
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil)))))))))))))
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "adm_subterms_pair")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "union")
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil)))))))))))))))
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "s")
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "choose_unif_pair_mem1_alt")
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             10)
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -2
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member"
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil)))))))))))))
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "term_pair_eta")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "s")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "adm_subterms_pair")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   ("member"
                                                                                                                    "union")
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil)))))))))))))))))))
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   1
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -9)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "t")
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "choose_unif_pair_mem1_alt")
                                                                                                                (("1"
                                                                                                                  (reveal
                                                                                                                   12)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil)))))))))))))
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -6)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "adm_subterms_pair")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       ("member"
                                                                                                                        "union")
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil)))))))))))))))))
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -9)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "s")
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "choose_unif_pair_mem1_alt")
                                                                                                                (("1"
                                                                                                                  (reveal
                                                                                                                   12)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil)))))))))))))
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "term_pair_eta")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "adm_subterms_pair")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         ("member"
                                                                                                                          "union")
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil)))))))))))))))))))
                                                                                                       ("3"
                                                                                                        (hide
                                                                                                         1
                                                                                                         2)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "t3S")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (lemma
                                                                                                               "choose_unif_pair_mem2_alt")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "t3S"
                                                                                                                 "unif_prb")
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (lemma
                                                 "card_subset[variable]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "vars_under2more_subterms_subset")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2 3)
                                                            (("2"
                                                              (expand
                                                               "subset?"
                                                               1)
                                                              (("2"
                                                                (skolem
                                                                 1
                                                                 "t3")
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (reveal
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     -11
                                                                     -12
                                                                     -13
                                                                     -14)
                                                                    (("2"
                                                                      (rewrite
                                                                       "subterms_mem_unif_prb")
                                                                      (("2"
                                                                        (skolem
                                                                         -10
                                                                         "t3S")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (replace
                                                                             -9)
                                                                            (("2"
                                                                              (expand
                                                                               "member"
                                                                               -11)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (replace
                                                                                   -8)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "subterms_mem_unif_prb")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "t")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subterms"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 ("member"
                                                                                                  "union")
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil)))))))
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "choose_unif_pair_mem1_alt")
                                                                                            (("2"
                                                                                              (reveal
                                                                                               9)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil)))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (replace
                                                                                   -8)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "subterms_mem_unif_prb")
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "s")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subterms"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 ("member"
                                                                                                  "union")
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil)))))
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "choose_unif_pair_mem1_alt")
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 9)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member"
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil)))))))))))))))))))))))))
                                                                                 ("3"
                                                                                  (hide
                                                                                   1
                                                                                   2)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "member"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -9)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "subterms_mem_unif_prb")
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "t")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "subterms"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "union")
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil)))))))
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "choose_unif_pair_mem1_alt")
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       11)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "member"
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil)))))))))))))))))))))))))
                                                                                       ("2"
                                                                                        (replace
                                                                                         -9)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "subterms_mem_unif_prb")
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "s")
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "subterms"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ("member"
                                                                                                      "union")
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil)))))
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "choose_unif_pair_mem1_alt")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       11)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil)))))))))))))))))))))))
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "choose_unif_pair_mem2_alt")
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "subterms_mem_unif_prb")
                                                                                          (("3"
                                                                                            (inst
                                                                                             3
                                                                                             "t3S")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "t3S"
                                                                                                 "unif_prb")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                             ("2" (hide 2)
                              (("2"
                                (reveal -2 -3 -4 -5 -8 -9 -10)
                                (("2"
                                  (rewrite "subset_antisymmetric")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (expand "subset?" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (replace -8)
                                          (("1"
                                            (case
                                             "subset?(vars_not_ac((t, s)), vars_not_ac(unif_prb))")
                                            (("1"
                                              (expand "vars_not_ac" -2)
                                              (("1"
                                                (expand
                                                 ("member" "union")
                                                 -2)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replace -7)
                                                    (("1"
                                                      (expand
                                                       "subset?"
                                                       -2)
                                                      (("1"
                                                        (inst -2 "x")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "vars_not_ac"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "vars_not_ac"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   ("member"
                                                                    "union")
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (reveal
                                                                       -7)
                                                                      (("1"
                                                                        (reveal
                                                                         -8)
                                                                        (("1"
                                                                          (use
                                                                           "term_pair_eta")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               "vars_not_ac"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "union")
                                                                                   1)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "term_pair_eta")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "t")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "t1 = term1(t)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -5)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))))
                                                                             ("2"
                                                                              (expand
                                                                               "vars_not_ac"
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "union")
                                                                                   2)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))))))))))))
                                                   ("2"
                                                    (expand
                                                     "vars_not_ac"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       -1)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (replace -8)
                                                          (("1"
                                                            (expand
                                                             "subset?"
                                                             -2)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -8
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "vars_not_ac"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         ("member"
                                                                          "union")
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "vars_not_ac"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "union"
                                                                             1)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (reveal
                                                                                 -8)
                                                                                (("1"
                                                                                  (expand
                                                                                   "vars_not_ac"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "union"
                                                                                         1)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (case
                                                                                             "t2 = term2(t)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))
                                                                               ("2"
                                                                                (reveal
                                                                                 -9)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "term_pair_eta")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "s")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       2
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vars_not_ac"
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "union"
                                                                                             2)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              nil)))))))))))))))))))))))))))))))))))))
                                                         ("2"
                                                          (rewrite
                                                           "vars_not_ac_unif_prb_mem2")
                                                          (("2"
                                                            (skolem
                                                             -1
                                                             "t3")
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (rewrite
                                                                 "vars_not_ac_unif_prb_mem2")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "t3")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "choose_unif_pair_mem2_alt")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "t3"
                                                                         "unif_prb")
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))))))))))))))
                                             ("2"
                                              (hide -8 -1 2)
                                              (("2"
                                                (expand "subset?" 1)
                                                (("2"
                                                  (skolem 1 "X")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "vars_not_ac"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (rewrite
                                                             "vars_not_ac_unif_prb_mem2")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "t")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "choose_unif_pair_mem1_alt")
                                                                  (("1"
                                                                    (reveal
                                                                     7)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "t"
                                                                       "unif_prb")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "member"
                                                                           2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)))))))))))))))))
                                                           ("2"
                                                            (rewrite
                                                             "vars_not_ac_unif_prb_mem2")
                                                            (("2"
                                                              (inst
                                                               1
                                                               "s")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "choose_unif_pair_mem1_alt")
                                                                  (("2"
                                                                    (reveal
                                                                     7)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "member"
                                                                           2)
                                                                          (("2"
                                                                            (propax)
                                                                            nil)))))))))))))))))))))))))))))))))))))))))
                                   ("2"
                                    (expand "subset?" 1)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (rewrite
                                         "vars_not_ac_unif_prb_mem2")
                                        (("2"
                                          (skolem -1 "t3")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("2"
                                                (lemma
                                                 "choose_unif_pair_mem_alt")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (replace
                                                         -4
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             -1)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (reveal
                                                                     -7)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "vars_not_ac"
                                                                         -4)
                                                                        (("1"
                                                                          (expand
                                                                           ("member"
                                                                            "union")
                                                                           -4)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (rewrite
                                                                               "vars_not_ac_unif_prb_mem2")
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "t1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "member_unif_prb_equiv"
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "unif_pair1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -10)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)))))))))))))))))
                                                                             ("2"
                                                                              (rewrite
                                                                               "vars_not_ac_unif_prb_mem2")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "t2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "member_unif_prb_equiv"
                                                                                     1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "unif_pair2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -10)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))))))))))
                                                               ("2"
                                                                (replace
                                                                 -6
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (reveal
                                                                     -8)
                                                                    (("2"
                                                                      (lemma
                                                                       "term_pair_eta")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "s")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           -5
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (expand
                                                                             "vars_not_ac"
                                                                             -5)
                                                                            (("2"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -5)
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vars_not_ac_unif_prb_mem2")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "term1(s)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8
                                                                                           1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "member_unif_prb_equiv"
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "unif_pair1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil)))))))))))))))))))
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "vars_not_ac_unif_prb_mem2")
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "term2(s)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "member_unif_prb_equiv"
                                                                                         1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "unif_pair2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -11)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))
                                                       ("2"
                                                        (replace
                                                         -5
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (rewrite
                                                           "vars_not_ac_unif_prb_mem2")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "t3")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -10)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   1)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (expand
                                                                       "member"
                                                                       3)
                                                                      (("2"
                                                                        (propax)
                                                                        nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil
   (unify termination
    "unification_alg.unify(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nil"))
  (unify_TCC5-1 nil 3838284778 ("" (termination-tcc) nil nil) nil nil
   (unify termination
    "unification_alg.unify(unification_alg.unif_prb1, unification_alg.sigma, unification_alg.vars2avoid)"
    "nil")))
 (unify_TCC11 0
  (unify_TCC11-1 nil 3850901211
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (skeep)
                (("" (skolem 2 ("P2" "new_P"))
                  (("" (flatten)
                    (("" (lemma "nice_input_subterms")
                      (("" (inst -1 "sig" "P" "new_P" "V")
                        (("" (assert)
                          (("" (prop)
                            (("1" (typepred "input")
                              (("1"
                                (case "input = (P, sig, V)")
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2" (decompose-equality 1) nil nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (expand "subset?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (replace -14 -1)
                                    (("2"
                                      (rewrite "subterms_append")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (lemma "decompose_subterm")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -14 :dir rl)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (expand
                                                       "subterms"
                                                       -1)
                                                      (("1"
                                                        (expand
                                                         "union"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (rewrite
                                                             "subterms_mem_unif_prb")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "t")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "subterms"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       1)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -9
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "choose_unif_pair_mem1_alt")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "member"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "s")
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "subterms"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       1)
                                                                      (("1"
                                                                        (prop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "choose_unif_pair_mem1_alt")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "member"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "subterms_mem_unif_prb")
                                          (("2"
                                            (rewrite
                                             "subterms_mem_unif_prb")
                                            (("2"
                                              (skolem -1 "t1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst 1 "t1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "choose_unif_pair_mem2_alt")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "t1"
                                                         "P")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (replace -13 1)
                              (("3"
                                (rewrite "no_pair_append")
                                (("3"
                                  (prop)
                                  (("1"
                                    (use "decompose_no_pair")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (use
                                     "choose_unif_well_formed_no_pair")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "input")
                                        (("2"
                                          (expand "nice_input?" -1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input_subterms formula-decl nil apply_ac_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (decompose_no_pair formula-decl nil unification nil)
    (choose_unif_well_formed_no_pair formula-decl nil aux_unification
     nil)
    (no_pair_append formula-decl nil unification nil)
    (subterms_append formula-decl nil unification nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (decompose_subterm formula-decl nil unification nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" unification nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (union const-decl "set" sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (subset? const-decl "bool" sets nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (unify subtype
    "(unification_alg.new_unif_prb, unification_alg.sigma, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_TCC12 0
  (unify_TCC5-1 nil 3822387991
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (skeep)
                (("" (skolem 2 ("P2" "new_P"))
                  (("" (prop)
                    (("" (replace -1)
                      (("" (replace -1 :dir rl)
                        (("" (hide -1 -2 -3)
                          (("" (use "lex4_lt")
                            (("" (assert)
                              ((""
                                (hide 3)
                                ((""
                                  (flatten)
                                  ((""
                                    (case
                                     "card(vars_not_ac(new_P)) <= card(vars_not_ac(P))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (use "lex3_lt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case
                                                   "card(vars_under2more(new_P)) <= card(vars_under2more(P))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1 -2)
                                                      (("1"
                                                        (hide 1)
                                                        (("1"
                                                          (use
                                                           "lex2_lt")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "card(admissible_subterms(new_P)) <= card(admissible_subterms(P))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -11)
                                                                        (("1"
                                                                          (rewrite
                                                                           "size_app_unif_prb")
                                                                          (("1"
                                                                            (lemma
                                                                             "choose_unif_size")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "P")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "size"
                                                                                         1
                                                                                         4)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "size(t) + size(s) > size(P2)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2
                                                                                                     -1
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "decompose_size")
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -10
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -6
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "size"
                                                                                                                 1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "term_app_eta")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -9
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     3)
                                                                    (("2"
                                                                      (use
                                                                       "card_subset[term]")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "subset?"
                                                                           1)
                                                                          (("2"
                                                                            (skeep
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -11
                                                                               -1)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "admissible_subterms"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member"
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (skolem
                                                                                       -1
                                                                                       "t1")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "member_unif_prb_append")
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "adm_subterms_decompose")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -12
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "subset?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           ("member"
                                                                                                            "admissible_subterms")
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (skolem
                                                                                                             -1
                                                                                                             "t2")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "admissible_subterms")
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "t")
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "choose_unif_pair_mem1_alt")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -9)
                                                                                                                        (("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-2
                                                                                                                            1))
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "admissible_subterms")
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prop_subterms"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "member"
                                                                                                                                       1
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "prop_subterm_subterm_size")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "x"
                                                                                                                                           "arg")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "s")
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "choose_unif_pair_mem1_alt")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-2
                                                                                                                          1
                                                                                                                          -10))
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "member")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "admissible_subterms")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "prop_subterm_subterm_size")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "x"
                                                                                                                                     "arg(s)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           ("member"
                                                                                                            "admissible_subterms")
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "t1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               ("member"
                                                                                                "admissible_subterms")
                                                                                               1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 1
                                                                                                 "t1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "choose_unif_pair_mem2_alt")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "t1"
                                                                                                       "P")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (use
                                                         "card_subset[variable]")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (use
                                                               "vars_under2more_subterms_subset")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "subset?"
                                                                   1)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (replace
                                                                       -11
                                                                       -1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "subterms_append")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (lemma
                                                                             "decompose_subterm")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -11
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subterms"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           ("member"
                                                                                            "union")
                                                                                           -2)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "subterms_mem_unif_prb")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "t")
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -7
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "subterms"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "union")
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "choose_unif_pair_mem1_alt")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 1
                                                                                                 "s")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "subterms"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "union")
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "choose_unif_pair_mem1_alt")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "subterms_mem_unif_prb")
                                                                            (("2"
                                                                              (rewrite
                                                                               "subterms_mem_unif_prb")
                                                                              (("2"
                                                                                (skolem
                                                                                 -1
                                                                                 "t1")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "t1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "choose_unif_pair_mem2_alt")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "t1"
                                                                                           "P")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 3)
                                      (("2"
                                        (use "card_subset[variable]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (expand "subset?" 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (replace -11 -1)
                                                  (("2"
                                                    (use
                                                     "vars_not_ac_unif_prb_append")
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           ("member"
                                                            "union")
                                                           -1)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -10
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 "vars_not_ac_decompose")
                                                                (("1"
                                                                  (expand
                                                                   "subset?"
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "vars_not_ac"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             ("member"
                                                                              "union")
                                                                             -1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "vars_not_ac_unif_prb_mem2")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "t")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (use
                                                                                       "choose_unif_pair_mem1_alt")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member"
                                                                                           1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -6
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vars_not_ac"
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   1
                                                                                   "s")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (use
                                                                                       "choose_unif_pair_mem1_alt")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member"
                                                                                           1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "vars_not_ac"
                                                                                       1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "vars_not_ac_unif_prb_mem2")
                                                              (("2"
                                                                (rewrite
                                                                 "vars_not_ac_unif_prb_mem2")
                                                                (("2"
                                                                  (skolem
                                                                   -1
                                                                   "t1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "t1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "choose_unif_pair_mem2_alt")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "t1"
                                                                             "P")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex4_lt formula-decl nil lex4 nil)
    (size def-decl "nat" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" reals nil)
    (subterms_append formula-decl nil unification nil)
    (decompose_subterm formula-decl nil unification nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (vars_under2more_subterms_subset formula-decl nil termination_alg
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (member const-decl "bool" unification nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil)
    (prop_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (prop_subterm_subterm_size formula-decl nil term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (adm_subterms_decompose formula-decl nil termination_alg nil)
    (choose_unif_pair_mem2_alt formula-decl nil aux_unification nil)
    (member_unif_prb_append formula-decl nil unification nil)
    (subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (choose_unif_size formula-decl nil aux_unification nil)
    (size const-decl "nat" unification nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term_app_eta formula-decl nil term_adt nil)
    (decompose_size formula-decl nil unification nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size_app_unif_prb formula-decl nil unification nil)
    (lex2_lt formula-decl nil lex2 nil)
    (lex3_lt formula-decl nil lex3 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vars_not_ac_unif_prb_append formula-decl nil termination_alg nil)
    (vars_not_ac_decompose formula-decl nil termination_alg nil)
    (vars_not_ac_unif_prb_mem2 formula-decl nil termination_alg nil)
    (vars_not_ac const-decl "finite_set[variable]" termination_alg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (unify termination
    "unification_alg.unify(unification_alg.new_unif_prb, unification_alg.sigma, unification_alg.vars2avoid)"
    "nil")))
 (unify_TCC13 0
  (unify_TCC13-1 nil 3850901211
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (skolem 2 ("f" "arg"))
                (("" (flatten)
                  (("" (skolem 2 "output_lst")
                    (("" (prop)
                      (("" (rewrite "every_nth")
                        (("" (skolem 2 "i")
                          (("" (lemma "nice_input_apply_ac_step")
                            ((""
                              (inst -1 "nth(output_lst, i)" "null"
                               "sig" "P" "V")
                              ((""
                                (assert)
                                ((""
                                  (hide 3)
                                  ((""
                                    (replace -11 1 :dir rl)
                                    ((""
                                      (prop)
                                      (("1"
                                        (rewrite "member_nth2")
                                        (("1" (inst 1 "i") nil nil))
                                        nil)
                                       ("2"
                                        (typepred "input")
                                        (("2"
                                          (rewrite "append_null")
                                          (("2"
                                            (case
                                             "input = (P, sig, V)")
                                            (("1"
                                              (replace -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_nth formula-decl nil list_props nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input_apply_ac_step formula-decl nil apply_ac_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append_null formula-decl nil list_props nil)
    (member_nth2 formula-decl nil list_theory nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil))
   nil (unify subtype "unification_alg.input_lst" "list[nice_input]")))
 (unify_TCC14 0
  (unify_TCC7-1 "" 3837279656
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skeep)
            (("" (hide 2)
              (("" (skolem 2 ("f" "arg"))
                (("" (flatten)
                  (("" (skolem 2 "output_lst")
                    (("" (prop)
                      (("" (rewrite "every_nth")
                        (("" (skolem 2 "i")
                          ((""
                            (name-replace "output"
                             "nth(output_lst, i)")
                            (("" (case "nice_input?(output)")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2 -3 -4)
                                  (("1"
                                    (use "lex4_lt")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 3)
                                        (("1"
                                          (lemma
                                           "apply_ac_step_sigma_null")
                                          (("1"
                                            (inst
                                             -1
                                             "output"
                                             "null"
                                             "sig"
                                             "P"
                                             "V")
                                            (("1"
                                              (case
                                               "member(output, output_lst)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -2 "ac_sol")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (hide -3 -4 -5)
                                                        (("1"
                                                          (hide -1 -11)
                                                          (("1"
                                                            (use
                                                             "apply_ac_step_vars_not_ac_cor")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "lex3_lt")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       3)
                                                                      (("1"
                                                                        (use
                                                                         "apply_ac_step_vars_under2more_cor")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 3)
                                                                                (("1"
                                                                                  (use
                                                                                   "lex2_lt")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       3)
                                                                                      (("1"
                                                                                        (use
                                                                                         "apply_ac_step_adm_subterms")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -14)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "append_null")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "vars_under2more(ac_sol`1) = image(mimic_var(ac_sol`2), vars_under2more(P))")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "apply_ac_step_adm_subterms_card")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "append_null")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       1
                                                                                                                       3
                                                                                                                       -3
                                                                                                                       -4)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-2
                                                                                                                          1
                                                                                                                          2))
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "size_ge1")
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "strict_subset?(vars_under2more(ac_sol`1), image(mimic_var(ac_sol`2), vars_under2more(P)))")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "card_strict_subset[variable]")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "vars_under2more(ac_sol`1)"
                                                                                                             "image(mimic_var(ac_sol`2), vars_under2more(P))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "card_image[variable, variable]")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "strict_subset?"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "apply_ac_step_vars_under2more")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "append_null")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       2
                                                                                                                       3
                                                                                                                       4
                                                                                                                       5)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "choose_unif_correct")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "P")
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -5
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "ac_prb?"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -7)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -7
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -8
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -9
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (use
                                                                                                                                           "all_ac_prb_no_var_pair")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2 -1)
                                                (("2"
                                                  (expand "output" 1)
                                                  (("2"
                                                    (rewrite
                                                     "member_nth")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (lemma "unify_TCC13")
                                  (("2"
                                    (inst -1 "input" "P" "sig" "V")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst -1 "up" "P1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -1 "t" "s")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "f" "arg")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "output_lst")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "every_nth")
                                                        (("2"
                                                          (inst -1 "i")
                                                          (("2"
                                                            (expand
                                                             "output"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (apply_ac_step_sigma_null formula-decl nil apply_ac_step nil)
    (member def-decl "bool" list_props nil)
    (lex3_lt formula-decl nil lex3 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex2_lt formula-decl nil lex2 nil)
    (finite_image application-judgement "finite_set[R]"
     function_image_aux nil)
    (append_null formula-decl nil list_props nil)
    (apply_ac_step_vars_under2more formula-decl nil termination_alg
     nil)
    (ac_prb? const-decl "bool" unification nil)
    (all_ac_prb_no_var_pair formula-decl nil unification nil)
    (choose_unif_correct formula-decl nil aux_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_strict_subset formula-decl nil finite_sets nil)
    (strict_subset_is_strict_order name-judgement
     "(strict_order?[set[T]])" sets_lemmas nil)
    (card_image formula-decl nil function_image_aux nil)
    (strict_subset? const-decl "bool" sets nil)
    (size_ge1 formula-decl nil term_properties nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size const-decl "nat" unification nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (no_var_pair? const-decl "bool" unification nil)
    (apply_ac_step_adm_subterms_card formula-decl nil termination_alg
     nil)
    (mimic_var def-decl "variable" termination_alg nil)
    (apply_ac_step_adm_subterms formula-decl nil termination_alg nil)
    (apply_ac_step_vars_under2more_cor formula-decl nil termination_alg
     nil)
    (apply_ac_step_vars_not_ac_cor formula-decl nil termination_alg
     nil)
    (member_nth formula-decl nil list_theory nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lex4_lt formula-decl nil lex4 nil)
    (unify_TCC13 subtype-tcc nil unification_alg nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (size def-decl "nat" unification nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lex4 const-decl "ordinal" lex4 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (every_nth formula-decl nil list_props nil))
   shostak
   (unify termination-subtype "unification_alg.input_lst"
    "[{z: unification_alg.nice_input | ordinals.<(lex4.lex4(finite_sets[variable].card(termination_alg.vars_not_ac(z`1)), finite_sets[variable].card(termination_alg.vars_under2more(z`1)), finite_sets[term[constant, variable, f_symbol, ac_symbol]].card(termination_alg.admissible_subterms(z`1)), unification.size(z`1)), lex4.lex4(finite_sets[variable].card(termination_alg.vars_not_ac(unification_alg.input`1)), finite_sets[variable].card(termination_alg.vars_under2more(unification_alg.input`1)), finite_sets[term[constant, variable, f_symbol, ac_symbol]].card(termination_alg.admissible_subterms(unification_alg.input`1)), unification.size(unification_alg.input`1)))} -> list_adt[substitution.sub].list]"))
  (unify_TCC9-1 nil 3822387991
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide 2)
            (("" (skeep)
              (("" (hide-all-but (1 2))
                ((""
                  (lemma
                   "every_nth[[list[unif_pair], list[basic_sub], finite_set[variable]]]")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (hide 3)
                        (("" (skeep)
                          (("" (lemma "lex4_lt")
                            (("" (inst? -1)
                              ((""
                                (assert)
                                ((""
                                  (hide 2)
                                  ((""
                                    (name-replace
                                     "ac_sol"
                                     "nth(input_lst, i)")
                                    ((""
                                      (flatten)
                                      ((""
                                        (lemma
                                         "apply_ac_step_sigma_null")
                                        ((""
                                          (hide 1 2)
                                          ((""
                                            (reveal -1 -11)
                                            ((""
                                              (inst
                                               -3
                                               "ac_sol"
                                               "null"
                                               "sigma"
                                               "unif_prb"
                                               "vars2avoid")
                                              ((""
                                                (prop)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (skolem
                                                     -1
                                                     "ac_sol1")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (reveal 1 2)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3)
                                                              (("1"
                                                                (lemma
                                                                 "apply_ac_step_vars_not_ac_cor")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "ac_sol1"
                                                                   "null"
                                                                   "unif_prb"
                                                                   "vars2avoid")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "lex3_lt")
                                                                        (("1"
                                                                          (inst?
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (case
                                                                                   "vars_under2more(ac_sol1`1) = image(mimic_var(ac_sol1`2), vars_under2more(unif_prb))")
                                                                                  (("1"
                                                                                    (case
                                                                                     "card(vars_under2more(ac_sol1`1)) <= card(vars_under2more(unif_prb))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "apply_ac_step_adm_subterms_leq")
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "append_null")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "lex2_lt")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "apply_ac_step_adm_subterms")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "append_null")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "size"
                                                                                                                               1
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "size"
                                                                                                                                 1
                                                                                                                                 3)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "size_ge1")
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "card_image[variable, variable]")
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     3)
                                                                                    (("2"
                                                                                      (case
                                                                                       "strict_subset?(vars_under2more(ac_sol1`1), image(mimic_var(ac_sol1`2), vars_under2more(unif_prb)))")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "card_strict_subset[variable]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "vars_under2more(ac_sol1`1)"
                                                                                           "image(mimic_var(ac_sol1`2), vars_under2more(unif_prb))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2
                                                                                               -3
                                                                                               1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "card_image[variable, variable]")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "apply_ac_step_vars_under2more")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "append_null")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "strict_subset?"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "append_null")
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "choose_unif_correct")
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "all_ac_prb?"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "no_var_pair?"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (skolem
                                                                                                               1
                                                                                                               "t1")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "member_unif_prb_equiv")
                                                                                                                  (("1"
                                                                                                                    (skolem
                                                                                                                     -2
                                                                                                                     "unif_pair1")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "unif_pair1")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -15
                                                                                                           -17
                                                                                                           -18
                                                                                                           -20
                                                                                                           -21)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (reveal
                                                                                                                   -19)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "ac_prb?"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "term_ac_app_eta")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "t")
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -3
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -4
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -6
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -3
                                                                                                                                   -4
                                                                                                                                   -5
                                                                                                                                   -6)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (lemma
                                                       "member_nth[ac_sol_simp]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unif_prb type-eq-decl nil unification nil)
    (sub type-eq-decl nil substitution nil)
    (size def-decl "nat" unification nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (apply_ac_step_sigma_null formula-decl nil apply_ac_step nil)
    (apply_ac_step_vars_not_ac_cor formula-decl nil termination_alg
     nil)
    (apply_ac_step_vars_under2more formula-decl nil termination_alg
     nil)
    (choose_unif_correct formula-decl nil aux_unification nil)
    (no_var_pair? const-decl "bool" unification nil)
    (ac_prb? const-decl "bool" unification nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (all_ac_prb? const-decl "bool" unification nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (size const-decl "nat" unification nil)
    (size_ge1 formula-decl nil term_properties nil)
    (apply_ac_step_adm_subterms formula-decl nil termination_alg nil)
    (mimic_var def-decl "variable" termination_alg nil)
    (apply_ac_step def-decl "list[ac_sol_simp]" apply_ac_step nil)
    (member_nth formula-decl nil list_theory nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil))
   nil
   (unify termination-subtype "unification_alg.input_lst"
    "[{z: unification_alg.nice_input | ordinals.<(lex4.lex4(finite_sets[variable].card(termination_alg.vars_not_ac(z`1)), finite_sets[variable].card(termination_alg.vars_under2more(z`1)), finite_sets[term[constant, variable, f_symbol, ac_symbol]].card(termination_alg.admissible_subterms(z`1)), unification.size(z`1)), lex4.lex4(finite_sets[variable].card(termination_alg.vars_not_ac(unification_alg.input`1)), finite_sets[variable].card(termination_alg.vars_under2more(unification_alg.input`1)), finite_sets[term[constant, variable, f_symbol, ac_symbol]].card(termination_alg.admissible_subterms(unification_alg.input`1)), unification.size(unification_alg.input`1)))} -> list_adt[substitution.sub].list]")))
 (unify_TCC15 0
  (unify_TCC6-1 nil 3822387991
   ("" (skolem 1 ("input" "P" "sig" "V"))
    (("" (prop)
      (("" (skolem 2 ("up" "P1"))
        (("" (prop)
          (("" (skolem 2 ("t" "s"))
            (("" (flatten)
              (("" (typepred "input")
                (("" (expand "nice_input?" -1)
                  (("" (flatten)
                    (("" (replace -7 :dir rl)
                      (("" (hide -1 -2 -3 -4 -6)
                        (("" (expand "well_formed?" -1)
                          (("" (inst -1 "t")
                            (("" (flatten)
                              ((""
                                (assert)
                                ((""
                                  (use "choose_unif_pair_mem1_alt")
                                  ((""
                                    (assert)
                                    ((""
                                      (expand "member" 1)
                                      (("" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" unification nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil))
   nil
   (unify cases "unification_alg.t"
    "term[constant: TYPE, variable: TYPE+, f_symbol: TYPE, ac_symbol: TYPE]: DATATYPE
 BEGIN
  const(a: constant): const?
  variable(V: variable): var?
  unit: unit?
  pair(term1: term, term2: term): pair?
  app(f_sym: f_symbol, arg: term): app?
  ac_app(ac_sym: ac_symbol, ac_arg: term): ac_app?
 END term")))
 (unify_subs_TCC1 0
  (unify_subs_TCC1-1 nil 3850905855 ("" (subtype-tcc) nil nil)
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (well_formed? const-decl "bool" substitution nil)
    (subset? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (idempotent? const-decl "bool" substitution nil)
    (subs const-decl "term" substitution nil)
    (injective? const-decl "bool" functions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (unify_subs subtype
    "(unification_alg.unif_prb, unification_alg.sigma, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_subs 0
  (unify_subs-3 nil 3851082323
   (""
    (measure-induct
     "lex4(card(vars_not_ac(input`1)), card(vars_under2more(input`1)), card(admissible_subterms(input`1)), size(input`1))"
     "input")
    (("1" (skolem 1 "input")
      (("1" (prop)
        (("1" (skolem 1 "del")
          (("1" (flatten)
            (("1" (name-replace "P" "input`1")
              (("1" (name-replace "sig" "input`2")
                (("1" (name-replace "V" "input`3")
                  (("1" (hide -1)
                    (("1" (expand "unify" -1)
                      (("1" (lift-if)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (inst 1 "null")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (name-replace "up"
                               "choose_unif_pair(P)`1")
                              (("2"
                                (name-replace "t" "up`1")
                                (("2"
                                  (name-replace "s" "up`2")
                                  (("2"
                                    (name-replace
                                     "P1"
                                     "choose_unif_pair(P)`2")
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (name-replace
                                           "sig1"
                                           "cons((V(s), t), null)")
                                          (("1"
                                            (name-replace
                                             "new_sig"
                                             "append(sig1, sig)")
                                            (("1"
                                              (name-replace
                                               "new_P"
                                               "apply_sub(sig1, P1)")
                                              (("1"
                                                (reveal -8)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "(new_P, new_sig, V)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst -1 "del")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skolem
                                                           -1
                                                           "sig2")
                                                          (("1"
                                                            (expand
                                                             "new_sig"
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               3
                                                               "append(sig2, sig1)")
                                                              (("1"
                                                                (rewrite
                                                                 "append_assoc")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "unify_TCC2")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "input"
                                                         "P"
                                                         "sig"
                                                         "V")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (reveal
                                                             -10
                                                             -11
                                                             -12)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "up"
                                                                       "P1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "up"
                                                                           -6
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             -6
                                                                             "t"
                                                                             "s")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "t"
                                                                                 -6
                                                                                 1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   "sig1"
                                                                                   "new_sig"
                                                                                   "new_P")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (reveal -5)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "(P1, sig, V)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "del")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "unify_TCC4")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "input"
                                                             "P"
                                                             "sig"
                                                             "V")
                                                            (("2"
                                                              (reveal
                                                               -7
                                                               -8
                                                               -9)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3)
                                                                  (("2"
                                                                    (reveal
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -5)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "up"
                                                                       "P1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "t"
                                                                           "s")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "a(t)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (use
                                                                                   "term_const_eta")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "member"
                                                     -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (name-replace
                                                             "sig1"
                                                             "cons((V(t), s), null)")
                                                            (("1"
                                                              (name-replace
                                                               "new_sig"
                                                               "append(sig1, sig)")
                                                              (("1"
                                                                (name-replace
                                                                 "new_P"
                                                                 "apply_sub(sig1, P1)")
                                                                (("1"
                                                                  (reveal
                                                                   -8)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "(new_P, new_sig, V)")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "del")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             "sig2")
                                                                            (("1"
                                                                              (expand
                                                                               "new_sig"
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 3
                                                                                 "append(sig2, sig1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "append_assoc")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "unify_TCC6")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "input"
                                                                           "P"
                                                                           "sig"
                                                                           "V")
                                                                          (("2"
                                                                            (reveal
                                                                             -10
                                                                             -11
                                                                             -12)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3)
                                                                                (("2"
                                                                                  (reveal
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "up"
                                                                                     "P1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "t"
                                                                                         "s")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -8)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "V(t)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "sig1"
                                                                                                     "new_sig"
                                                                                                     "new_P")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "term_variable_eta")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (reveal
                                                               -1
                                                               -2
                                                               -3
                                                               -4
                                                               -5)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "(P1, sig, V)")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "unify_TCC8")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "input"
                                                                       "P"
                                                                       "sig"
                                                                       "V")
                                                                      (("2"
                                                                        (reveal
                                                                         -7
                                                                         -8
                                                                         -9)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "up"
                                                                               "P1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "t"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "V(t)")
                                                                                            (("1"
                                                                                              (use
                                                                                               "term_variable_eta")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "vars"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               ("member"
                                                                                                "singleton")
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               -1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (reveal -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(P1, sig, V)")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "unify_TCC10")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "input"
                                                                     "P"
                                                                     "sig"
                                                                     "V")
                                                                    (("2"
                                                                      (reveal
                                                                       -7
                                                                       -8
                                                                       -9)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3)
                                                                          (("2"
                                                                            (reveal
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "up"
                                                                               "P1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -5
                                                                                   "t"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             -1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   1
                                                                   2
                                                                   3
                                                                   4)
                                                                  (("2"
                                                                    (name-replace
                                                                     "P2"
                                                                     "decompose(arg(t), arg(s))`1")
                                                                    (("2"
                                                                      (name-replace
                                                                       "new_P"
                                                                       "append(P2, P1)")
                                                                      (("2"
                                                                        (name-replace
                                                                         "f"
                                                                         "f_sym(t)")
                                                                        (("2"
                                                                          (reveal
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -8)
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "(new_P, sig, V)")
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (reveal
                                                                                 -9
                                                                                 -10
                                                                                 -11)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "unify_TCC12")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "input"
                                                                                     "P"
                                                                                     "sig"
                                                                                     "V")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "up"
                                                                                           "P1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "t"
                                                                                               "s")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "arg(t)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "P2"
                                                                                                         "new_P")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (use
                                                                                                         "term_app_eta")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   1
                                                                   2
                                                                   3
                                                                   4
                                                                   6)
                                                                  (("2"
                                                                    (rewrite
                                                                     "mem_flatten_map2")
                                                                    (("1"
                                                                      (skolem
                                                                       -3
                                                                       "new_input")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (reveal
                                                                           -5)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "new_input")
                                                                            (("1"
                                                                              (reveal
                                                                               5)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "del")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "new_input = (new_input`1, new_input`2, new_input`3)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skolem
                                                                                             -2
                                                                                             "sig2")
                                                                                            (("1"
                                                                                              (use
                                                                                               "apply_ac_step_sub_decompose")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -1
                                                                                                   "sig1")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "append(sig2, sig1)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "append_assoc")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (decompose-equality
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "unify_TCC14")
                                                                                  (("2"
                                                                                    (hide
                                                                                     -4
                                                                                     -5
                                                                                     2)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -6
                                                                                       -8
                                                                                       -9
                                                                                       -10)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "input"
                                                                                         "P"
                                                                                         "sig"
                                                                                         "V")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -8
                                                                                             "up"
                                                                                             "P1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "t"
                                                                                                 "s")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -8
                                                                                                     "ac_sym(t)"
                                                                                                     "ac_arg(t)")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -5
                                                                                                           -6)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "every_nth")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "member_nth2")
                                                                                                                (("1"
                                                                                                                  (skolem
                                                                                                                   -1
                                                                                                                   "i")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -3
                                                                                                                     "i")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "term_ac_app_eta")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "t")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "unify_TCC13")
                                                                      (("2"
                                                                        (reveal
                                                                         -1
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -6
                                                                         -7
                                                                         -8)
                                                                        (("2"
                                                                          (inst
                                                                           -8
                                                                           "input"
                                                                           "P"
                                                                           "sig"
                                                                           "V")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -8
                                                                               "up"
                                                                               "P1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -8
                                                                                   "t"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "f"
                                                                                       "ac_sym(t)")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "f"
                                                                                         "ac_arg(t)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "term_ac_app_eta")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "f"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "t")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -8
                                                                                             -9)
                                                                                            (("2"
                                                                                              (case
                                                                                               "pair?(t)")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "unify_TCC15")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "input"
                                                                                                   "P"
                                                                                                   "sig"
                                                                                                   "V")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "up"
                                                                                                       "P1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "t "
                                                                                                           "s")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 2
                                                                                                 3
                                                                                                 4
                                                                                                 5)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (typepred "input")
          (("2" (case "input = (unif_prb, sigma, vars2avoid)")
            (("1" (assert)
              (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil)
             ("2" (decompose-equality 1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex4 const-decl "ordinal" lex4 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (size def-decl "nat" unification nil)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (unify def-decl "list[sub]" unification_alg nil)
    (member def-decl "bool" list_props nil)
    (term_const_eta formula-decl nil term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (unify_TCC4 termination-tcc nil unification_alg nil)
    (unify_TCC8 termination-tcc nil unification_alg nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (unify_TCC6 termination-tcc nil unification_alg nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (unify_TCC10 termination-tcc nil unification_alg nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (decompose def-decl "[unif_prb, bool]" unification nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (unify_TCC12 termination-tcc nil unification_alg nil)
    (apply_ac_step def-decl "list[ac_sol_simp]" apply_ac_step nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (apply_ac_step_sub_decompose formula-decl nil apply_ac_step nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (member_nth2 formula-decl nil list_theory nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (every_nth formula-decl nil list_props nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (unify_TCC14 termination-tcc nil unification_alg nil)
    (unify_TCC15 cases-tcc nil unification_alg nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unify_TCC13 subtype-tcc nil unification_alg nil)
    (append_assoc formula-decl nil list_props nil)
    (unify_TCC2 termination-tcc nil unification_alg nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (choose_unif_pair const-decl "[unif_pair, unif_prb]"
     aux_unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (unify_well_formed 0
  (unify_well_formed-1 nil 3851093711
   (""
    (measure-induct
     "lex4(card(vars_not_ac(input`1)), card(vars_under2more(input`1)), card(admissible_subterms(input`1)), size(input`1))"
     "input")
    (("1" (skolem 1 "input")
      (("1" (prop)
        (("1" (skolem 1 "del")
          (("1" (flatten)
            (("1" (name-replace "P" "input`1")
              (("1" (name-replace "sig" "input`2")
                (("1" (name-replace "V" "input`3")
                  (("1" (hide -1)
                    (("1" (expand "unify" -1)
                      (("1" (lift-if)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (typepred "input")
                              (("1"
                                (expand "member" -3)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "sig" -1)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (expand "member" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (name-replace "up"
                               "choose_unif_pair(P)`1")
                              (("2"
                                (name-replace "t" "up`1")
                                (("2"
                                  (name-replace "s" "up`2")
                                  (("2"
                                    (name-replace
                                     "P1"
                                     "choose_unif_pair(P)`2")
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (name-replace
                                           "sig1"
                                           "cons((V(s), t), null)")
                                          (("1"
                                            (name-replace
                                             "new_sig"
                                             "append(sig1, sig)")
                                            (("1"
                                              (name-replace
                                               "new_P"
                                               "apply_sub(sig1, P1)")
                                              (("1"
                                                (reveal -8)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "(new_P, new_sig, V)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst -1 "del")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "unify_TCC2")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "input"
                                                         "P"
                                                         "sig"
                                                         "V")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (reveal
                                                             -10
                                                             -11
                                                             -12)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "up"
                                                                       "P1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "up"
                                                                           -6
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             -6
                                                                             "t"
                                                                             "s")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "t"
                                                                                 -6
                                                                                 1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   "sig1"
                                                                                   "new_sig"
                                                                                   "new_P")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (reveal -5)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "(P1, sig, V)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "del")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "unify_TCC4")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "input"
                                                             "P"
                                                             "sig"
                                                             "V")
                                                            (("2"
                                                              (reveal
                                                               -7
                                                               -8
                                                               -9)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3)
                                                                  (("2"
                                                                    (reveal
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -5)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "up"
                                                                       "P1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "t"
                                                                           "s")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "a(t)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (use
                                                                                   "term_const_eta")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "member"
                                                     -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (name-replace
                                                             "sig1"
                                                             "cons((V(t), s), null)")
                                                            (("1"
                                                              (name-replace
                                                               "new_sig"
                                                               "append(sig1, sig)")
                                                              (("1"
                                                                (name-replace
                                                                 "new_P"
                                                                 "apply_sub(sig1, P1)")
                                                                (("1"
                                                                  (reveal
                                                                   -8)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "(new_P, new_sig, V)")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "del")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "unify_TCC6")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "input"
                                                                           "P"
                                                                           "sig"
                                                                           "V")
                                                                          (("2"
                                                                            (reveal
                                                                             -10
                                                                             -11
                                                                             -12)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3)
                                                                                (("2"
                                                                                  (reveal
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "up"
                                                                                     "P1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "t"
                                                                                         "s")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -8)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "V(t)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "sig1"
                                                                                                     "new_sig"
                                                                                                     "new_P")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "term_variable_eta")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (reveal
                                                               -1
                                                               -2
                                                               -3
                                                               -4
                                                               -5)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "(P1, sig, V)")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "unify_TCC8")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "input"
                                                                       "P"
                                                                       "sig"
                                                                       "V")
                                                                      (("2"
                                                                        (reveal
                                                                         -7
                                                                         -8
                                                                         -9)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "up"
                                                                               "P1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "t"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "V(t)")
                                                                                            (("1"
                                                                                              (use
                                                                                               "term_variable_eta")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "vars"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               ("member"
                                                                                                "singleton")
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               -1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (reveal -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(P1, sig, V)")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "unify_TCC10")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "input"
                                                                     "P"
                                                                     "sig"
                                                                     "V")
                                                                    (("2"
                                                                      (reveal
                                                                       -7
                                                                       -8
                                                                       -9)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3)
                                                                          (("2"
                                                                            (reveal
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "up"
                                                                               "P1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -5
                                                                                   "t"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             -1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   1
                                                                   2
                                                                   3
                                                                   4)
                                                                  (("2"
                                                                    (name-replace
                                                                     "P2"
                                                                     "decompose(arg(t), arg(s))`1")
                                                                    (("2"
                                                                      (name-replace
                                                                       "new_P"
                                                                       "append(P2, P1)")
                                                                      (("2"
                                                                        (name-replace
                                                                         "f"
                                                                         "f_sym(t)")
                                                                        (("2"
                                                                          (reveal
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -8)
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "(new_P, sig, V)")
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (reveal
                                                                                 -9
                                                                                 -10
                                                                                 -11)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "unify_TCC12")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "input"
                                                                                     "P"
                                                                                     "sig"
                                                                                     "V")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "up"
                                                                                           "P1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "t"
                                                                                               "s")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "arg(t)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "P2"
                                                                                                         "new_P")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (use
                                                                                                         "term_app_eta")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   1
                                                                   2
                                                                   3
                                                                   4
                                                                   6)
                                                                  (("2"
                                                                    (rewrite
                                                                     "mem_flatten_map2")
                                                                    (("1"
                                                                      (skolem
                                                                       -3
                                                                       "new_input")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (reveal
                                                                           -5)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "new_input")
                                                                            (("1"
                                                                              (reveal
                                                                               5)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "del")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "new_input = (new_input`1, new_input`2, new_input`3)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "apply_ac_step_sub_decompose")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skolem
                                                                                               -1
                                                                                               "sig1")
                                                                                              (("2"
                                                                                                (decompose-equality
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "unify_TCC14")
                                                                                  (("2"
                                                                                    (hide
                                                                                     -4
                                                                                     -5
                                                                                     2)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -6
                                                                                       -8
                                                                                       -9
                                                                                       -10)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "input"
                                                                                         "P"
                                                                                         "sig"
                                                                                         "V")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -8
                                                                                             "up"
                                                                                             "P1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "t"
                                                                                                 "s")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -8
                                                                                                     "ac_sym(t)"
                                                                                                     "ac_arg(t)")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -5
                                                                                                           -6)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "every_nth")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "member_nth2")
                                                                                                                (("1"
                                                                                                                  (skolem
                                                                                                                   -1
                                                                                                                   "i")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -3
                                                                                                                     "i")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "term_ac_app_eta")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "t")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "unify_TCC13")
                                                                      (("2"
                                                                        (reveal
                                                                         -1
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -6
                                                                         -7
                                                                         -8)
                                                                        (("2"
                                                                          (inst
                                                                           -8
                                                                           "input"
                                                                           "P"
                                                                           "sig"
                                                                           "V")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -8
                                                                               "up"
                                                                               "P1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -8
                                                                                   "t"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "f"
                                                                                       "ac_sym(t)")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "f"
                                                                                         "ac_arg(t)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "term_ac_app_eta")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "f"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "t")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -8
                                                                                             -9)
                                                                                            (("2"
                                                                                              (case
                                                                                               "pair?(t)")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "unify_TCC15")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "input"
                                                                                                   "P"
                                                                                                   "sig"
                                                                                                   "V")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "up"
                                                                                                       "P1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "t "
                                                                                                           "s")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 2
                                                                                                 3
                                                                                                 4
                                                                                                 5)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (typepred "input")
          (("2" (case "input = (unif_prb, sigma, vars2avoid)")
            (("1" (assert)
              (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil)
             ("2" (decompose-equality 1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs const-decl "term" substitution nil)
    (idempotent? const-decl "bool" substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (choose_unif_pair const-decl "[unif_pair, unif_prb]"
     aux_unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (unify_TCC2 termination-tcc nil unification_alg nil)
    (append def-decl "list[T]" list_props nil)
    (unify_TCC13 subtype-tcc nil unification_alg nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unify_TCC15 cases-tcc nil unification_alg nil)
    (unify_TCC14 termination-tcc nil unification_alg nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (every_nth formula-decl nil list_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member_nth2 formula-decl nil list_theory nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (apply_ac_step_sub_decompose formula-decl nil apply_ac_step nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (apply_ac_step def-decl "list[ac_sol_simp]" apply_ac_step nil)
    (unify_TCC12 termination-tcc nil unification_alg nil)
    (term_app_eta formula-decl nil term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (decompose def-decl "[unif_prb, bool]" unification nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (unify_TCC10 termination-tcc nil unification_alg nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (unify_TCC6 termination-tcc nil unification_alg nil)
    (singleton const-decl "(singleton?)" sets nil)
    (unify_TCC8 termination-tcc nil unification_alg nil)
    (unify_TCC4 termination-tcc nil unification_alg nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_const_eta formula-decl nil term_adt nil)
    (member def-decl "bool" list_props nil)
    (unify def-decl "list[sub]" unification_alg nil)
    (well_formed? const-decl "bool" substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (size def-decl "nat" unification nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lex4 const-decl "ordinal" lex4 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (unify_alg_correct_sub_TCC1 0
  (unify_alg_correct_sub_TCC1-1 nil 3851085509
   (""
    (skolem 1
     ("X" "del" "sig" "t" "P" "P1" "V" "sig1" "new_sig" "new_P"))
    (("" (flatten)
      (("" (lemma "nice_input_apply_sub")
        (("" (replace -4 2)
          (("" (replace -3 2)
            (("" (inst?)
              (("" (inst -1 "X" "t" "P1")
                (("" (assert)
                  (("" (replace -2 :dir rl)
                    (("" (assert)
                      (("" (skolem 1 "s")
                        (("" (prop)
                          (("" (rewrite "member_unif_prb_equiv")
                            (("" (rewrite "member_unif_prb_equiv")
                              ((""
                                (skolem -1 "up")
                                ((""
                                  (inst 1 "up")
                                  ((""
                                    (flatten)
                                    ((""
                                      (assert)
                                      ((""
                                        (expand "subset?" -9)
                                        ((""
                                          (inst -9 "up")
                                          (("" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nice_input_apply_sub formula-decl nil apply_ac_step nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (subset? const-decl "bool" unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (unify_alg_correct_sub subtype
    "(unification_alg.new_unif_prb, unification_alg.new_sigma, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_alg_correct_sub 0
  (unify_alg_correct_sub-1 nil 3851085510
   ("" (skolem 1 ("X" "del" "sig" "t" "P" "P1" "V"))
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "sig1" "cons((X, t), null)")
          (("" (lemma "unify_subs")
            ((""
              (inst -1 "del"
               "(apply_sub(sig1, P1), append(sig1, sig), V)")
              (("" (assert)
                (("" (assert)
                  (("" (skolem -1 "sig2")
                    (("" (prop)
                      (("1" (replace -1 1)
                        (("1" (rewrite "append_assoc" 1 :dir rl)
                          (("1" (lemma "unifies?_append_disjoint3")
                            (("1"
                              (inst -1 "sig" "append(sig2, sig1)"
                               "cons((variable(X), t), null[unif_pair])")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "unifies?" -1)
                                  (("1"
                                    (expand "unifies?" -1 2)
                                    (("1"
                                      (expand "unifies?" -1 3)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "unifies?_append_disjoint4")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst
                                                 -1
                                                 "cons((variable(X), t), null[unif_pair])")
                                                (("1"
                                                  (expand
                                                   "unifies?"
                                                   -1)
                                                  (("1"
                                                    (expand
                                                     "unifies?"
                                                     -1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "unifies?"
                                                       -1
                                                       3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             "unifies?"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "sig1"
                                                               1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "subs"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "subs"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (use
                                                                       "subs_no_effect_t")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (use
                                                                             "equal?_ref")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (reveal
                                                                           -7)
                                                                          (("2"
                                                                            (lemma
                                                                             "basic_sub_info")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "disjoint?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "vars" 1)
                                  (("2"
                                    (expand "vars" 1 2)
                                    (("2"
                                      (hide 2 3)
                                      (("2"
                                        (expand "nice_input?" -4)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "disjoint?")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -6 "x")
                                                  (("2"
                                                    (expand
                                                     ("member"
                                                      "intersection")
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "intersection")
                                                       1)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (expand
                                                           ("member"
                                                            "union")
                                                           -2)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             -2
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "emptyset"
                                                               -2)
                                                              (("2"
                                                                (expand
                                                                 "vars"
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   ("member"
                                                                    "union")
                                                                   -2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "vars_unif_prb")
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "variable(X)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         1
                                                                         "t")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 -6)
                        (("2" (lemma "unifies?_append_disjoint3")
                          (("2" (rewrite "append_assoc" :dir rl)
                            (("2" (inst?)
                              (("2"
                                (case "disjoint?(dom(sig), vars(P1))")
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (replace -2 1)
                                        (("1"
                                          (lemma
                                           "unifies?_append_disjoint3")
                                          (("1"
                                            (inst
                                             -1
                                             "sig"
                                             "append(sig2, sig1)"
                                             "P1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (lemma
                                                   "unifies?_equal")
                                                  (("1"
                                                    (rewrite
                                                     "apply_sub_unifies")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "append(append(sig2, sig1), sig1)"
                                                       "append(sig2, sig1)"
                                                       "P1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -7 2)
                                                          (("1"
                                                            (hide -7)
                                                            (("1"
                                                              (reveal
                                                               -7)
                                                              (("1"
                                                                (lemma
                                                                 "basic_sub_info")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "X"
                                                                   "t")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (expand
                                                                           "equal?"
                                                                           1)
                                                                          (("1"
                                                                            (skolem
                                                                             1
                                                                             "x")
                                                                            (("1"
                                                                              (expand
                                                                               "subs"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "idempotent?"
                                                                                 -3)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "x")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "subs_append2")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "subs_append2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subs"
                                                                                         -3
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subs"
                                                                                           -3
                                                                                           3)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "subs_append2")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "equal?_ref")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "disjoint?" 1)
                                    (("2"
                                      (expand "empty?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand
                                           ("member" "intersection")
                                           -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "vars_unif_prb")
                                              (("2"
                                                (skolem -2 "t1")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (rewrite
                                                     "apply_sub_mem")
                                                    (("2"
                                                      (skolem -2 "t1p")
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (replace
                                                           -3
                                                           -4)
                                                          (("2"
                                                            (use
                                                             "vars_subs_t")
                                                            (("2"
                                                              (expand
                                                               "subset?"
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "member"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "union"
                                                                       -1)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (reveal
                                                                           -5)
                                                                          (("1"
                                                                            (lemma
                                                                             "basic_sub_info")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "X"
                                                                               "t")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "vars_singleton"
                                                                                         -5)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -16
                                                                                           2
                                                                                           1
                                                                                           -17
                                                                                           -1
                                                                                           -2
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nice_input?"
                                                                                             -11)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "disjoint?"
                                                                                                 -12)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "empty?"
                                                                                                   -12)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -12
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       ("member"
                                                                                                        "intersection")
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "vars_unif_prb")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "t")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -12
                                                                           -13
                                                                           2
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "nice_input?"
                                                                             -10)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "disjoint?"
                                                                                 -11)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?"
                                                                                   -11)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -11
                                                                                     "x")
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "intersection")
                                                                                       1)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "vars_unif_prb")
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "t1p")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "member_unif_prb_equiv")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "member_unif_prb_equiv"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -15)
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -3
                                                                                                     "up")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -15
                                                                                                       "up")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "up")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 -2 2 3 -8 -7)
                                  (("2"
                                    (expand "nice_input?" -3)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "disjoint?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -5 "x")
                                              (("2"
                                                (expand
                                                 ("member"
                                                  "intersection")
                                                 1)
                                                (("2"
                                                  (expand
                                                   ("member"
                                                    "intersection")
                                                   -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "vars_unif_prb")
                                                        (("2"
                                                          (rewrite
                                                           "vars_unif_prb")
                                                          (("2"
                                                            (skolem
                                                             -2
                                                             "t1")
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "t1")
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (rewrite
                                                                     "member_unif_prb_equiv"
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "member_unif_prb_equiv")
                                                                      (("2"
                                                                        (skolem
                                                                         -2
                                                                         "up")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "up")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -12)
                                                                                (("2"
                                                                                  (inst
                                                                                   -12
                                                                                   "up")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unify_subs formula-decl nil unification_alg nil)
    (apply_sub_mem formula-decl nil unification nil)
    (vars_subs_t formula-decl nil substitution nil)
    (vars_singleton formula-decl nil term_properties nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (apply_sub_unifies formula-decl nil unification nil)
    (subs_append2 formula-decl nil substitution nil)
    (unifies?_equal formula-decl nil unification nil)
    (unifies?_append_disjoint3 formula-decl nil unification nil)
    (unifies?_append_disjoint4 formula-decl nil unification nil)
    (unifies? const-decl "bool" unification nil)
    (equal?_ref formula-decl nil equality nil)
    (basic_sub_info formula-decl nil substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset? const-decl "bool" unification nil)
    (well_formed? const-decl "bool" substitution nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (idempotent? const-decl "bool" substitution nil)
    (subs const-decl "term" substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (unifies? def-decl "bool" unification nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (vars_unif_prb formula-decl nil unification nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (unify_alg_correct 0
  (unify_alg_correct-3 "" 3839535085
   (""
    (measure-induct
     "lex4(card(vars_not_ac(input`1)), card(vars_under2more(input`1)), card(admissible_subterms(input`1)), size(input`1))"
     "input")
    (("1" (skolem 1 "input")
      (("1" (prop)
        (("1" (skolem 1 "del")
          (("1" (prop)
            (("1" (name-replace "P" "input`1")
              (("1" (name-replace "sig" "input`2")
                (("1" (name-replace "V" "input`3")
                  (("1" (hide -1)
                    (("1" (case "nice_input?(P, sig, V)")
                      (("1" (hide -2)
                        (("1" (reveal -1)
                          (("1" (expand "unify" -1)
                            (("1" (lift-if)
                              (("1"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "unifies?" 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (name-replace
                                     "up"
                                     "choose_unif_pair(P)`1")
                                    (("2"
                                      (name-replace "t" "up`1")
                                      (("2"
                                        (name-replace "s" "up`2")
                                        (("2"
                                          (name-replace
                                           "P1"
                                           "choose_unif_pair(P)`2")
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (name-replace
                                                 "sig1"
                                                 "cons((V(s), t), null)")
                                                (("1"
                                                  (name-replace
                                                   "new_sig"
                                                   "append(sig1, sig)")
                                                  (("1"
                                                    (name-replace
                                                     "new_P"
                                                     "apply_sub(sig1, P1)")
                                                    (("1"
                                                      (reveal -4 -7)
                                                      (("1"
                                                        (rewrite
                                                         "choose_unif_unifies?")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (reveal
                                                               -9)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "(new_P, new_sig, V)")
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "unify_alg_correct_sub")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "V(s)"
                                                                           "del"
                                                                           "sig"
                                                                           "t"
                                                                           "P"
                                                                           "P1"
                                                                           "V")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (reveal
                                                                               -3
                                                                               -4
                                                                               -5)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -4)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -7
                                                                                               -8)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "term_variable_eta")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-2
                                                                                                      -3
                                                                                                      -4
                                                                                                      3))
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "unifies?")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "equal?_sym")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "subs(del)(t)"
                                                                                                               "subs(del)(s)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           4)
                                                                                          (("2"
                                                                                            (use
                                                                                             "term_variable_eta")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "choose_unif_pair_mem1_alt")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "s"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide
                                                                                           4)
                                                                                          (("3"
                                                                                            (use
                                                                                             "choose_unif_pair_mem1_alt")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "t"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide
                                                                                           4)
                                                                                          (("4"
                                                                                            (use
                                                                                             "choose_unif_subset")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     4)
                                                                    (("2"
                                                                      (reveal
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -7)
                                                                      (("2"
                                                                        (lemma
                                                                         "unify_TCC2")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "input"
                                                                           "P"
                                                                           "sig"
                                                                           "V")
                                                                          (("2"
                                                                            (reveal
                                                                             -11
                                                                             -12
                                                                             -13)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "up"
                                                                                   "P1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "t"
                                                                                       "s")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "sig1"
                                                                                           "new_sig"
                                                                                           "new_P")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (reveal
                                                           -1
                                                           -2
                                                           -3
                                                           -4
                                                           -6)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "(P1, sig, V)")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "choose_unif_unifies?")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "del"
                                                                       "P")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -5)
                                                                          (("1"
                                                                            (expand
                                                                             "unifies?"
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "term_const_eta")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "t")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -7
                                                                                         1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "equal?_ref")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "unify_TCC4")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "input"
                                                                   "P"
                                                                   "sig"
                                                                   "V")
                                                                  (("2"
                                                                    (reveal
                                                                     -8
                                                                     -9
                                                                     -10)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "up"
                                                                           "P1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "t"
                                                                               "s")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "a(t)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (use
                                                                                       "term_const_eta")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           -1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (name-replace
                                                                   "sig1"
                                                                   "cons((V(t), s), null)")
                                                                  (("1"
                                                                    (name-replace
                                                                     "new_sig"
                                                                     "append(sig1, sig)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "new_P"
                                                                       "apply_sub(sig1, P1)")
                                                                      (("1"
                                                                        (reveal
                                                                         -1
                                                                         -2
                                                                         -3)
                                                                        (("1"
                                                                          (rewrite
                                                                           "choose_unif_unifies?")
                                                                          (("1"
                                                                            (reveal
                                                                             -4
                                                                             -5
                                                                             -6
                                                                             -7)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (reveal
                                                                                   -9)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "(new_P, new_sig, V)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "unify_alg_correct_sub")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "V(t)"
                                                                                               "del"
                                                                                               "sig"
                                                                                               "s"
                                                                                               "P"
                                                                                               "P1"
                                                                                               "V")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "term_variable_eta")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "up = (t, s)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (decompose-equality
                                                                                                                 1)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           4)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "choose_unif_pair_mem1_alt")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "member"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (use
                                                                                                           "choose_unif_pair_mem1_alt")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "member"
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (hide
                                                                                                           4)
                                                                                                          (("4"
                                                                                                            (use
                                                                                                             "choose_unif_subset")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         4)
                                                                                        (("2"
                                                                                          (reveal
                                                                                           -10
                                                                                           -11
                                                                                           -12)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "unify_TCC6")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "input"
                                                                                               "P"
                                                                                               "sig"
                                                                                               "V")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "up"
                                                                                                     "P1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "t"
                                                                                                         "s")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "V(t)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "sig1"
                                                                                                                     "new_sig"
                                                                                                                     "new_P")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (use
                                                                                                                     "term_variable_eta")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (reveal
                                                                                                               3)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "choose_unif_unifies?")
                                                                    (("1"
                                                                      (reveal
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -4)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               "unifies?"
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "term_variable_eta")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "t")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (use
                                                                                             "equal?_ref")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (reveal
                                                                               -6)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "(P1, sig, V)")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "unify_TCC8")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "input"
                                                                                       "P"
                                                                                       "sig"
                                                                                       "V")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (reveal
                                                                                           -8
                                                                                           -9
                                                                                           -10)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1
                                                                                               -2
                                                                                               -3)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "up"
                                                                                                 "P1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "t"
                                                                                                     "s")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "V(t)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "term_variable_eta")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "vars"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 ("member"
                                                                                                                  "singleton")
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide 1 2)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (rewrite
                                                                     "choose_unif_unifies?")
                                                                    (("1"
                                                                      (reveal
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -4)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (lemma
                                                                             "term_unit_extensionality")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "t"
                                                                               "s")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (expand
                                                                                   "unifies?"
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "equal?_ref")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (reveal
                                                                                   -7)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "(P1, sig, V)")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "unify_TCC10")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "input"
                                                                                           "P"
                                                                                           "sig"
                                                                                           "V")
                                                                                          (("2"
                                                                                            (reveal
                                                                                             -9
                                                                                             -10
                                                                                             -11)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1
                                                                                                 -2
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "up"
                                                                                                   "P1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "t"
                                                                                                       "s")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "member"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         -2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (name-replace
                                                                           "f"
                                                                           "f_sym(t)")
                                                                          (("2"
                                                                            (name-replace
                                                                             "P2"
                                                                             "decompose(arg(t), arg(s))`1")
                                                                            (("2"
                                                                              (name-replace
                                                                               "new_P"
                                                                               "append(P2, P1)")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "choose_unif_unifies?")
                                                                                (("2"
                                                                                  (reveal
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("2"
                                                                                        (reveal
                                                                                         -9)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "(new_P, sig, V)")
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "del")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "new_P")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "unifies?_append")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "decompose_correct_app")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "f"
                                                                                                             "arg(s)"
                                                                                                             "del"
                                                                                                             "arg(t)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "P2"
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "term_app_eta")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -9
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "t = app(f, arg(t))")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -3
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "up = (t, s)")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (decompose-equality
                                                                                                                                     1)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (lemma
                                                                                                                                 "term_app_eta")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "t")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "f"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "unify_well_formed")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "del"
                                                                                                                     "(append(P2, P1), sig, V)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               4
                                                                                               2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "unify_TCC12")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "input"
                                                                                                   "P"
                                                                                                   "sig"
                                                                                                   "V")
                                                                                                  (("2"
                                                                                                    (reveal
                                                                                                     -11
                                                                                                     -12
                                                                                                     -13)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -2
                                                                                                           -3)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "up"
                                                                                                             "P1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "t"
                                                                                                                 "s")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "f"
                                                                                                                     "arg(t)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "P2")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "new_P"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "P2"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           "term_app_eta")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "t")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "f"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         -2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "mem_flatten_map2")
                                                                          (("1"
                                                                            (skolem
                                                                             -3
                                                                             "new_input_lst")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (case
                                                                                 "ac_app?(t)")
                                                                                (("1"
                                                                                  (use
                                                                                   "apply_ac_step_sound")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -3
                                                                                         -4
                                                                                         -5
                                                                                         -6)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -8)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "new_input_lst")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "new_input_lst = (new_input_lst`1, new_input_lst`2, new_input_lst`3)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (decompose-equality
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2
                                                                                                 3
                                                                                                 4
                                                                                                 6
                                                                                                 -10)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "unify_TCC14")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "input"
                                                                                                     "P"
                                                                                                     "sig"
                                                                                                     "V")
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       -11
                                                                                                       -12
                                                                                                       -13)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "up"
                                                                                                                   "P1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "t"
                                                                                                                       "s")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "ac_sym(t)"
                                                                                                                           "ac_arg(t)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "apply_ac_step(P, null, sig, V)")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "every_nth")
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "member_nth2")
                                                                                                                                    (("1"
                                                                                                                                      (skolem
                                                                                                                                       -9
                                                                                                                                       "i")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "i")
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -9
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (use
                                                                                                                                 "term_ac_app_eta")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "unify_subs")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "del"
                                                                                           "new_input_lst")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "new_input_lst = (new_input_lst`1, new_input_lst`2, new_input_lst`3)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "nice_input?"
                                                                                         -6)
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (expand
                                                                                         "vars"
                                                                                         1
                                                                                         1)
                                                                                        (("4"
                                                                                          (expand
                                                                                           "nice_input?"
                                                                                           -6)
                                                                                          (("4"
                                                                                            (flatten)
                                                                                            (("4"
                                                                                              (hide-all-but
                                                                                               (-7
                                                                                                1))
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "disjoint?")
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "empty?")
                                                                                                  (("4"
                                                                                                    (skeep)
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "x")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "intersection"))
                                                                                                        (("4"
                                                                                                          (flatten)
                                                                                                          (("4"
                                                                                                            (assert)
                                                                                                            (("4"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "union")
                                                                                                               -2)
                                                                                                              (("4"
                                                                                                                (expand
                                                                                                                 "member"
                                                                                                                 -2)
                                                                                                                (("4"
                                                                                                                  (expand
                                                                                                                   "emptyset")
                                                                                                                  (("4"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "pair?(t)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "unify_TCC15")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "input"
                                                                                         "P"
                                                                                         "sig"
                                                                                         "V")
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -8
                                                                                           -9
                                                                                           -10)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2
                                                                                               -3)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 -2
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -5
                                                                                                   "up"
                                                                                                   "P1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -5
                                                                                                       "t"
                                                                                                       "s")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (reveal
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (lemma
                                                                               "unify_TCC13")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "input"
                                                                                 "P"
                                                                                 "sig"
                                                                                 "V")
                                                                                (("2"
                                                                                  (reveal
                                                                                   -8
                                                                                   -9
                                                                                   -10)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       -3)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "up"
                                                                                         "P1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "t"
                                                                                             "s")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (name-replace
                                                                                                 "f"
                                                                                                 "ac_sym(t)")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "ac_arg(t)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "term_ac_app_eta")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "t")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "f"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "pair?(t)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "unify_TCC15")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "input"
                                                                                                           "P"
                                                                                                           "sig"
                                                                                                           "V")
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -13
                                                                                                             -14
                                                                                                             -15)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "up"
                                                                                                                   "P1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "t"
                                                                                                                       "s")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (reveal
                                                                                                         2
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (reveal -2 -3 -4)
                        (("2" (typepred "input")
                          (("2" (case "input = (P, sig, V)")
                            (("1" (replace -1) (("1" (propax) nil nil))
                              nil)
                             ("2" (decompose-equality 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skolem 1 ("input" "P" "sig" "V"))
        (("2" (prop)
          (("2" (typepred "input")
            (("2" (case "input = (P, sig, V)")
              (("1" (replace -1) (("1" (propax) nil nil)) nil)
               ("2" (decompose-equality 1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex4 const-decl "ordinal" lex4 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (size def-decl "nat" unification nil)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unifies? def-decl "bool" unification nil)
    (unify def-decl "list[sub]" unification_alg nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose_unif_pair const-decl "[unif_pair, unif_prb]"
     aux_unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (choose_unif_unifies? formula-decl nil aux_unification nil)
    (unify_TCC2 termination-tcc nil unification_alg nil)
    (unify_alg_correct_sub formula-decl nil unification_alg nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (equal?_sym formula-decl nil equality nil)
    (unifies? const-decl "bool" unification nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil)
    (member const-decl "bool" unification nil)
    (choose_unif_subset formula-decl nil aux_unification nil)
    (append def-decl "list[T]" list_props nil)
    (term_unit_extensionality formula-decl nil term_adt nil)
    (unify_TCC10 termination-tcc nil unification_alg nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (decompose def-decl "[unif_prb, bool]" unification nil)
    (unifies?_append formula-decl nil unification nil)
    (string type-eq-decl nil strings nil)
    (term_app_eta formula-decl nil term_adt nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (unify_well_formed formula-decl nil unification_alg nil)
    (decompose_correct_app formula-decl nil unification nil)
    (unify_TCC12 termination-tcc nil unification_alg nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (unify_TCC13 subtype-tcc nil unification_alg nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (unify_subs formula-decl nil unification_alg nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (member_nth2 formula-decl nil list_theory nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (every_nth formula-decl nil list_props nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (unify_TCC14 termination-tcc nil unification_alg nil)
    (apply_ac_step_sound formula-decl nil apply_ac_step nil)
    (unify_TCC15 cases-tcc nil unification_alg nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (apply_ac_step def-decl "list[ac_sol_simp]" apply_ac_step nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (unify_TCC8 termination-tcc nil unification_alg nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (unify_TCC6 termination-tcc nil unification_alg nil)
    (unify_TCC4 termination-tcc nil unification_alg nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (equal?_ref formula-decl nil equality nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const adt-constructor-decl "[constant -> (const?)]" term_adt nil)
    (term_const_eta formula-decl nil term_adt nil))
   shostak))
 (unify_alg_correct_cor_TCC1 0
  (unify_alg_correct_cor_TCC1-1 nil 3850908510
   ("" (skeep)
    (("" (expand "nice_input?")
      (("" (prop)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (rewrite "well_formed_unif_prb")
          (("5" (skolem 1 "t1")
            (("5" (expand "member" 1 1)
              (("5" (lift-if)
                (("5" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (grind) nil nil))
        nil))
      nil))
    nil)
   ((subs def-decl "term" substitution nil)
    (subs const-decl "term" substitution nil)
    (idempotent? const-decl "bool" substitution nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (well_formed? const-decl "bool" term_properties nil)
    (well_formed? const-decl "bool" unification nil)
    (member def-decl "bool" unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (well_formed_unif_prb formula-decl nil unification nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (well_formed? const-decl "bool" substitution nil)
    (nice_input? const-decl "bool" apply_ac_step nil))
   nil
   (unify_alg_correct_cor subtype
    "(list_adt[[term[constant, variable, f_symbol, ac_symbol], term[constant, variable, f_symbol, ac_symbol]]].cons((unification_alg.t, unification_alg.s), list_adt[[term[constant, variable, f_symbol, ac_symbol], term[constant, variable, f_symbol, ac_symbol]]].null), list_adt[basic_sub].null, unification.vars(unification_alg.t, unification_alg.s))"
    "nice_input")))
 (unify_alg_correct_cor 0
  (unify_alg_correct_cor-1 nil 3839767713
   ("" (skeep)
    (("" (lemma "unify_alg_correct")
      (("" (inst -1 "delta" "(cons((t, s), null), null, vars(t, s))")
        (("" (assert) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((unify_alg_correct formula-decl nil unification_alg nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (unify_alg_complete_sub 0
  (unify_alg_complete_sub-1 nil 3851106272
   ("" (skolem 1 ("X" "del" "sig" "t" "up" "P" "P1" "V"))
    (("" (assert)
      (("" (flatten)
        (("" (hide -3)
          (("" (expand "more_general?" -6)
            (("" (skolem -6 "del1")
              (("" (name-replace "sig1" "cons((X, t), null)")
                (("" (case "equal?(del1, append(del1, sig1))")
                  (("1" (prop)
                    (("1" (expand "more_general?" 1)
                      (("1" (inst 1 "del1")
                        (("1" (expand "equal?" 1)
                          (("1" (skolem 1 "x")
                            (("1" (expand "subs" 1)
                              (("1"
                                (rewrite "subs_append2")
                                (("1"
                                  (rewrite "subs_append2")
                                  (("1"
                                    (lemma "equal_sub_equiv")
                                    (("1"
                                      (inst
                                       -1
                                       "del1"
                                       "append(del1, sig1)"
                                       "subs(sig)(variable(x))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "equal?" -8)
                                          (("1"
                                            (inst -8 "x")
                                            (("1"
                                              (expand "subs" -8)
                                              (("1"
                                                (rewrite
                                                 "subs_append2")
                                                (("1"
                                                  (rewrite
                                                   "subs_append2")
                                                  (("1"
                                                    (lemma
                                                     "equal?_trans")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "subs(del)(variable(x))"
                                                       "subs(del1)(subs(sig)(variable(x)))"
                                                       "subs(del1)(subs(sig1)(subs(sig)(variable(x))))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "unifies?_equal")
                      (("2"
                        (inst -1 "append(del1, sig)" "del"
                         "apply_sub(sig1, P1)")
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (hide-all-but (-7 1))
                              (("1"
                                (expand "equal?")
                                (("1"
                                  (skolem 1 "x")
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (expand "subs")
                                      (("1"
                                        (use "equal?_sym")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "unifies?_append_disjoint3")
                              (("2"
                                (inst?)
                                (("2"
                                  (case
                                   "disjoint?(dom(sig), vars(P1))")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (rewrite "apply_sub_unifies")
                                          (("1"
                                            (lemma "unifies?_equal")
                                            (("1"
                                              (inst
                                               -1
                                               "del1"
                                               "append(del1, sig1)"
                                               "P1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2 3)
                                                  (("1"
                                                    (lemma
                                                     "unifies?_append_disjoint3")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "sig"
                                                       "del1"
                                                       "P1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "unifies?_equal")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "del"
                                                             "append(del1, sig)"
                                                             "P")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -7)
                                                                (("1"
                                                                  (rewrite
                                                                   "unifies?_equiv")
                                                                  (("1"
                                                                    (rewrite
                                                                     "unifies?_equiv")
                                                                    (("1"
                                                                      (skolem
                                                                       1
                                                                       "up1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "up1")
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "up1")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 3)
                                      (("2"
                                        (expand "disjoint?" 1)
                                        (("2"
                                          (expand "empty?" 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand
                                               ("member"
                                                "intersection")
                                               -1)
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (rewrite
                                                   "vars_unif_prb")
                                                  (("2"
                                                    (skolem -2 "t1")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (rewrite
                                                         "apply_sub_mem")
                                                        (("2"
                                                          (skolem
                                                           -2
                                                           "t2")
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (replace
                                                               -3
                                                               -4)
                                                              (("2"
                                                                (use
                                                                 "vars_subs_t")
                                                                (("2"
                                                                  (expand
                                                                   "subset?"
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         ("member"
                                                                          "union")
                                                                         -1)
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (lemma
                                                                             "basic_sub_info")
                                                                            (("1"
                                                                              (expand
                                                                               "sig1"
                                                                               -2)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "X"
                                                                                 "t")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "vars_singleton")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nice_input?"
                                                                                           -13)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2
                                                                                               -3)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "disjoint?"
                                                                                                 -11)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "empty?"
                                                                                                   -11)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -11
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       ("member"
                                                                                                        "intersection")
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "vars_unif_prb")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           2
                                                                                                           "t")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (reveal
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "member_unif_prb_equiv"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   2
                                                                                                                   "up")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member"
                                                                                                                     -10)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "nice_input?"
                                                                             -10)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 ("disjoint?"
                                                                                  "empty?")
                                                                                 -11)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?"
                                                                                   -11)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -11
                                                                                     "x")
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "intersection")
                                                                                       2)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "vars_unif_prb")
                                                                                        (("2"
                                                                                          (inst
                                                                                           2
                                                                                           "t2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "member_unif_prb_equiv")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "member_unif_prb_equiv"
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -15)
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     -3
                                                                                                     "up1")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -15
                                                                                                       "up1")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             2
                                                                                                             "up1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1)
                                    (("2"
                                      (hide 2 3 4)
                                      (("2"
                                        (expand "disjoint?" 1)
                                        (("2"
                                          (expand "empty?" 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand
                                               ("member"
                                                "intersection")
                                               -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "nice_input?"
                                                   -6)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "disjoint?"
                                                       -7)
                                                      (("2"
                                                        (expand
                                                         "empty?"
                                                         -7)
                                                        (("2"
                                                          (inst -7 "x")
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "intersection")
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "vars_unif_prb")
                                                                (("2"
                                                                  (rewrite
                                                                   "vars_unif_prb")
                                                                  (("2"
                                                                    (skolem
                                                                     -2
                                                                     "t1")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "t1")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -12)
                                                                            (("2"
                                                                              (rewrite
                                                                               "member_unif_prb_equiv"
                                                                               -2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "member_unif_prb_equiv"
                                                                                 1)
                                                                                (("2"
                                                                                  (skolem
                                                                                   -2
                                                                                   "up1")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -13
                                                                                       "up1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "up1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (expand "equal?" 1)
                      (("2" (skolem 1 "Z")
                        (("2" (expand "subs" 1)
                          (("2" (rewrite "subs_append2")
                            (("2" (case "Z = X")
                              (("1"
                                (replace -1)
                                (("1"
                                  (reveal -2)
                                  (("1"
                                    (case "unifies?(del1, P)")
                                    (("1"
                                      (rewrite "unifies?_equiv")
                                      (("1"
                                        (inst -1 "up")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "unifies?" -1)
                                            (("1"
                                              (expand "sig1" 1)
                                              (("1"
                                                (expand "subs" 1 3)
                                                (("1"
                                                  (expand "subs" 1 4)
                                                  (("1"
                                                    (expand "subs" 1 3)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       -4)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             -5)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  2))
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             -5)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "equal?_sym")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "subs(del1)(variable(X))"
                                                                     "subs(del1)(t)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  2))
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma
                                         "unifies?_append_disjoint3")
                                        (("2"
                                          (inst -1 "sig" "del1" "P")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "unifies?_equal")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "del"
                                                   "append(del1, sig)"
                                                   "P")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "nice_input?"
                                                 -5)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "disjoint?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst -7 "x")
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "intersection")
                                                             3)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "intersection")
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "sig1" 2)
                                (("2"
                                  (expand "subs" 2 3)
                                  (("2"
                                    (expand "subs" 2 4)
                                    (("2"
                                      (expand "subs" 2 3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "equal?_ref")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (append def-decl "list[T]" list_props nil)
    (unifies?_equal formula-decl nil unification nil)
    (unifies?_append_disjoint3 formula-decl nil unification nil)
    (set type-eq-decl nil sets nil)
    (disjoint? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars_unif_prb formula-decl nil unification nil)
    (subset? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (member const-decl "bool" unification nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (vars_singleton formula-decl nil term_properties nil)
    (basic_sub_info formula-decl nil substitution nil)
    (union const-decl "set" sets nil)
    (vars_subs_t formula-decl nil substitution nil)
    (apply_sub_mem formula-decl nil unification nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (apply_sub_unifies formula-decl nil unification nil)
    (unifies?_equiv formula-decl nil unification nil)
    (subset? const-decl "bool" unification nil)
    (equal?_sym formula-decl nil equality nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (subs const-decl "term" substitution nil)
    (equal?_trans formula-decl nil equality nil)
    (equal_sub_equiv formula-decl nil substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (unifies? const-decl "bool" unification nil)
    (unifies? def-decl "bool" unification nil)
    (equal?_ref formula-decl nil equality nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (unify_alg_complete 0
  (unify_alg_complete-3 nil 3851283783
   (""
    (measure-induct
     "lex4(card(vars_not_ac(input`1)), card(vars_under2more(input`1)), card(admissible_subterms(input`1)), size(input`1))"
     "input")
    (("1" (skolem 1 "input")
      (("1" (prop)
        (("1" (skolem 1 "del")
          (("1" (name-replace "P" "input`1")
            (("1" (name-replace "sig" "input`2")
              (("1" (name-replace "V" "input`3")
                (("1" (hide -1)
                  (("1" (case "null?(P)")
                    (("1" (prop)
                      (("1" (inst 1 "sig")
                        (("1" (assert)
                          (("1" (expand "unify" 1)
                            (("1" (expand "member" 1)
                              (("1"
                                (expand "more_general?")
                                (("1"
                                  (skolem -3 "del2")
                                  (("1"
                                    (inst 1 "del2")
                                    (("1"
                                      (expand "equal?" 1)
                                      (("1"
                                        (skolem 1 "x")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "equal?" -3)
                                            (("1"
                                              (inst -3 "x")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (prop)
                      (("2" (name-replace "up" "choose_unif_pair(P)`1")
                        (("2"
                          (name-replace "P1" "choose_unif_pair(P)`2")
                          (("2" (name-replace "t" "up`1")
                            (("2" (name-replace "s" "up`2")
                              (("2"
                                (hide -5 -6 -7 -8)
                                (("2"
                                  (case
                                   "var?(s) AND (NOT member(V(s), vars(t)))")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (name-replace
                                       "sig1"
                                       "cons((V(s), t), null)")
                                      (("1"
                                        (name-replace
                                         "new_sig"
                                         "append(sig1, sig)")
                                        (("1"
                                          (name-replace
                                           "new_P"
                                           "apply_sub(sig1, P1)")
                                          (("1"
                                            (reveal -5)
                                            (("1"
                                              (inst
                                               -1
                                               "(new_P, new_sig, V)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 "del")
                                                  (("1"
                                                    (reveal -4 -5)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -1 -2)
                                                        (("1"
                                                          (reveal
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (case
                                                             "unifies?(del, new_P) AND more_general?(new_sig, del)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skolem
                                                                     -5
                                                                     "gamma")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         3
                                                                         "gamma")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "unify"
                                                                             3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -3
                                                               4)
                                                              (("2"
                                                                (lemma
                                                                 "unify_alg_complete_sub")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "V(s)"
                                                                   "del"
                                                                   "sig"
                                                                   "t"
                                                                   "up"
                                                                   "P"
                                                                   "P1"
                                                                   "V")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -6)
                                                                        (("2"
                                                                          (replace
                                                                           -5)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (use
                                                                                   "term_variable_eta")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member"
                                                                                       1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "member"
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (use
                                                                                   "choose_unif_pair_mem1")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (typepred
                                                                                   "input")
                                                                                  (("5"
                                                                                    (case
                                                                                     "input = (P, sig, V)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (reveal
                                                                                       -9
                                                                                       -10
                                                                                       -11)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (hide
                                                                                 2)
                                                                                (("6"
                                                                                  (use
                                                                                   "choose_unif_subset")
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 4)
                                                  (("2"
                                                    (lemma
                                                     "unify_TCC2")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "input "
                                                       "P"
                                                       "sig"
                                                       "V")
                                                      (("2"
                                                        (reveal
                                                         -7
                                                         -8
                                                         -9)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "up"
                                                               "P1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "t"
                                                                   "s")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "sig1"
                                                                       "new_sig"
                                                                       "new_P")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "unify_TCC1")
                                                (("2"
                                                  (hide 4)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "input"
                                                     "P"
                                                     "sig"
                                                     "V")
                                                    (("2"
                                                      (reveal -7 -8 -9)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "up"
                                                             "P1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "t"
                                                                 "s")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "sig1"
                                                                     "new_sig"
                                                                     "new_P")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 1)
                                    (("2"
                                      (case "const?(t)")
                                      (("1"
                                        (use "term_const_eta")
                                        (("1"
                                          (case "s = const(a(t))")
                                          (("1"
                                            (reveal -2 -3 -4 -5)
                                            (("1"
                                              (reveal -6)
                                              (("1"
                                                (inst
                                                 -1
                                                 "(P1, sig, V)")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst -1 "del")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (skolem
                                                           -1
                                                           "gamma")
                                                          (("1"
                                                            (inst
                                                             2
                                                             "gamma")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "unify"
                                                                   2)
                                                                  (("1"
                                                                    (replace
                                                                     -12)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "choose_unif_unifies?"
                                                           -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide
                                                     3
                                                     -1
                                                     -2
                                                     -3
                                                     -4)
                                                    (("2"
                                                      (lemma
                                                       "unify_TCC4")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "input"
                                                         "P"
                                                         "sig"
                                                         "V")
                                                        (("2"
                                                          (reveal
                                                           -8
                                                           -9
                                                           -10)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "up"
                                                                 "P1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "t"
                                                                     "s")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "a(t)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -3 -4 3)
                                                  (("2"
                                                    (lemma
                                                     "unify_TCC3")
                                                    (("2"
                                                      (reveal -7 -8 -9)
                                                      (("2"
                                                        (inst
                                                         -4
                                                         "input"
                                                         "P"
                                                         "sig"
                                                         "V")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (replace
                                                             -2)
                                                            (("2"
                                                              (replace
                                                               -3)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "up"
                                                                     "P1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "t"
                                                                         "s")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "a(t)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (reveal 2)
                                              (("2"
                                                (reveal -2)
                                                (("2"
                                                  (rewrite
                                                   "unifies?_equiv")
                                                  (("2"
                                                    (inst -1 "up")
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (lemma
                                                         "unifies?_impossible2")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "s"
                                                           "del"
                                                           "t")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "const?(s)")
                                                                (("1"
                                                                  (hide
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "unifies?"
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -6)
                                                                      (("1"
                                                                        (replace
                                                                         -7)
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           -3
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "subs_const")
                                                                            (("1"
                                                                              (lemma
                                                                               "term_const_eta")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "s")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -4
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "subs_const")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "equal?"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "ord"
                                                                     -1)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (case
                                                                 "up = (t, s)")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (decompose-equality
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 2)
                                                                (("4"
                                                                  (typepred
                                                                   "input")
                                                                  (("4"
                                                                    (expand
                                                                     "nice_input?"
                                                                     -1)
                                                                    (("4"
                                                                      (flatten)
                                                                      (("4"
                                                                        (rewrite
                                                                         "well_formed_unif_prb"
                                                                         -5)
                                                                        (("4"
                                                                          (inst
                                                                           -5
                                                                           "t")
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (use
                                                                               "choose_unif_pair_mem1_alt")
                                                                              (("4"
                                                                                (expand
                                                                                 "P")
                                                                                (("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "member"
                                                                                     1)
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "choose_unif_pair_mem1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (case "var?(t)")
                                          (("1"
                                            (lemma "term_variable_eta")
                                            (("1"
                                              (inst -1 "t")
                                              (("1"
                                                (case
                                                 "NOT member(V(t), vars(s))")
                                                (("1"
                                                  (name-replace
                                                   "sig1"
                                                   "cons((V(t), s), null)")
                                                  (("1"
                                                    (name-replace
                                                     "new_sig"
                                                     "append(sig1, sig)")
                                                    (("1"
                                                      (name-replace
                                                       "new_P"
                                                       "apply_sub(sig1, P1)")
                                                      (("1"
                                                        (reveal -6)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(new_P, new_sig, V)")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "del")
                                                              (("1"
                                                                (reveal
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "unifies?(del, new_P) AND more_general?(new_sig, del)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5
                                                                           -6)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             "gamma")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 3
                                                                                 "gamma")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "unify"
                                                                                     3)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -10)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -11)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -9)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -5
                                                                       4
                                                                       -2
                                                                       -3)
                                                                      (("2"
                                                                        (lemma
                                                                         "unify_alg_complete_sub")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "V(t)"
                                                                           "del"
                                                                           "sig"
                                                                           "s"
                                                                           "up"
                                                                           "P"
                                                                           "P1"
                                                                           "V")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -6)
                                                                              (("2"
                                                                                (replace
                                                                                 -4)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member"
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "member"
                                                                                     1)
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide
                                                                                     2)
                                                                                    (("4"
                                                                                      (use
                                                                                       "choose_unif_pair_mem1")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (hide
                                                                                     2)
                                                                                    (("5"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -5)
                                                                                      (("5"
                                                                                        (reveal
                                                                                         -13
                                                                                         -14
                                                                                         -15)
                                                                                        (("5"
                                                                                          (typepred
                                                                                           "input")
                                                                                          (("5"
                                                                                            (case
                                                                                             "input = (P, sig, V)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("6"
                                                                                    (hide
                                                                                     2)
                                                                                    (("6"
                                                                                      (use
                                                                                       "choose_unif_subset")
                                                                                      (("6"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 4)
                                                              (("2"
                                                                (lemma
                                                                 "unify_TCC6")
                                                                (("2"
                                                                  (reveal
                                                                   -7
                                                                   -8
                                                                   -9)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     "input"
                                                                     "P"
                                                                     "sig"
                                                                     "V")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "up"
                                                                           "P1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "t"
                                                                               "s")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "V(t)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "sig1"
                                                                                         "new_sig"
                                                                                         "new_P")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (reveal
                                                                                     3)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (lemma
                                                               "unify_TCC5")
                                                              (("2"
                                                                (reveal
                                                                 -7
                                                                 -8
                                                                 -9)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "input"
                                                                   "P"
                                                                   "sig"
                                                                   "V")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "up"
                                                                       "P1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "t"
                                                                             "s")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (reveal
                                                                                 3)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "V(t)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "sig1"
                                                                                           "new_sig"
                                                                                           "new_P")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "s = t")
                                                  (("1"
                                                    (reveal -6)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "(P1, sig, V)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "del")
                                                          (("1"
                                                            (reveal
                                                             -3
                                                             -4
                                                             -5
                                                             -6)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "gamma")
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "gamma")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (reveal
                                                                           3)
                                                                          (("1"
                                                                            (expand
                                                                             "unify"
                                                                             3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "choose_unif_unifies?"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (lemma
                                                             "unify_TCC8")
                                                            (("2"
                                                              (reveal
                                                               -7
                                                               -8
                                                               -9)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "input"
                                                                 "P"
                                                                 "sig"
                                                                 "V")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "up"
                                                                       "P1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "t"
                                                                           "s")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "V(t)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 3)
                                                        (("2"
                                                          (lemma
                                                           "unify_TCC7")
                                                          (("2"
                                                            (reveal
                                                             -7
                                                             -8
                                                             -9)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "input"
                                                               "P"
                                                               "sig"
                                                               "V")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "up"
                                                                     "P1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "t"
                                                                         "s")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "V(t)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 3)
                                                    (("2"
                                                      (reveal -2)
                                                      (("2"
                                                        (lemma
                                                         "unifies?_impossible2")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "t"
                                                           "del"
                                                           "s")
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "ord"
                                                               -1
                                                               2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "ord"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "term_variable_eta")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "s")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "vars"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           ("member"
                                                                                            "singleton")
                                                                                           -4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (rewrite
                                                               "unifies?_equiv")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "up")
                                                                (("3"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "unifies?")
                                                                    (("1"
                                                                      (replace
                                                                       -5)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (rewrite
                                                                           "equal?_sym"
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "choose_unif_pair_mem1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (expand
                                                               "vars"
                                                               -3)
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (expand
                                                                   ("member"
                                                                    "singleton")
                                                                   -3)
                                                                  (("4"
                                                                    (lemma
                                                                     "term_variable_eta")
                                                                    (("4"
                                                                      (inst
                                                                       -1
                                                                       "s")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (typepred
                                                               "input")
                                                              (("5"
                                                                (reveal
                                                                 -10)
                                                                (("5"
                                                                  (expand
                                                                   "nice_input?"
                                                                   -2)
                                                                  (("5"
                                                                    (flatten)
                                                                    (("5"
                                                                      (replace
                                                                       -1
                                                                       -6)
                                                                      (("5"
                                                                        (rewrite
                                                                         "well_formed_unif_prb"
                                                                         -6)
                                                                        (("5"
                                                                          (inst
                                                                           -6
                                                                           "s")
                                                                          (("5"
                                                                            (assert)
                                                                            (("5"
                                                                              (use
                                                                               "choose_unif_pair_mem1_alt")
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (expand
                                                                                   "member"
                                                                                   1)
                                                                                  (("5"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "unit?(t)")
                                            (("1"
                                              (case "s = unit")
                                              (("1"
                                                (reveal -5)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "(P1, sig, V)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst -1 "del")
                                                      (("1"
                                                        (reveal
                                                         -2
                                                         -3
                                                         -4
                                                         -5)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               "gamma")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   3
                                                                   "gamma")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (reveal
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "unify"
                                                                         4)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "choose_unif_unifies?"
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 4)
                                                      (("2"
                                                        (lemma
                                                         "unify_TCC10")
                                                        (("2"
                                                          (reveal
                                                           -6
                                                           -7
                                                           -8)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "input"
                                                             "P"
                                                             "sig"
                                                             "V")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "up"
                                                                   "P1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "t"
                                                                       "s")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 4)
                                                    (("2"
                                                      (reveal -6 -7 -8)
                                                      (("2"
                                                        (lemma
                                                         "unify_TCC9")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "input"
                                                           "P"
                                                           "sig"
                                                           "V")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "up"
                                                                 "P1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "t"
                                                                     "s")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 4)
                                                (("2"
                                                  (reveal -1 -4)
                                                  (("2"
                                                    (rewrite
                                                     "unifies?_equiv")
                                                    (("2"
                                                      (inst -1 "up")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "unifies?_impossible2")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "s"
                                                             "del"
                                                             "t")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (reveal
                                                                 3)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "ord"
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (case
                                                                     "up = (t, s)")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (hide
                                                                     2)
                                                                    (("4"
                                                                      (reveal
                                                                       -10)
                                                                      (("4"
                                                                        (typepred
                                                                         "input")
                                                                        (("4"
                                                                          (expand
                                                                           "nice_input?"
                                                                           -1)
                                                                          (("4"
                                                                            (replace
                                                                             -2)
                                                                            (("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (rewrite
                                                                                 "well_formed_unif_prb"
                                                                                 -5)
                                                                                (("4"
                                                                                  (inst
                                                                                   -5
                                                                                   "t")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (use
                                                                                       "choose_unif_pair_mem1_alt")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        (("4"
                                                                                          (expand
                                                                                           "member"
                                                                                           1)
                                                                                          (("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "choose_unif_pair_mem1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "app?(t)")
                                              (("1"
                                                (hide 1 2)
                                                (("1"
                                                  (use "term_app_eta")
                                                  (("1"
                                                    (case
                                                     "NOT app?(s) OR f_sym(t) /= f_sym(s) OR NOT decompose(arg(t), arg(s))`2")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (reveal -2)
                                                        (("1"
                                                          (rewrite
                                                           "unifies?_equiv")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "up")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "unifies?_impossible2")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "s"
                                                                   "del"
                                                                   "t")
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "app?(s)")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "f_sym(t) = f_sym(s)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "term_app_eta")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "s")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "decompose_not_fail2")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "f_sym(t)"
                                                                                       "arg(s)"
                                                                                       "del"
                                                                                       "arg(t)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "up = (t, s)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (decompose-equality
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -3)
                                                                              (("2"
                                                                                (lemma
                                                                                 "term_app_eta")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "s")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "unifies?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -7)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           -3
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4
                                                                                             -3
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "subs_app")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "subs_app")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "equal?"
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -3)
                                                                        (("2"
                                                                          (expand
                                                                           "ord"
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (reveal
                                                                       5)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       -2)
                                                                      (("3"
                                                                        (case
                                                                         "up = (t, s)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (decompose-equality
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("5"
                                                                      (hide
                                                                       -2)
                                                                      (("5"
                                                                        (reveal
                                                                         -12)
                                                                        (("5"
                                                                          (typepred
                                                                           "input")
                                                                          (("5"
                                                                            (expand
                                                                             "nice_input?"
                                                                             -1)
                                                                            (("5"
                                                                              (flatten)
                                                                              (("5"
                                                                                (replace
                                                                                 -7)
                                                                                (("5"
                                                                                  (rewrite
                                                                                   "well_formed_unif_prb"
                                                                                   -5)
                                                                                  (("5"
                                                                                    (inst
                                                                                     -5
                                                                                     "t")
                                                                                    (("5"
                                                                                      (assert)
                                                                                      (("5"
                                                                                        (use
                                                                                         "choose_unif_pair_mem1_alt")
                                                                                        (("5"
                                                                                          (assert)
                                                                                          (("5"
                                                                                            (expand
                                                                                             "member"
                                                                                             1)
                                                                                            (("5"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "choose_unif_pair_mem1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (name-replace
                                                         "P2"
                                                         "decompose(arg(t), arg(s))`1")
                                                        (("2"
                                                          (name-replace
                                                           "new_P"
                                                           "append(P2, P1)")
                                                          (("2"
                                                            (reveal -6)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "(new_P, sig, V)")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "del")
                                                                  (("1"
                                                                    (reveal
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             "gamma")
                                                                            (("1"
                                                                              (inst
                                                                               2
                                                                               "gamma")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     5)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "unify"
                                                                                       3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           3)
                                                                          (("2"
                                                                            (expand
                                                                             "new_P"
                                                                             1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "unifies?_append")
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (replace
                                                                                   -6
                                                                                   1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "decompose_correct_app")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "f_sym(t)"
                                                                                       "arg(s)"
                                                                                       "del"
                                                                                       "arg(t)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -11)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "term_app_eta")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "s")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "unifies?_equiv"
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -3
                                                                                                         "up")
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "up = (t, s)")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (decompose-equality
                                                                                                               1)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "choose_unif_pair_mem1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "choose_unif_unifies?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (lemma
                                                                     "unify_TCC12")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "input"
                                                                       "P"
                                                                       "sig"
                                                                       "V")
                                                                      (("2"
                                                                        (reveal
                                                                         -8
                                                                         -9
                                                                         -10)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "up"
                                                                               "P1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "t"
                                                                                   "s")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "f_sym(t)"
                                                                                       "arg(t)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "P2"
                                                                                           "new_P")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "unify_TCC11")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "input"
                                                                   "P"
                                                                   "sig"
                                                                   "V")
                                                                  (("2"
                                                                    (reveal
                                                                     -8
                                                                     -9
                                                                     -10)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "up"
                                                                           "P1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "t"
                                                                               "s")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "f_sym(t)"
                                                                                   "arg(t)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "P2"
                                                                                       "new_P")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "ac_app?(t)")
                                                (("1"
                                                  (hide 1 2 3)
                                                  (("1"
                                                    (use
                                                     "term_ac_app_eta")
                                                    (("1"
                                                      (case
                                                       "NOT ac_app?(s) OR ac_sym(t) /= ac_sym(s)")
                                                      (("1"
                                                        (reveal -2)
                                                        (("1"
                                                          (rewrite
                                                           "unifies?_equiv")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "up")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "ac_app?(s)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "term_ac_app_eta")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "s")
                                                                      (("1"
                                                                        (expand
                                                                         "unifies?"
                                                                         -3)
                                                                        (("1"
                                                                          (replace
                                                                           -7)
                                                                          (("1"
                                                                            (replace
                                                                             -8)
                                                                            (("1"
                                                                              (replace
                                                                               -5
                                                                               -3
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "subs_ac")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -3
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "subs_ac")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "equal?"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     "unifies?_impossible2")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "s"
                                                                       "del"
                                                                       "t")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "ord"
                                                                             -1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (reveal
                                                                             5)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (case
                                                                             "up = (t, s)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (decompose-equality
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             4)
                                                                            (("4"
                                                                              (reveal
                                                                               -12)
                                                                              (("4"
                                                                                (typepred
                                                                                 "input")
                                                                                (("4"
                                                                                  (expand
                                                                                   "nice_input?"
                                                                                   -1)
                                                                                  (("4"
                                                                                    (flatten)
                                                                                    (("4"
                                                                                      (replace
                                                                                       -7
                                                                                       -5)
                                                                                      (("4"
                                                                                        (rewrite
                                                                                         "well_formed_unif_prb"
                                                                                         -5)
                                                                                        (("4"
                                                                                          (inst
                                                                                           -5
                                                                                           "t")
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (use
                                                                                               "choose_unif_pair_mem1_alt")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "member"
                                                                                                   1)
                                                                                                  (("4"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "choose_unif_pair_mem1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (name-replace
                                                           "input_lst"
                                                           "apply_ac_step(P, null, sig, V)")
                                                          (("2"
                                                            (name-replace
                                                             "lst_results"
                                                             "map(unify)(input_lst)")
                                                            (("1"
                                                              (lemma
                                                               "apply_ac_step_complete")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "del"
                                                                 "null"
                                                                 "sig"
                                                                 "P"
                                                                 "V")
                                                                (("1"
                                                                  (rewrite
                                                                   "append_null")
                                                                  (("1"
                                                                    (reveal
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3
                                                                         -4)
                                                                        (("1"
                                                                          (case
                                                                           "nice_input?(P, sig, V)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (skolem
                                                                                 -1
                                                                                 ("new_input"
                                                                                  "del1"))
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -7)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "new_input")
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "append(del1, del)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (skolem
                                                                                                 -1
                                                                                                 "gamma")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "gamma")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           6)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "unify"
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "mem_flatten_map2")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "new_input")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "new_input = (new_input`1, new_input`2, new_input`3)")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (decompose-equality
                                                                                                                         1)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "nice_input_apply_ac_step")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "append_null")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2
                                                                                                                 3)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "every_nth")
                                                                                                                  (("2"
                                                                                                                    (skolem
                                                                                                                     1
                                                                                                                     "i")
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "nice_input_apply_ac_step")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "nth(apply_ac_step(P, null[unif_pair], sig, V), i)"
                                                                                                                         "null"
                                                                                                                         "sig"
                                                                                                                         " P"
                                                                                                                         "V")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "append_null"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "member_nth"
                                                                                                                                 1)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           -12
                                                                                                           -13
                                                                                                           -14
                                                                                                           -15
                                                                                                           -16
                                                                                                           -17
                                                                                                           -18
                                                                                                           -19)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "more_general_supset")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "del"
                                                                                                               " del1"
                                                                                                               "V"
                                                                                                               "new_input`3"
                                                                                                               "gamma")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "apply_ac_step_vars2avoid_cor")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "append_null")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-5
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "subset?"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "disjoint?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "empty?"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "x")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 ("member"
                                                                                                                                  "intersection")
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "difference"
                                                                                                                                       -3)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member"
                                                                                                                                         -3
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "contained_append")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "contained?"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-3
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subset?")
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -2
                                                                                                                 "x")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     ("member"
                                                                                                                      "difference")
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (reveal
                                                                                                         -7)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "contained_supset")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "del"
                                                                                                             "V"
                                                                                                             "new_input`3")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "apply_ac_step_vars2avoid_cor")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "append_null")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (reveal
                                                                                                 -7)
                                                                                                (("3"
                                                                                                  (use
                                                                                                   "well_formed_append")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           3)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "unify_TCC14")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "input"
                                                                                               "P"
                                                                                               "sig"
                                                                                               "V")
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 -15
                                                                                                 -16
                                                                                                 -17)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -2
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "up"
                                                                                                       "P1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "t"
                                                                                                           "s")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "ac_sym(t)"
                                                                                                               "ac_arg(t)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "input_lst")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "every_nth")
                                                                                                                      (("2"
                                                                                                                        (reveal
                                                                                                                         -6)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "member_nth2")
                                                                                                                          (("2"
                                                                                                                            (skolem
                                                                                                                             -1
                                                                                                                             "i")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "i")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "nice_input_apply_ac_step")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "append_null")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "choose_unif_correct")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "P")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -11)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ac_prb?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (typepred
                                                                               "input")
                                                                              (("2"
                                                                                (expand
                                                                                 "P"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "sig"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "V"
                                                                                     1)
                                                                                    (("2"
                                                                                      (case
                                                                                       "input = (input`1, input`2, input`3)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (decompose-equality
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 3)
                                                              (("2"
                                                                (rewrite
                                                                 "every_nth")
                                                                (("2"
                                                                  (skolem
                                                                   1
                                                                   "i")
                                                                  (("2"
                                                                    (lemma
                                                                     "nice_input_apply_ac_step")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "nth(input_lst, i)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (rewrite
                                                                               "member_nth2")
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "i")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("2"
                                                                                (typepred
                                                                                 "input")
                                                                                (("2"
                                                                                  (expand
                                                                                   ("P"
                                                                                    "sig"
                                                                                    "V")
                                                                                   1)
                                                                                  (("2"
                                                                                    (case
                                                                                     "input = (input`1, input`2, input`3)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "pair?(t)")
                                                  (("1"
                                                    (hide 1 2 3 4)
                                                    (("1"
                                                      (lemma
                                                       "unify_TCC15")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "input"
                                                         "P"
                                                         "sig"
                                                         "V")
                                                        (("1"
                                                          (reveal
                                                           -7
                                                           -8
                                                           -9)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "up"
                                                                 "P1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "t"
                                                                     "s")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (reveal
                                                                         6)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide
                                                     7
                                                     -1
                                                     -2
                                                     -3
                                                     -4)
                                                    (("2"
                                                      (reveal 2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (typepred "input")
          (("2" (case "input = (unif_prb, sigma, vars2avoid)")
            (("1" (replace -1) (("1" (propax) nil nil)) nil)
             ("2" (decompose-equality 1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex4 const-decl "ordinal" lex4 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (size def-decl "nat" unification nil)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unifies? def-decl "bool" unification nil)
    (contained? const-decl "bool" substitution nil)
    (well_formed? const-decl "bool" substitution nil)
    (unify def-decl "list[sub]" unification_alg nil)
    (member def-decl "bool" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (choose_unif_pair const-decl "[unif_pair, unif_prb]"
     aux_unification nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unify_TCC9 subtype-tcc nil unification_alg nil)
    (unify_TCC10 termination-tcc nil unification_alg nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (choose_unif_correct formula-decl nil aux_unification nil)
    (ac_prb? const-decl "bool" unification nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (well_formed_append formula-decl nil substitution nil)
    (contained_supset formula-decl nil substitution nil)
    (contained_append formula-decl nil substitution nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth formula-decl nil list_theory nil)
    (every_nth formula-decl nil list_props nil)
    (nice_input_apply_ac_step formula-decl nil apply_ac_step nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (more_general_supset formula-decl nil substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (apply_ac_step_vars2avoid_cor formula-decl nil apply_ac_step nil)
    (unify_TCC14 termination-tcc nil unification_alg nil)
    (member_nth2 formula-decl nil list_theory nil)
    (append_null formula-decl nil list_props nil)
    (apply_ac_step_complete formula-decl nil apply_ac_step nil)
    (ac_sol_simp type-eq-decl nil apply_ac_step nil)
    (apply_ac_step def-decl "list[ac_sol_simp]" apply_ac_step nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (unify_TCC15 cases-tcc nil unification_alg nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (decompose def-decl "[unif_prb, bool]" unification nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (decompose_not_fail2 formula-decl nil unification nil)
    (string type-eq-decl nil strings nil)
    (subs_app formula-decl nil substitution nil)
    (unify_TCC11 subtype-tcc nil unification_alg nil)
    (decompose_correct_app formula-decl nil unification nil)
    (unifies?_append formula-decl nil unification nil)
    (unify_TCC12 termination-tcc nil unification_alg nil)
    (term_app_eta formula-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unify_TCC5 subtype-tcc nil unification_alg nil)
    (unify_TCC6 termination-tcc nil unification_alg nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (equal?_sym formula-decl nil equality nil)
    (unify_TCC7 subtype-tcc nil unification_alg nil)
    (unify_TCC8 termination-tcc nil unification_alg nil)
    (term_const_eta formula-decl nil term_adt nil)
    (unifies?_impossible2 formula-decl nil unification nil)
    (well_formed_unif_prb formula-decl nil unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_unif_pair_mem1_alt formula-decl nil aux_unification nil)
    (unifies? const-decl "bool" unification nil)
    (subs_const formula-decl nil substitution nil)
    (ord const-decl "upto(5)" term_adt nil)
    (unifies?_equiv formula-decl nil unification nil)
    (unify_TCC4 termination-tcc nil unification_alg nil)
    (choose_unif_unifies? formula-decl nil aux_unification nil)
    (unify_TCC3 subtype-tcc nil unification_alg nil)
    (a adt-accessor-decl "[(const?) -> constant]" term_adt nil)
    (const adt-constructor-decl "[constant -> (const?)]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (append def-decl "list[T]" list_props nil)
    (unify_TCC1 subtype-tcc nil unification_alg nil)
    (unify_alg_complete_sub formula-decl nil unification_alg nil)
    (choose_unif_subset formula-decl nil aux_unification nil)
    (choose_unif_pair_mem1 formula-decl nil aux_unification nil)
    (member const-decl "bool" unification nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (unify_TCC2 termination-tcc nil unification_alg nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   nil))
 (unify_alg_complete_cor_TCC1 0
  (unify_alg_complete_cor_TCC1-1 nil 3851284559
   ("" (skeep)
    (("" (hide -1 -3 -4)
      (("" (expand "nice_input?" 1)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (expand "disjoint?" 1)
            (("2" (expand "empty?" 1)
              (("2" (skeep)
                (("2" (expand ("member" "intersection") -1)
                  (("2" (prop)
                    (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "subset?" 1)
            (("3" (skeep) (("3" (hide 1) (("3" (grind) nil nil)) nil))
              nil))
            nil)
           ("4" (expand "subset?" 1)
            (("4" (skeep)
              (("4" (expand "vars" -1)
                (("4" (expand "vars" -1 2) (("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (rewrite "well_formed_unif_prb")
            (("5" (skolem 1 "t1")
              (("5" (prop)
                (("5" (expand "member" -1)
                  (("5" (expand "well_formed?" -3)
                    (("5" (flatten)
                      (("5" (prop)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((subs def-decl "term" substitution nil)
    (subs const-decl "term" substitution nil)
    (idempotent? const-decl "bool" substitution nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (well_formed? const-decl "bool" term_properties nil)
    (well_formed? const-decl "bool" unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (member def-decl "bool" unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (well_formed_unif_prb formula-decl nil unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (well_formed? const-decl "bool" substitution nil)
    (nice_input? const-decl "bool" apply_ac_step nil))
   nil
   (unify_alg_complete_cor subtype
    "(list_adt[[term[constant, variable, f_symbol, ac_symbol], term[constant, variable, f_symbol, ac_symbol]]].cons((unification_alg.t, unification_alg.s), list_adt[[term[constant, variable, f_symbol, ac_symbol], term[constant, variable, f_symbol, ac_symbol]]].null), list_adt[basic_sub].null, unification_alg.vars2avoid)"
    "nice_input")))
 (unify_alg_complete_cor 0
  (unify_alg_complete_cor-1 nil 3851284566
   ("" (skeep)
    (("" (lemma "unify_alg_complete")
      (("" (inst -1 "delta" "(cons((t, s), null), null, vars2avoid)")
        (("1" (assert)
          (("1" (expand "unifies?" -1 1)
            (("1" (expand "unifies?" -1)
              (("1" (prop)
                (("1" (expand "more_general?" 1)
                  (("1" (inst 1 "delta")
                    (("1" (rewrite "append_null")
                      (("1" (use "equal?_ref")
                        (("1" (use "equal_sub_ref") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "nice_input?" 1)
            (("2" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "disjoint?" 1)
                (("2" (expand "empty?" 1)
                  (("2" (skeep)
                    (("2" (expand ("member" "intersection") -1)
                      (("2" (prop)
                        (("2" (hide -1) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "subset?" 1)
                (("3" (skeep) (("3" (grind) nil nil)) nil)) nil)
               ("4" (expand "vars" 1)
                (("4" (expand "vars" 1 2) (("4" (grind) nil nil)) nil))
                nil)
               ("5" (rewrite "well_formed_unif_prb")
                (("5" (skolem 1 "t1")
                  (("5" (prop)
                    (("5" (expand "member" -1 1)
                      (("5" (expand "well_formed?" -2)
                        (("5" (flatten)
                          (("5" (prop)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (expand "member" -1)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unify_alg_complete formula-decl nil unification_alg nil)
    (idempotent? const-decl "bool" substitution nil)
    (subs const-decl "term" substitution nil) nil
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (contained? const-decl "bool" substitution nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (unifies? const-decl "bool" unification nil) nil nil
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" unification nil) nil nil
    (well_formed_unif_prb formula-decl nil unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (well_formed? const-decl "bool" substitution nil)
    (singleton const-decl "(singleton?)" sets nil) nil
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    nil (append_null formula-decl nil list_props nil)
    (equal_sub_ref formula-decl nil substitution nil)
    (equal?_ref formula-decl nil equality nil)
    (unifies? def-decl "bool" unification nil)
    (nice_input type-eq-decl nil unification_alg nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nice_input? const-decl "bool" apply_ac_step nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil nil
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil) nil)
   shostak)))

