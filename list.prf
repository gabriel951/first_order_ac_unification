(|list_theory|
 (|cartesian_product_aux_TCC1| 0
  (|cartesian_product_aux_TCC1-1| NIL 3803367839 ("" (TCC)) NIL NIL))
 (|cartesian_product_aux_TCC2| 0
  (|cartesian_product_aux_TCC2-1| NIL 3803367839 ("" (TCC))
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL))
 (|cartesian_product_aux_TCC3| 0
  (|cartesian_product_aux_TCC3-1| NIL 3803367839 ("" (TCC)) NIL NIL))
 (|cartesian_product_TCC1| 0
  (|cartesian_product_TCC1-1| NIL 3803367839 ("" (TCC))
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL))
 (|cartesian_product_TCC2| 0
  (|cartesian_product_TCC2-1| NIL 3803367839 ("" (TCC)) NIL NIL))
 (|flatten_TCC1| 0 (|flatten_TCC1-1| NIL 3803367839 ("" (TCC)) NIL NIL))
 (|flatten_TCC2| 0
  (|flatten_TCC2-1| NIL 3803367839 ("" (TCC))
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL))
 (|flatten_TCC3| 0 (|flatten_TCC3-1| NIL 3803367839 ("" (TCC)) NIL NIL))
 (|ind_flatten_TCC1| 0
  (|ind_flatten_TCC1-1| NIL 3807442007 ("" (GRIND) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|ind_flatten_TCC2| 0
  (|ind_flatten_TCC2-1| NIL 3807442007 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|ind_flatten_TCC3| 0
  (|ind_flatten_TCC3-1| NIL 3807442007
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (EXPAND "<<" 3)
        (("" (LIFT-IF) (("" (PROP) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL))
   NIL))
 (|ind_flatten_TCC4| 0
  (|ind_flatten_TCC4-1| NIL 3807444627 ("" (TERMINATION-TCC) NIL NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|from_min2max_TCC1| 0
  (|from_min2max_TCC1-1| NIL 3804618454 ("" (TCC) NIL NIL)
   ((|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|from_min2max_TCC2| 0
  (|from_min2max_TCC2-1| NIL 3804618454 ("" (TCC))
   ((|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|increment_TCC1| 0
  (|increment_TCC1-1| NIL 3803367839 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|increment_TCC2| 0
  (|increment_TCC2-1| NIL 3803367839 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|increment_TCC3| 0
  (|increment_TCC3-1| NIL 3803367839 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|increment_TCC4| 0
  (|increment_TCC4-1| NIL 3803367839 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|increment_TCC5| 0
  (|increment_TCC5-1| NIL 3803367839 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|increment_TCC6| 0
  (|increment_TCC6-1| NIL 3804618454 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|count_elem_TCC1| 0
  (|count_elem_TCC1-1| NIL 3803367839 ("" (TCC))
   ((|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|count_elem_TCC2| 0
  (|count_elem_TCC2-1| NIL 3803367839 ("" (TCC))
   ((|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_repeat_lst_TCC1| 0
  (|get_repeat_lst_TCC1-1| NIL 3804618454 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_repeat_lst_TCC2| 0
  (|get_repeat_lst_TCC2-1| NIL 3804618454 ("" (TCC)) NIL NIL))
 (|select_greater_TCC1| 0
  (|select_greater_TCC1-1| NIL 3804618454 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|select_greater_TCC2| 0
  (|select_greater_TCC2-1| NIL 3804618454 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|matrix?_TCC1| 0
  (|matrix?_TCC1-1| NIL 3808145793 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))
 (|get_col_i_TCC1| 0
  (|get_col_i_TCC1-1| NIL 3804618454 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|get_lst_after_n_TCC1| 0
  (|get_lst_after_n_TCC1-1| NIL 3805569188 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|get_lst_after_n_TCC2| 0
  (|get_lst_after_n_TCC2-1| NIL 3805569188 ("" (TCC)) NIL NIL))
 (|snd_proj_TCC1| 0 (|snd_proj_TCC1-1| NIL 3805569188 ("" (TCC)) NIL NIL))
 (|snd_proj_TCC2| 0
  (|snd_proj_TCC2-1| NIL 3805569188 ("" (TCC))
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL))
 (|snd_proj_TCC3| 0 (|snd_proj_TCC3-1| NIL 3805569188 ("" (TCC)) NIL NIL))
 (|sum_TCC1| 0
  (|sum_TCC1-1| NIL 3808579200 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|sum_TCC2| 0
  (|sum_TCC2-1| NIL 3808579200 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))
 (|remove_TCC1| 0
  (|remove_TCC1-1| NIL 3807478748 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|member_append| 0
  (|member_append-1| NIL 3803909084
   ("" (MEASURE-INDUCT "length(lst1)" "lst1")
    (("" (SKOLEM 1 "lst1")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "append" 1)
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "member" 2 1)
                  (("2" (CASE "x = car(lst1)")
                    (("1" (GRIND) NIL NIL)
                     ("2" (ASSERT)
                      (("2" (INST -1 "cdr(lst1)")
                        (("2" (PROP)
                          (("1" (INST -1 "lst2" "x") (("1" (GRIND) NIL NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|member_append2| 0
  (|member_append2-1| NIL 3803910765
   ("" (MEASURE-INDUCT "length(lst_pair1)" "lst_pair1")
    (("" (SKOLEM 1 "lst1")
      (("" (PROP)
        (("" (SKOLEM 1 ("lst2" "x" "y"))
          (("" (EXPAND "append" 1)
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "member" 2 1)
                  (("2" (INST -1 "cdr(lst1)")
                    (("2" (PROP)
                      (("1" (INST -1 "lst2" "x" "y") (("1" (GRIND) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|null_append| 0
  (|null_append-1| NIL 3805570561
   ("" (INDUCT "lst1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
   ((T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|null_append_nat| 0
  (|null_append_nat-1| NIL 3805812221
   ("" (INDUCT "lst_nat1")
    (("1" (SKEEP) (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (GRIND) NIL NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|cdr_append_TCC1| 0
  (|cdr_append_TCC1-1| NIL 3805618390 ("" (TCC))
   ((|append| DEF-DECL "list[T]" |list_props| NIL)) NIL))
 (|cdr_append| 0
  (|cdr_append-1| NIL 3805618391
   ("" (INDUCT "lst1")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
     ("4" (GRIND) NIL NIL))
    NIL)
   ((T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|nth_append_TCC1| 0
  (|nth_append_TCC1-1| NIL 3805617232
   ("" (SKEEP) (("" (REWRITE "length_append") NIL NIL)) NIL)
   ((|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|nth_append_TCC2| 0
  (|nth_append_TCC2-1| NIL 3805617232 ("" (TCC))
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|nth_append| 0
  (|nth_append-1| NIL 3805617233
   ("" (MEASURE-INDUCT "length(lst1)" "lst1")
    (("1" (SKOLEM 1 "lst1")
      (("1" (PROP)
        (("1" (SKEEP)
          (("1" (LIFT-IF)
            (("1" (PROP)
              (("1" (EXPAND "nth" 1 1)
                (("1" (LIFT-IF)
                  (("1" (PROP)
                    (("1" (HIDE -3)
                      (("1" (GRIND)
                        (("1" (LEMMA "list_cons_eta[T]")
                          (("1" (INST -1 "lst1") (("1" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "cdr_append")
                      (("2" (INST? -1)
                        (("2" (HIDE -3)
                          (("2" (PROP)
                            (("1" (REPLACE -1 2 NIL T)
                              (("1" (CASE "null?(lst1)")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (EXPAND "nth" 3 2)
                                  (("2" (ASSERT)
                                    (("2" (REVEAL -2)
                                      (("2" (INST -1 "cdr(lst1)")
                                        (("2" (PROP)
                                          (("1" (INST -1 "i-1" "lst2")
                                            (("1" (PROP)
                                              (("1" (LIFT-IF)
                                                (("1" (ASSERT)
                                                  (("1" (SPLIT)
                                                    (("1" (PROPAX) NIL NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (HIDE -1 4)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (GRIND) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "nth" 2 1)
                (("2" (LIFT-IF)
                  (("2" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (CASE "lst1 = null")
                        (("1" (REPLACE -1 1)
                          (("1" (HIDE -1)
                            (("1" (ASSERT)
                              (("1" (EXPAND "length" 1)
                                (("1" (EXPAND "append" 1)
                                  (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (CASE "null?(lst1)")
                        (("1" (EXPAND "append" 2 1)
                          (("1" (ASSERT)
                            (("1" (EXPAND "length" 2)
                              (("1" (EXPAND "nth" 2 2) (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "cdr_append")
                          (("2" (INST? -1)
                            (("2" (ASSERT)
                              (("2" (REPLACE -1 3)
                                (("2" (INST -2 "cdr(lst1)")
                                  (("2" (HIDE -1)
                                    (("2" (PROP)
                                      (("1" (INST -1 "i-1" "lst2")
                                        (("1" (PROP)
                                          (("1" (LIFT-IF)
                                            (("1" (SPLIT)
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -2 3)
                                                  (("1" (GRIND) NIL NIL)) NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (REPLACE -1 4)
                                                  (("2" (HIDE -1)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (GRIND) NIL NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP) (("3" (REWRITE "length_append") NIL NIL)) NIL)) NIL))
    NIL)
   ((|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|cdr_append| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|equal_lst_nth_TCC1| 0
  (|equal_lst_nth_TCC1-1| NIL 3805573073 ("" (TCC))
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   NIL))
 (|equal_lst_nth| 0
  (|equal_lst_nth-1| NIL 3805573130
   ("" (MEASURE-INDUCT "length(lst1)" "lst1")
    (("1" (SKOLEM 1 "lst1")
      (("1" (FLATTEN)
        (("1" (SKEEP)
          (("1" (CASE "null?(lst1)")
            (("1" (GRIND) NIL NIL)
             ("2" (CASE "lst1 = cons(car(lst1), cdr(lst1))")
              (("1" (REPLACE -1 2)
                (("1" (HIDE -1)
                  (("1" (CASE "null?(lst2)")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "lst2 = cons(car(lst2), cdr(lst2))")
                      (("1" (REPLACE -1 3)
                        (("1" (HIDE -1)
                          (("1" (INST -3 "0")
                            (("1" (EXPAND "nth" -3)
                              (("1" (INST -1 "cdr(lst1)")
                                (("1" (PROP)
                                  (("1" (INST -1 "cdr(lst2)")
                                    (("1" (SPLIT)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (GRIND) NIL NIL)
                                       ("3" (SKEEP)
                                        (("3" (REVEAL -3)
                                          (("3" (INST -1 "n+1")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (TYPEPRED "n")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (LEMMA "list_cons_eta[T]")
                          (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (LEMMA "list_cons_eta[T]") (("2" (GRIND) NIL NIL)) NIL))
                NIL)
               ("3" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|member_nth| 0
  (|member_nth-1| NIL 3804680155
   ("" (INDUCT "lst")
    (("1" (SKEEP) (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKOLEM 1 ("head" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "nth" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (INST? -1)
                  (("1" (ASSERT)
                    (("1" (PROP)
                      (("1" (EXPAND "member" 2) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|member_nth2| 0
  (|member_nth2-1| NIL 3805569744
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("head" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "member" 1)
            (("2" (ASSERT)
              (("2" (CASE "x = head")
                (("1" (ASSERT)
                  (("1" (INST 1 "0")
                    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (CASE "member(x, tail)")
                    (("1" (ASSERT)
                      (("1" (INST -2 "x")
                        (("1" (ASSERT)
                          (("1" (SKEEP)
                            (("1" (INST 2 "n+1")
                              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (SKEEP)
                        (("2" (INST -1 "x")
                          (("2" (ASSERT)
                            (("2" (CASE "n = 0")
                              (("1" (GRIND) NIL NIL)
                               ("2" (INST 4 "n-1")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (GRIND)
                                  (("2" (TYPEPRED "n") (("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|cart_prod_aux_mem| 0
  (|cart_prod_aux_mem-1| NIL 3803911867
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("" (SKOLEM 1 "lst")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "cartesian_product_aux" 1)
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "member" 2 2)
                  (("2" (INST -1 "cdr(lst)")
                    (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|cartesian_product_aux| DEF-DECL "list[[T, T]]" |list_theory| NIL))
   SHOSTAK))
 (|cart_prod_aux_mem2| 0
  (|cart_prod_aux_mem2-1| NIL 3803912731
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("" (SKOLEM 1 "lst")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "cartesian_product_aux" -2)
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "member" -1)
                  (("2" (ASSERT)
                    (("2" (INST -2 "cdr(lst)") (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|cartesian_product_aux| DEF-DECL "list[[T, T]]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|cart_prod_mem| 0
  (|cart_prod_mem-1| NIL 3803908371
   ("" (MEASURE-INDUCT "length(lst1)" "lst1")
    (("" (SKOLEM 1 "lst1")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "cartesian_product" 1)
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (LEMMA "member_append2")
                  (("2" (INST? -1)
                    (("2" (REPLACE -1 2)
                      (("2" (HIDE -1)
                        (("2" (CASE "x = car(lst1)")
                          (("1" (ASSERT)
                            (("1" (EXPAND "member" 2 1)
                              (("1" (LEMMA "cart_prod_aux_mem")
                                (("1" (INST -1 "lst2" "x" "y")
                                  (("1" (REPLACE -1 2) (("1" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "member" 3 1)
                            (("2" (LIFT-IF)
                              (("2" (ASSERT)
                                (("2" (INST -1 "cdr(lst1)")
                                  (("2" (PROP)
                                    (("1" (INST -1 "lst2" "x" "y")
                                      (("1" (REPLACE -1 3 RL)
                                        (("1" (HIDE -1)
                                          (("1" (LEMMA "cart_prod_aux_mem2")
                                            (("1" (INST? -1)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member_append2| FORMULA-DECL NIL |list_theory| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cart_prod_aux_mem| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cart_prod_aux_mem2| FORMULA-DECL NIL |list_theory| NIL)
    (|cartesian_product_aux| DEF-DECL "list[[T, T]]" |list_theory| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|cartesian_product| DEF-DECL "list[[T, T]]" |list_theory| NIL))
   SHOSTAK))
 (|null_flatten_nth| 0
  (|null_flatten_nth-1| NIL 3807298117
   ("" (INDUCT "lst_of_lsts")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "flatten" -3)
            (("2" (REWRITE "null_append")
              (("2" (FLATTEN)
                (("2" (EXPAND "nth" 1)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("2" (INST -1 "i-1")
                        (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null_append| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|flatten| DEF-DECL "list[T]" |list_theory| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|flatten_append| 0
  (|flatten_append-1| NIL 3807646186
   ("" (INDUCT "lst_of_lsts1")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "flatten" 1 2)
            (("2" (EXPAND "append" 1 1)
              (("2" (EXPAND "flatten" 1 1)
                (("2" (INST? -1)
                  (("2" (REPLACE -1 1) (("2" (REWRITE "append_assoc") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|append_assoc| FORMULA-DECL NIL |list_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|flatten| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|len0_ind_flatten| 0
  (|len0_ind_flatten-1| NIL 3807452554
   ("" (INDUCT "lst_of_lsts")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKOLEM 1 ("lst" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "ind_flatten" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (EXPAND "flatten" -3)
                  (("1" (REWRITE "length_append") (("1" (ASSERT) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "flatten" -2)
                  (("2" (REWRITE "length_append")
                    (("2" (ASSERT)
                      (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|flatten| DEF-DECL "list[T]" |list_theory| NIL)
    (|ind_flatten| DEF-DECL "nat" |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|ind_flatten_len| 0
  (|ind_flatten_len-1| NIL 3807444911
   ("" (INDUCT "lst_of_lsts" 1)
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("lst" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "flatten" 1)
            (("2" (REWRITE "length_append")
              (("2" (EXPAND "ind_flatten" 1)
                (("2" (ASSERT)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (GRIND) NIL NIL)
                       ("3" (EXPAND "nth" -3)
                        (("3" (ASSERT)
                          (("3" (INST? -1) (("3" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|ind_flatten| DEF-DECL "nat" |list_theory| NIL)
    (|flatten| DEF-DECL "list[T]" |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|nth_flatten_TCC1| 0
  (|nth_flatten_TCC1-1| NIL 3807442007
   ("" (SKEEP)
    (("" (LEMMA "ind_flatten_len")
      (("" (INST -1 "i" "j" "lst_of_lsts") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|ind_flatten_len| FORMULA-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL))
 (|nth_flatten| 0
  (|nth_flatten-1| NIL 3807442034
   ("" (INDUCT "lst_of_lsts" 1)
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("lst" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "nth" 1 2)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (EXPAND "ind_flatten" 1)
                  (("1" (ASSERT)
                    (("1" (EXPAND "nth" -4)
                      (("1" (ASSERT)
                        (("1" (EXPAND "flatten" 1)
                          (("1" (LEMMA "nth_append")
                            (("1" (INST -1 "j" "lst" "flatten(tail)")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "flatten" 2)
                  (("2" (EXPAND "ind_flatten" 2)
                    (("2" (ASSERT)
                      (("2" (LEMMA "nth_append")
                        (("2" (INST? -1)
                          (("2" (ASSERT)
                            (("2" (PROP)
                              (("1" (REPLACE -1 2)
                                (("1" (HIDE -1)
                                  (("1" (EXPAND "nth" -3)
                                    (("1" (INST? -1) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -1)
                                (("2" (LEMMA "ind_flatten_len")
                                  (("2" (INST? -1)
                                    (("2" (ASSERT)
                                      (("2" (HIDE 2 4) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (LEMMA "ind_flatten_len")
          (("3" (INST? -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|flatten| DEF-DECL "list[T]" |list_theory| NIL)
    (|ind_flatten| DEF-DECL "nat" |list_theory| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nth_append| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|ind_flatten_len| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|flatten_mem| 0
  (|flatten_mem-1| NIL 3808406898
   ("" (INDUCT "lst_of_lsts")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("lst" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "flatten" -2)
            (("2" (REWRITE "member_append")
              (("2" (PROP)
                (("1" (INST 1 "0")
                  (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
                 ("2" (INST -2 "x")
                  (("2" (ASSERT)
                    (("2" (SKEEP)
                      (("2" (INST 1 "n+1")
                        (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (TYPEPRED "n") (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member_append| FORMULA-DECL NIL |list_theory| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|flatten| DEF-DECL "list[T]" |list_theory| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|from_min2max_len| 0
  (|from_min2max_len-1| NIL 3805753437
   ("" (MEASURE-INDUCT "max(0, n-i + 1)" ("i" "n"))
    (("1" (SKOLEM 1 ("i" "n"))
      (("1" (PROP)
        (("1" (EXPAND "from_min2max" 1)
          (("1" (LIFT-IF)
            (("1" (SPLIT)
              (("1" (GRIND) NIL NIL)
               ("2" (FLATTEN)
                (("2" (SPLIT)
                  (("1" (GRIND) NIL NIL)
                   ("2" (FLATTEN)
                    (("2" (EXPAND "length" 2 1)
                      (("2" (INST -1 "1+i" "n") (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|from_min2max| DEF-DECL "list[nat]" |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK))
 (|from_min2max_len1| 0
  (|from_min2max_len1-1| NIL 3805753929
   ("" (LEMMA "from_min2max_len")
    (("" (INST -1 "1" "_") (("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|from_min2max| DEF-DECL "list[nat]" |list_theory| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|from_min2max_len| FORMULA-DECL NIL |list_theory| NIL))
   SHOSTAK))
 (|from_min2max_car_TCC1| 0
  (|from_min2max_car_TCC1-1| NIL 3805803487 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|from_min2max_car| 0
  (|from_min2max_car-1| NIL 3805804665
   ("" (MEASURE-INDUCT "j" "j")
    (("1" (SKOLEM 1 "j")
      (("1" (PROP)
        (("1" (SKEEP)
          (("1" (EXPAND "from_min2max" 2)
            (("1" (LIFT-IF)
              (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (GRIND) NIL NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|from_min2max| DEF-DECL "list[nat]" |list_theory| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|nth_from_min2max| 0
  (|nth_from_min2max-1| NIL 3805754960
   ("" (MEASURE-INDUCT "n" "n")
    (("" (SKOLEM 1 "n")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "from_min2max" 1)
            (("" (LIFT-IF)
              (("" (SPLIT)
                (("1" (GRIND) NIL NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT)
                    (("1" (GRIND) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "nth" 2)
                        (("2" (LIFT-IF)
                          (("2" (SPLIT)
                            (("1" (GRIND) NIL NIL)
                             ("2" (FLATTEN)
                              (("2" (INST -1 "n-1")
                                (("1" (PROP)
                                  (("1" (INST -1 "i+1" "j")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "from_min2max" -1)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|from_min2max| DEF-DECL "list[nat]" |list_theory| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|nth_from_min2max2| 0
  (|nth_from_min2max2-1| NIL 3805988277
   ("" (SKEEP)
    (("" (LEMMA "nth_from_min2max")
      (("" (INST -1 "1" "j" "n") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nth_from_min2max| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|increment_len| 0
  (|increment_len-1| NIL 3808406085
   ("" (INDUCT "n")
    (("1" (SKEEP) (("1" (EXPAND "increment" 1) (("1" (GRIND) NIL NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP) (("2" (EXPAND "increment" 1) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|increment| DEF-DECL "list[nat]" |list_theory| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|pos?_len| 0
  (|pos?_len-1| NIL 3808413542
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP) (("2" (EXPAND "pos?" 1) (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK))
 (|pos?_cor_TCC1| 0
  (|pos?_cor_TCC1-1| NIL 3808412186 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|pos?_cor| 0
  (|pos?_cor-1| NIL 3808414220
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP) (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("3" (HIDE 2) (("3" (SKEEP) (("3" (REWRITE "pos?_len") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|pos?_len| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   SHOSTAK))
 (|pos?_cor2| 0
  (|pos?_cor2-1| NIL 3808515431
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "pos?" -2)
            (("2" (PROP)
              (("1" (EXPAND "pos?" -4 1)
                (("1" (ASSERT)
                  (("1" (EXPAND "pos?" -4)
                    (("1" (LIFT-IF)
                      (("1" (PROP)
                        (("1" (HIDE -3 -4)
                          (("1" (TYPEPRED "equal?")
                            (("1" (EXPAND "equivalence?" -1)
                              (("1" (FLATTEN)
                                (("1" (EXPAND "symmetric?" -2)
                                  (("1" (INST -2 "y" "hd")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "transitive?" -3)
                                        (("1" (INST -3 "x" "hd" "y")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "pos?" -4)
                (("2" (ASSERT)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "pos?" -4)
                          (("2" (INST -3 "equal?" "x" "y")
                            (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|symmetric?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|pos?_equal| 0
  (|pos?_equal-1| NIL 3808496130
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "pos?" -3)
            (("2" (PROP)
              (("1" (EXPAND "pos?" 1)
                (("1" (PROP)
                  (("1" (HIDE 2)
                    (("1" (HIDE -2)
                      (("1" (TYPEPRED "equal?")
                        (("1" (EXPAND "equivalence?" -1)
                          (("1" (FLATTEN)
                            (("1" (HIDE -1)
                              (("1" (EXPAND "symmetric?")
                                (("1" (INST -1 "x" "y")
                                  (("1" (ASSERT)
                                    (("1" (HIDE -4)
                                      (("1" (EXPAND "transitive?")
                                        (("1" (INST -2 "y" "x" "hd")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "pos?" 2)
                (("2" (PROP)
                  (("2" (INST -2 "equal?" "x" "y") (("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|transitive?| CONST-DECL "bool" |relations| NIL)
    (|symmetric?| CONST-DECL "bool" |relations| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|pos?_equal2| 0
  (|pos?_equal2-1| NIL 3808506283
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "pos?" 1 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (EXPAND "pos?" 1)
                  (("1" (ASSERT)
                    (("1" (HIDE -2 2)
                      (("1" (TYPEPRED "equal?")
                        (("1" (EXPAND "equivalence?" -1)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "symmetric?" -2)
                              (("1" (INST -2 "x" "y")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "transitive?" -3)
                                    (("1" (INST -3 "y" "x" "hd")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "pos?" 2 2)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (HIDE -2 1)
                        (("1" (TYPEPRED "equal?")
                          (("1" (EXPAND "equivalence?" -1)
                            (("1" (FLATTEN)
                              (("1" (EXPAND "transitive?" -3)
                                (("1" (INST -3 "x" "y" "hd")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|symmetric?| CONST-DECL "bool" |relations| NIL))
   SHOSTAK))
 (|pos?_remove| 0
  (|pos?_remove-1| NIL 3808414522
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP) (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|pos?_remove_nth| 0
  (|pos?_remove_nth-1| NIL 3808414576
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "pos?" 1 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "remove" 2 1)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (GRIND) NIL NIL)
                       ("2" (EXPAND "pos?" 2 2)
                        (("2" (ASSERT)
                          (("2" (EXPAND "nth" 2)
                            (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|pos?_remove_ind_lt| 0
  (|pos?_remove_ind_lt-1| NIL 3808421964
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKOLEM 1 ("hd" "tail"))
      (("3" (PROP)
        (("3" (SKEEP)
          (("3" (NAME-REPLACE "bool" "pos?(x, cons(hd, tail), equal?)`1")
            (("3" (NAME-REPLACE "ind" "pos?(x, cons(hd, tail), equal?)`2")
              (("3" (EXPAND "remove" 1)
                (("3" (LIFT-IF)
                  (("3" (PROP)
                    (("1" (GRIND) NIL NIL)
                     ("2" (EXPAND "pos?" 2)
                      (("2" (LIFT-IF)
                        (("2" (PROP)
                          (("1" (EXPAND "ind" 1) (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (EXPAND "ind" 2)
                            (("2" (EXPAND "pos?" 2 2)
                              (("2" (ASSERT)
                                (("2" (INST? -1)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "bool" -1)
                                      (("2" (EXPAND "ind" -2)
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|pos?_remove_ind_gt| 0
  (|pos?_remove_ind_gt-1| NIL 3808422295
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKOLEM 1 ("hd" "tail"))
      (("3" (PROP)
        (("3" (SKEEP)
          (("3" (EXPAND "remove" 1 1)
            (("3" (LIFT-IF)
              (("3" (PROP)
                (("1" (EXPAND "pos?" 1 2)
                  (("1" (LIFT-IF)
                    (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "pos?" 2 1)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (GRIND) NIL NIL)
                       ("2" (EXPAND "pos?" 2 2)
                        (("2" (LIFT-IF)
                          (("2" (PROP)
                            (("2" (INST? -1)
                              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|count_elem_len| 0
  (|count_elem_len-1| NIL 3808404840
   ("" (INDUCT "lst2")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKOLEM 1 ("hd" "tail"))
      (("3" (PROP)
        (("3" (SKEEP)
          (("3" (EXPAND "count_elem" 1 1)
            (("3" (LIFT-IF)
              (("3" (PROP)
                (("1" (EXPAND "count_elem" 1 2)
                  (("1" (ASSERT)
                    (("1" (INST? -2)
                      (("1" (ASSERT)
                        (("1" (HIDE 1)
                          (("1" (REWRITE "increment_len") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "count_elem" 2 2)
                  (("2" (ASSERT)
                    (("2" (INST? -1)
                      (("2" (ASSERT)
                        (("2" (HIDE 1 2)
                          (("2" (REWRITE "length_append")
                            (("2" (LEMMA "length_append[nat]")
                              (("2" (INST -1 "coef" "_")
                                (("2" (INST -1 "cons(1, null)")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 1)
                                      (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|count_elem| DEF-DECL "[list[T], list[nat]]" |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|increment_len| FORMULA-DECL NIL |list_theory| NIL)
    (|increment| DEF-DECL "list[nat]" |list_theory| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL))
   SHOSTAK))
 (|put_in_head_matrix?| 0
  (|put_in_head_matrix?-1| NIL 3808236164
   ("" (INDUCT "matrix")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "matrix?" -2)
            (("2" (PROP)
              (("2" (EXPAND "put_in_head" 1)
                (("2" (EXPAND "matrix?" 1)
                  (("2" (PROP)
                    (("1" (INST? -4) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|put_in_head| DEF-DECL "list[list[T]]" |list_theory| NIL)
    (|matrix?| DEF-DECL "bool" |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|put_in_head_mem| 0
  (|put_in_head_mem-1| NIL 3808236251
   ("" (INDUCT "matrix")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "put_in_head" -2)
            (("2" (EXPAND "member" -2)
              (("2" (SPLIT -2)
                (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (INST? -2) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|put_in_head| DEF-DECL "list[list[T]]" |list_theory| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   SHOSTAK))
 (|get_repeat_lst_len| 0
  (|get_repeat_lst_len-1| NIL 3805973910
   ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|get_repeat_lst_append| 0
  (|get_repeat_lst_append-1| NIL 3807737981
   ("" (INDUCT "i") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|get_repeat_lst_nth_TCC1| 0
  (|get_repeat_lst_nth_TCC1-1| NIL 3807907575 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|get_repeat_lst_nth| 0
  (|get_repeat_lst_nth-1| NIL 3807907586
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "nth" 1)
          (("2" (LIFT-IF)
            (("2" (PROP)
              (("1" (GRIND) NIL NIL)
               ("2" (EXPAND "get_repeat_lst" 2)
                (("2" (INST? -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP) (("3" (REWRITE "get_repeat_lst_len") NIL NIL)) NIL)) NIL))
    NIL)
   ((|get_repeat_lst_len| FORMULA-DECL NIL |list_theory| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|get_repeat_lst_count| 0
  (|get_repeat_lst_count-1| NIL 3808606919
   ("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|matrix_append| 0
  (|matrix_append-1| NIL 3808146106
   ("" (INDUCT "lst_of_lsts1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|matrix?| DEF-DECL "bool" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|matrix_mem| 0
  (|matrix_mem-1| NIL 3808146514
   ("" (INDUCT "lst_of_lsts" 1)
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "member" -3)
            (("2" (PROP)
              (("1" (GRIND) NIL NIL)
               ("2" (EXPAND "matrix?" -3)
                (("2" (PROP)
                  (("2" (INST -4 "lst" "n") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|matrix?| DEF-DECL "bool" |list_theory| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|count_gt0| 0
  (|count_gt0-1| NIL 3808596362
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "count" -2)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (INST 1 "0")
                  (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL)
                 ("2" (INST -2 "equal?" "x")
                  (("2" (ASSERT)
                    (("2" (SKEEP)
                      (("2" (INST 2 "i+1")
                        (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|count_append| 0
  (|count_append-1| NIL 3808606758
   ("" (INDUCT "lst1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|reflexive?| CONST-DECL "bool" |relations| NIL)
    (|symmetric?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|pareate_append| 0
  (|pareate_append-1| NIL 3805570156
   ("" (MEASURE-INDUCT "length(lst1)" "lst1")
    (("" (SKOLEM 1 "lst1")
      (("" (PROP)
        (("" (HIDE -1)
          (("" (SKEEP)
            (("" (EXPAND "pareate" 1 1)
              (("" (LIFT-IF)
                (("" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (PROP)
                      (("1" (REWRITE "null_append")
                        (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (REWRITE "null_append") (("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (CASE "null?(lst1)")
                      (("1" (EXPAND "append" 3 1)
                        (("1" (ASSERT)
                          (("1" (CASE "null?(new_lst1)")
                            (("1" (ASSERT)
                              (("1" (EXPAND "append" 3 2)
                                (("1" (EXPAND "append" 3 1)
                                  (("1" (EXPAND "append" 3 1)
                                    (("1" (EXPAND "pareate" 3 2)
                                      (("1" (EXPAND "append" 3)
                                        (("1" (EXPAND "pareate" 3 2)
                                          (("1" (LIFT-IF)
                                            (("1" (SPLIT)
                                              (("1" (FLATTEN)
                                                (("1" (HIDE 1)
                                                  (("1" (REWRITE "null_append")
                                                    (("1"
                                                      (REWRITE "null_append")
                                                      (("1" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2 3 4) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "append" 4 1)
                        (("2" (ASSERT)
                          (("2" (CASE "null?(new_lst1)")
                            (("1" (HIDE -3 2 3 4) (("1" (GRIND) NIL NIL)) NIL)
                             ("2" (EXPAND "append" 5 1)
                              (("2" (ASSERT)
                                (("2" (EXPAND "pareate" 5 2)
                                  (("2" (EXPAND "append" 5 3)
                                    (("2" (HIDE 1 2 3 4)
                                      (("2" (REVEAL -1)
                                        (("2" (INST -1 "cdr(lst1)")
                                          (("2" (PROP)
                                            (("1"
                                              (INST -1 "lst2" "cdr(new_lst1)"
                                               "new_lst2")
                                              (("1" (ASSERT)
                                                (("1" (PROP)
                                                  (("1" (GRIND) NIL NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null_append| FORMULA-DECL NIL |list_theory| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|pareate| DEF-DECL "list[[T, T]]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|len_get_lst_until_n| 0
  (|len_get_lst_until_n-1| NIL 3805615260
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("" (SKOLEM 1 "lst")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "get_lst_until_n" 1)
            (("" (LIFT-IF)
              (("" (SPLIT)
                (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
                 ("2" (PROP)
                  (("2" (EXPAND "length" 3)
                    (("2" (ASSERT)
                      (("2" (INST -1 "cdr(lst)")
                        (("2" (PROP)
                          (("1" (INST -1 "n-1")
                            (("1" (REPLACE -1 3) (("1" (GRIND) NIL NIL)) NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|get_lst_until_n| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|nth_get_lst_until_n_TCC1| 0
  (|nth_get_lst_until_n_TCC1-1| NIL 3805626352
   ("" (SKEEP) (("" (LEMMA "len_get_lst_until_n") (("" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|len_get_lst_until_n| FORMULA-DECL NIL |list_theory| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL))
   SHOSTAK))
 (|nth_get_lst_until_n| 0
  (|nth_get_lst_until_n-1| NIL 3805630671
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("1" (SKOLEM 1 ("lst"))
      (("1" (PROP)
        (("1" (SKEEP)
          (("1" (EXPAND "nth" 1 2)
            (("1" (ASSERT)
              (("1" (LIFT-IF)
                (("1" (PROP)
                  (("1" (EXPAND "nth" 1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "get_lst_until_n" 1)
                        (("1" (LIFT-IF)
                          (("1" (SPLIT)
                            (("1" (FLATTEN)
                              (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "nth" 2 1)
                    (("2" (LIFT-IF)
                      (("2" (ASSERT)
                        (("2" (EXPAND "get_lst_until_n" 2)
                          (("2" (LIFT-IF)
                            (("2" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (INST -1 "cdr(lst)")
                                  (("2" (PROP)
                                    (("1" (INST -1 "i-1" "n-1")
                                      (("1" (ASSERT)
                                        (("1" (HIDE 4)
                                          (("1" (EXPAND "get_lst_until_n" -1)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (LEMMA "len_get_lst_until_n") (("2" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|len_get_lst_until_n| FORMULA-DECL NIL |list_theory| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|get_lst_until_n| DEF-DECL "list[T]" |list_theory| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   SHOSTAK))
 (|get_lst_until_n_append| 0
  (|get_lst_until_n_append-1| NIL 3805732972
   ("" (MEASURE-INDUCT "length(lst1)" "lst1")
    (("" (SKOLEM 1 "lst1")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "get_lst_until_n" 1)
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                 ("3" (EXPAND "append" 3 1)
                  (("3" (LIFT-IF)
                    (("3" (SPLIT)
                      (("1" (GRIND) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (LEMMA "list_cons_eta[T]")
                            (("2" (INST? -1)
                              (("2" (EXPAND "append" 2 1)
                                (("2" (INST -2 "cdr(lst1)")
                                  (("2" (PROP)
                                    (("1" (INST? -1)
                                      (("1" (EXPAND "length" 2 1)
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|get_lst_until_n| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|len_get_lst_after_n| 0
  (|len_get_lst_after_n-1| NIL 3805615894
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("" (SKOLEM 1 "lst")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "get_lst_after_n")
            (("" (LIFT-IF)
              (("" (SPLIT)
                (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (INST -1 "cdr(lst)")
                    (("2" (PROP)
                      (("1" (INST -1 "n-1")
                        (("1" (LIFT-IF)
                          (("1" (SPLIT)
                            (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                             ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|get_lst_after_n| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|nth_get_lst_after_n_TCC1| 0
  (|nth_get_lst_after_n_TCC1-1| NIL 3805626352 ("" (TCC))
   ((|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|nth_get_lst_after_n_TCC2| 0
  (|nth_get_lst_after_n_TCC2-1| NIL 3805626352
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "len_get_lst_until_n")
        (("" (INST? -1)
          (("" (LEMMA "len_get_lst_after_n")
            (("" (INST? -1) (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|len_get_lst_after_n| FORMULA-DECL NIL |list_theory| NIL)
    (|len_get_lst_until_n| FORMULA-DECL NIL |list_theory| NIL))
   SHOSTAK))
 (|nth_get_lst_after_n| 0
  (|nth_get_lst_after_n-1| NIL 3805626359
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("1" (SKOLEM 1 ("lst"))
      (("1" (PROP)
        (("1" (SKEEP)
          (("1" (NAME-REPLACE "lst4" "get_lst_after_n(lst, n)")
            (("1" (NAME-REPLACE "lst3" "get_lst_until_n(lst, n)")
              (("1" (EXPAND "nth" 1 2)
                (("1" (LIFT-IF)
                  (("1" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (CASE "lst3 = null")
                        (("1" (REPLACE -2)
                          (("1" (REPLACE -1)
                            (("1" (HIDE -1 -2)
                              (("1" (EXPAND "length" 1)
                                (("1" (EXPAND "nth" 1)
                                  (("1" (EXPAND "lst4")
                                    (("1" (CASE "n=0")
                                      (("1" (EXPAND "get_lst_after_n" 1)
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (REVEAL -1 -3)
                                        (("2" (EXPAND "get_lst_until_n" -2)
                                          (("2" (LIFT-IF)
                                            (("2" (HIDE -3)
                                              (("2" (ASSERT)
                                                (("2" (PROP)
                                                  (("2"
                                                    (EXPAND "get_lst_after_n"
                                                            -4)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -2 -4 2) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "lst4" 2)
                        (("2" (EXPAND "get_lst_after_n" 2)
                          (("2" (LIFT-IF)
                            (("2" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (PROP)
                                  (("1" (EXPAND "lst3" 1)
                                    (("1" (EXPAND "get_lst_until_n" 1)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "length" 1)
                                          (("1" (HIDE -2)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (HIDE -2)
                                      (("2" (HIDE 1 -2)
                                        (("2" (EXPAND ("lst3" "lst4"))
                                          (("2" (LEMMA "len_get_lst_after_n")
                                            (("2" (LEMMA "len_get_lst_until_n")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -1)
                                (("2" (FLATTEN)
                                  (("2" (EXPAND "lst3")
                                    (("2" (EXPAND "get_lst_until_n" 3)
                                      (("2" (LIFT-IF)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "length" 3)
                                            (("2" (REVEAL -1)
                                              (("2" (INST -1 "cdr(lst)")
                                                (("2" (PROP)
                                                  (("1" (INST -1 "i-1" "n-1")
                                                    (("1" (PROP)
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (HIDE 4)
                                                        (("2"
                                                          (EXPAND
                                                           "get_lst_until_n"
                                                           -1)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3" (HIDE 4)
                                                        (("3" (HIDE -1)
                                                          (("3" (EXPAND "lst4")
                                                            (("3"
                                                              (EXPAND
                                                               "get_lst_until_n"
                                                               -1)
                                                              (("3" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (GRIND) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (SKEEP)
          (("2" (LEMMA "len_get_lst_until_n")
            (("2" (INST? -1)
              (("2" (LEMMA "len_get_lst_after_n")
                (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP) (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|len_get_lst_until_n| FORMULA-DECL NIL |list_theory| NIL)
    (|len_get_lst_after_n| FORMULA-DECL NIL |list_theory| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|get_lst_until_n| DEF-DECL "list[T]" |list_theory| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|get_lst_after_n| DEF-DECL "list[T]" |list_theory| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   SHOSTAK))
 (|get_lst_after_n_append| 0
  (|get_lst_after_n_append-1| NIL 3805733653
   ("" (MEASURE-INDUCT "length(lst1)" "lst1")
    (("" (SKOLEM 1 "lst1")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "get_lst_after_n" 1)
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (EXPAND "append" 1) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (REWRITE "null_append") (("2" (GRIND) NIL NIL)) NIL)
                 ("3" (EXPAND "append" 3 1)
                  (("3" (LIFT-IF)
                    (("3" (PROP)
                      (("1" (GRIND) NIL NIL)
                       ("2" (ASSERT)
                        (("2" (INST -1 "cdr(lst1)")
                          (("2" (PROP)
                            (("1" (INST? -1) (("1" (GRIND) NIL NIL)) NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null_append| FORMULA-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|get_lst_after_n| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|split_cor| 0
  (|split_cor-1| NIL 3805572482
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("" (SKOLEM 1 ("lst"))
      (("" (PROP)
        (("" (SKEEP)
          (("" (LEMMA "equal_lst_nth")
            (("" (INST? -1)
              (("" (ASSERT)
                (("" (HIDE 2)
                  (("" (PROP)
                    (("1" (REWRITE "length_append")
                      (("1" (EXPAND "split" 1 1)
                        (("1" (EXPAND "split" 1 1)
                          (("1" (LEMMA "len_get_lst_after_n")
                            (("1" (HIDE -2)
                              (("1" (INST? -1)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "len_get_lst_until_n")
                                      (("1" (INST? -1)
                                        (("1" (REPLACE -1 1)
                                          (("1" (HIDE -1)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOLEM 1 "i")
                      (("2" (LEMMA "nth_append")
                        (("2" (EXPAND "split" 1 1)
                          (("2" (EXPAND "split" 1 1)
                            (("2" (INST? -1)
                              (("2" (PROP)
                                (("1" (LIFT-IF)
                                  (("1" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1" (REPLACE -2 1)
                                        (("1" (HIDE -3)
                                          (("1" (LEMMA "nth_get_lst_until_n")
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (REPLACE -1 2)
                                        (("2" (HIDE -1 -2)
                                          (("2" (LEMMA "nth_get_lst_after_n")
                                            (("2" (INST -1 "i" "lst" "n")
                                              (("2" (GRIND)
                                                (("2" (TYPEPRED "i")
                                                  (("2"
                                                    (REWRITE "length_append")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "i")
                                  (("2" (REWRITE "length_append")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|get_lst_after_n| DEF-DECL "list[T]" |list_theory| NIL)
    (|get_lst_until_n| DEF-DECL "list[T]" |list_theory| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nth_get_lst_after_n| FORMULA-DECL NIL |list_theory| NIL)
    (|nth_get_lst_until_n| FORMULA-DECL NIL |list_theory| NIL)
    (|nth_append| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|len_get_lst_until_n| FORMULA-DECL NIL |list_theory| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|len_get_lst_after_n| FORMULA-DECL NIL |list_theory| NIL)
    (|equal_lst_nth| FORMULA-DECL NIL |list_theory| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|split| CONST-DECL "[list[T], list[T]]" |list_theory| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|split_append| 0
  (|split_append-1| NIL 3805732598
   ("" (SKEEP)
    (("" (EXPAND "split" 1)
      (("" (PROP)
        (("1" (LEMMA "get_lst_until_n_append") (("1" (INST? -1) NIL NIL)) NIL)
         ("2" (LEMMA "get_lst_after_n_append") (("2" (INST? -1) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|split| CONST-DECL "[list[T], list[T]]" |list_theory| NIL)
    (|get_lst_after_n_append| FORMULA-DECL NIL |list_theory| NIL)
    (|get_lst_until_n_append| FORMULA-DECL NIL |list_theory| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|split_append_pair| 0
  (|split_append_pair-1| NIL 3807887700
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "append_pair" 1)
        (("1" (LEMMA "split_append")
          (("1" (INST? -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (EXPAND "append_pair" 1)
        (("2" (LEMMA "split_append")
          (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|split_append| FORMULA-DECL NIL |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|append_pair| CONST-DECL "list[T]" |list_theory| NIL))
   SHOSTAK))
 (|split_matrix_len| 0
  (|split_matrix_len-1| NIL 3807805875
   ("" (INDUCT "matrix") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
   ((|split| CONST-DECL "[list[T], list[T]]" |list_theory| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|split_matrix| DEF-DECL "[list[list[T]], list[list[T]]]" |list_theory|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|split_matrix_nth_TCC1| 0
  (|split_matrix_nth_TCC1-1| NIL 3807887388 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|split_matrix_nth| 0
  (|split_matrix_nth-1| NIL 3807887411
   ("" (INDUCT "matrix")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "split_matrix" 1)
            (("2" (EXPAND "nth" 1 1)
              (("2" (LIFT-IF)
                (("2" (PROP)
                  (("1" (GRIND) NIL NIL)
                   ("2" (EXPAND "nth" 2 2)
                    (("2" (ASSERT)
                      (("2" (INST? -1)
                        (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (LEMMA "split_matrix_len")
          (("3" (INST? -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|split_matrix_len| FORMULA-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|split_matrix| DEF-DECL "[list[list[T]], list[list[T]]]" |list_theory|
     NIL)
    (|split| CONST-DECL "[list[T], list[T]]" |list_theory| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|split_matrix_nth2_TCC1| 0
  (|split_matrix_nth2_TCC1-1| NIL 3807902504 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|split_matrix_nth2| 0
  (|split_matrix_nth2-1| NIL 3807902504
   ("" (INDUCT "matrix")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "split_matrix" 1)
            (("2" (EXPAND "nth" 1 1)
              (("2" (LIFT-IF)
                (("2" (PROP)
                  (("1" (GRIND) NIL NIL)
                   ("2" (EXPAND "nth" 2 2)
                    (("2" (ASSERT)
                      (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (LEMMA "split_matrix_len")
          (("3" (INST? -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|split_matrix_len| FORMULA-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|split_matrix| DEF-DECL "[list[list[T]], list[list[T]]]" |list_theory|
     NIL)
    (|split| CONST-DECL "[list[T], list[T]]" |list_theory| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|snd_proj_pareate| 0
  (|snd_proj_pareate-1| NIL 3805734405
   ("" (MEASURE-INDUCT "length(lst1)" "lst1")
    (("" (SKOLEM 1 "lst1")
      (("" (PROP)
        (("" (SKEEP)
          (("" (EXPAND "pareate" 1)
            (("" (LIFT-IF)
              (("" (SPLIT)
                (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (EXPAND "snd_proj" 3)
                    (("2" (INST -1 "cdr(lst1)")
                      (("2" (PROP)
                        (("1" (INST -1 "cdr(lst2)")
                          (("1" (PROP)
                            (("1" (REPLACE -1 3)
                              (("1" (ASSERT)
                                (("1" (LEMMA "list_cons_eta[T]")
                                  (("1" (INST -1 "lst2") NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pareate| DEF-DECL "list[[T, T]]" |list_theory| NIL)
    (|snd_proj| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|sum_ind| 0
  (|sum_ind-1| NIL 3808591657
   ("" (INDUCT "coef")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "sum" 1 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (ASSERT) NIL NIL)
                 ("2" (EXPAND "sum" 2 2)
                  (("2" (ASSERT)
                    (("2" (INST -1 "i-1" "n-1") (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|sum| DEF-DECL "nat" |list_theory| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|sum_ind2| 0
  (|sum_ind2-1| NIL 3808591896
   ("" (INDUCT "coef")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "sum" 1 2)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "nth" 2)
                  (("2" (ASSERT)
                    (("2" (EXPAND "sum" 2 1)
                      (("2" (INST? -1)
                        (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sum| DEF-DECL "nat" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|get_lst_mult_len| 0
  (|get_lst_mult_len-1| NIL 3808591645
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "get_lst_mult" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (REWRITE "length_append" 2)
                  (("2" (EXPAND "length" 2 3)
                    (("2" (EXPAND "length" 2 4)
                      (("2" (ASSERT)
                        (("2" (EXPAND "sum" 2)
                          (("2" (LIFT-IF)
                            (("2" (PROP)
                              (("1" (HIDE -2 1 2) (("1" (GRIND) NIL NIL)) NIL)
                               ("2" (HIDE 1)
                                (("2" (REWRITE "get_repeat_lst_len" 1)
                                  (("2" (ASSERT)
                                    (("2"
                                      (CASE
                                          "min(1 + length[T](tail), 1 + length[nat](cdr(coef))) - 1 = min(length(tail), length(cdr(coef)))")
                                      (("1" (REPLACE -1 1)
                                        (("1" (INST? -2) NIL NIL)) NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|get_repeat_lst_len| FORMULA-DECL NIL |list_theory| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|sum| DEF-DECL "nat" |list_theory| NIL)
    (|get_lst_mult| DEF-DECL "list[T]" |list_theory| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|get_lst_mult_count_increment| 0
  (|get_lst_mult_count_increment-1| NIL 3808603783
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (HIDE -1)
          (("2" (SKEEP)
            (("2" (PROP)
              (("1" (EXPAND "increment" 1 1)
                (("1" (LIFT-IF)
                  (("1" (ASSERT)
                    (("1" (PROP)
                      (("1" (GRIND) NIL NIL)
                       ("2" (EXPAND "get_lst_mult" 1 1)
                        (("2" (REWRITE "count_append")
                          (("2" (EXPAND "nth")
                            (("2" (ASSERT)
                              (("2" (LEMMA "get_repeat_lst_count")
                                (("2" (INST? -1)
                                  (("2" (ASSERT)
                                    (("2" (REPLACE -1 1)
                                      (("2" (EXPAND "get_lst_mult" 1 2)
                                        (("2" (REWRITE "count_append")
                                          (("2" (HIDE -1)
                                            (("2"
                                              (LEMMA "get_repeat_lst_count")
                                              (("2" (INST? -1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (EXPAND "nth" -1 1)
                        (("3" (ASSERT)
                          (("3" (EXPAND "get_lst_mult" 2 1)
                            (("3" (REWRITE "count_append")
                              (("3" (LEMMA "get_repeat_lst_count")
                                (("3" (INST? -1)
                                  (("3" (PROP)
                                    (("1" (REPLACE -2 2)
                                      (("1" (EXPAND "get_lst_mult" 2 2)
                                        (("1" (REWRITE "count_append")
                                          (("1" (REPLACE -2 2)
                                            (("1" (ASSERT)
                                              (("1" (REVEAL -2)
                                                (("1"
                                                  (INST -1 "cdr(coef)" "equal?"
                                                   "i-1" "inc" "x")
                                                  (("1" (ASSERT)
                                                    (("1" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REPLACE -1 3)
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "get_lst_mult" 3 2)
                                          (("2" (REWRITE "count_append" 3)
                                            (("2" (REPLACE -1 3)
                                              (("2" (REVEAL -2)
                                                (("2"
                                                  (INST -1 "cdr(coef)" "equal?"
                                                   "i-1" "inc" "x")
                                                  (("2" (ASSERT)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "nth" 1)
                (("2" (LIFT-IF)
                  (("2" (PROP)
                    (("1" (EXPAND "increment" 2 1)
                      (("1" (LIFT-IF)
                        (("1" (ASSERT)
                          (("1" (PROP)
                            (("1" (EXPAND "get_lst_mult" 2 1)
                              (("1" (REWRITE "count_append")
                                (("1" (LEMMA "get_repeat_lst_count")
                                  (("1" (INST? -1)
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -1 2)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "get_lst_mult" 2 2)
                                            (("1" (REWRITE "count_append")
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (LEMMA
                                                   "get_repeat_lst_count")
                                                  (("1" (INST? -1)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "increment" 3 1)
                      (("2" (LIFT-IF)
                        (("2" (ASSERT)
                          (("2" (PROP)
                            (("2" (EXPAND "get_lst_mult" 2 1)
                              (("2" (REWRITE "count_append")
                                (("2" (EXPAND "get_lst_mult" 2 2)
                                  (("2" (ASSERT)
                                    (("2" (REWRITE "count_append")
                                      (("2" (ASSERT)
                                        (("2" (REVEAL -1)
                                          (("2"
                                            (INST -1 "cdr(coef)" "equal?" "i-1"
                                             "inc" "x")
                                            (("2" (ASSERT)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|get_lst_mult| DEF-DECL "list[T]" |list_theory| NIL)
    (|increment| DEF-DECL "list[nat]" |list_theory| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|get_repeat_lst_count| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|count_append| FORMULA-DECL NIL |list_theory| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   SHOSTAK))
 (|get_lst_mult_count_append| 0
  (|get_lst_mult_count_append-1| NIL 3808658710
   ("" (INDUCT "lst1")
    (("1" (SKEEP)
      (("1" (EXPAND "append" 1)
        (("1" (ASSERT)
          (("1" (LIFT-IF)
            (("1" (PROP)
              (("1" (EXPAND "get_lst_mult" 1 3) (("1" (GRIND) NIL NIL)) NIL)
               ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (HIDE -1)
          (("2" (SKEEP)
            (("2" (EXPAND "append" 1)
              (("2" (LIFT-IF)
                (("2" (PROP)
                  (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (EXPAND "get_lst_mult" 2 1)
                    (("2" (REWRITE "count_append")
                      (("2" (REVEAL -1)
                        (("2"
                          (INST -1 "cdr(coef1)" "coef2" "equal?" "lst2" "x")
                          (("2" (PROP)
                            (("1" (REPLACE -1 2)
                              (("1" (HIDE -1)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "get_lst_mult" 2 2)
                                    (("1" (REWRITE "count_append") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL) NIL
    (|get_lst_mult| DEF-DECL "list[T]" |list_theory| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|count_append| FORMULA-DECL NIL |list_theory| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   SHOSTAK))
 (|remove_len| 0
  (|remove_len-1| NIL 3806760066
   ("" (INDUCT "lst")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("head" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "remove" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "length" 2)
                  (("2" (INST -1 "i-1")
                    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|gt_nth_remove_TCC1| 0
  (|gt_nth_remove_TCC1-1| NIL 3807099381
   ("" (SKEEP)
    (("" (LEMMA "remove_len") (("" (INST? -1) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|remove_len| FORMULA-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL))
 (|gt_nth_remove_TCC2| 0
  (|gt_nth_remove_TCC2-1| NIL 3807099381 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|gt_nth_remove| 0
  (|gt_nth_remove-1| NIL 3807099381
   ("" (INDUCT "lst")
    (("1" (SKEEP) (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "remove" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (HIDE -2 1) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (EXPAND "nth" 2 1)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (GRIND) NIL NIL)
                       ("2" (EXPAND "nth" 2 2)
                        (("2" (ASSERT)
                          (("2" (INST -1 "i-1" "n-1") (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (LEMMA "remove_len")
          (("4" (INST? -1) (("4" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|remove_len| FORMULA-DECL NIL |list_theory| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|gt_nth_remove2_TCC1| 0
  (|gt_nth_remove2_TCC1-1| NIL 3807099381
   ("" (SKEEP)
    (("" (LEMMA "remove_len") (("" (INST? -1) (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|remove_len| FORMULA-DECL NIL |list_theory| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL))
 (|gt_nth_remove2| 0
  (|gt_nth_remove2-1| NIL 3807104525
   ("" (INDUCT "lst")
    (("1" (SKEEP) (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "remove" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (EXPAND "nth" 1 2)
                  (("1" (LIFT-IF)
                    (("1" (PROP)
                      (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "nth" 2 1)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (HIDE -2 1) (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (EXPAND "nth" 2 2)
                        (("2" (LIFT-IF)
                          (("2" (PROP)
                            (("1" (HIDE -2 1) (("1" (GRIND) NIL NIL)) NIL)
                             ("2" (INST -1 "i-1" "n-1")
                              (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
                               ("3" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (LEMMA "remove_len")
            (("3" (INST? -1) (("3" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|remove_len| FORMULA-DECL NIL |list_theory| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|gt_remove_remove_TCC1| 0
  (|gt_remove_remove_TCC1-1| NIL 3807099381 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|gt_remove_remove| 0
  (|gt_remove_remove-1| NIL 3807105130
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("1" (SKOLEM 1 "lst")
      (("1" (PROP)
        (("1" (HIDE -1)
          (("1" (SKEEP)
            (("1" (EXPAND "remove" 1 2)
              (("1" (LIFT-IF)
                (("1" (PROP)
                  (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (EXPAND "remove" 1 3)
                    (("2" (LIFT-IF)
                      (("2" (ASSERT)
                        (("2" (EXPAND "remove" 1 2) (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "remove" 2 1)
                    (("3" (LIFT-IF)
                      (("3" (PROP)
                        (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)
                         ("2" (EXPAND "remove" 2 4)
                          (("2" (LIFT-IF)
                            (("2" (ASSERT)
                              (("2" (EXPAND "remove" 2 3)
                                (("2" (REVEAL -1)
                                  (("2" (INST -1 "cdr(lst)")
                                    (("2" (PROP)
                                      (("1" (INST -1 "i-1" "n-1")
                                        (("1" (ASSERT)
                                          (("1" (HIDE 3)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2) (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|remove_append_TCC1| 0
  (|remove_append_TCC1-1| NIL 3807517007 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|remove_append| 0
  (|remove_append-1| NIL 3807517008
   ("" (INDUCT "lst1")
    (("1" (SKEEP)
      (("1" (LIFT-IF)
        (("1" (PROP)
          (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (EXPAND "append" 2)
            (("2" (EXPAND "length" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (HIDE -1)
          (("2" (SKEEP)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (EXPAND "append" 1 1)
                  (("1" (EXPAND "remove" 1 1)
                    (("1" (LIFT-IF)
                      (("1" (SPLIT)
                        (("1" (FLATTEN)
                          (("1" (EXPAND "remove" 1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (EXPAND "remove" 2 2)
                            (("2" (ASSERT)
                              (("2" (EXPAND "append" 2 2)
                                (("2" (REVEAL -1)
                                  (("2" (INST -1 "i-1" "lst2")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "append" 2 1)
                  (("2" (EXPAND "remove" 2 1)
                    (("2" (ASSERT)
                      (("2" (LIFT-IF)
                        (("2" (PROP)
                          (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (EXPAND "append" 2 2)
                            (("2" (REVEAL -1)
                              (("2" (INST -1 "i-1" "lst2")
                                (("1" (LIFT-IF)
                                  (("1" (EXPAND "length" 3)
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -1 2)
                                        (("1" (EXPAND "length" 2 2)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|flatten_remove| 0
  (|flatten_remove-1| NIL 3807478749
   ("" (INDUCT "lst_of_lsts" 1)
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "nth" -3)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (REPLACE -1 1)
                  (("1" (EXPAND "remove" 1 2)
                    (("1" (EXPAND "flatten" 1 2)
                      (("1" (EXPAND "ind_flatten" 1)
                        (("1" (LIFT-IF)
                          (("1" (EXPAND "length" 1 1)
                            (("1" (ASSERT)
                              (("1" (ASSERT)
                                (("1" (EXPAND "flatten" 1 1)
                                  (("1" (HIDE -3)
                                    (("1" (LEMMA "remove_append")
                                      (("1" (INST -1 "j" "hd" "flatten(tail)")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (LIFT-IF)
                                              (("1" (SPLIT)
                                                (("1" (FLATTEN)
                                                  (("1" (SPLIT)
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (CASE "length(hd) = 1")
                                                        (("1"
                                                          (EXPAND "flatten" 1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (REWRITE
                                                               "append_null")
                                                              (("1"
                                                                (EXPAND
                                                                 "remove" 1)
                                                                (("1" (LIFT-IF)
                                                                  (("1" (PROP)
                                                                    (("1"
                                                                      (HIDE -4
                                                                       -7)
                                                                      (("1"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (HIDE -2 -5)
                                                        (("2"
                                                          (CASE
                                                              "length(hd) = 1")
                                                          (("1"
                                                            (EXPAND "remove" 2)
                                                            (("1" (LIFT-IF)
                                                              (("1" (SPLIT)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (HIDE 1)
                                                                    (("1"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2" (SPLIT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (CASE
                                                                            "cdr(hd) = null")
                                                                        (("1"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           -2)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (HIDE
                                                                               2)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -3)
                                                                                (("2"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 3)
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (EXPAND "flatten" 2 2)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -2)
                  (("2" (EXPAND "remove" 2 2)
                    (("2" (LIFT-IF)
                      (("2" (ASSERT)
                        (("2" (EXPAND "flatten" 2 2)
                          (("2" (EXPAND "flatten" 2 1)
                            (("2" (EXPAND "ind_flatten" 2)
                              (("2" (LEMMA "remove_append")
                                (("2" (INST? -1)
                                  (("2" (ASSERT)
                                    (("2" (REPLACE -1 2)
                                      (("2" (HIDE -1)
                                        (("2" (REVEAL -3)
                                          (("2" (INST -1 "i-1" "j")
                                            (("2" (EXPAND "length" -3)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|remove_append| FORMULA-DECL NIL |list_theory| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|append_null| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|remove| DEF-DECL "list[list[T]]" |list_theory| NIL)
    (|ind_flatten| DEF-DECL "nat" |list_theory| NIL)
    (|flatten| DEF-DECL "list[T]" |list_theory| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|count_remove| 0
  (|count_remove-1| NIL 3808596619
   ("" (MEASURE-INDUCT "length(lst)" "lst")
    (("" (SKOLEM 1 "lst")
      (("" (PROP)
        (("" (HIDE -1)
          (("" (SKEEP)
            (("" (PROP)
              (("1" (EXPAND "count" 1 1)
                (("1" (LIFT-IF)
                  (("1" (PROP)
                    (("1" (GRIND) NIL NIL)
                     ("2" (EXPAND "remove" 1)
                      (("2" (LIFT-IF)
                        (("2" (ASSERT)
                          (("2" (PROP)
                            (("2" (EXPAND "count" 2 2)
                              (("2" (REVEAL -1)
                                (("2" (INST -1 "cdr(lst)")
                                  (("2" (PROP)
                                    (("1" (INST -1 "equal?" "i-1" "x")
                                      (("1" (ASSERT)
                                        (("1" (PROP)
                                          (("1" (EXPAND "nth" -3)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (EXPAND "remove" 2)
                      (("3" (LIFT-IF)
                        (("3" (ASSERT)
                          (("3" (PROP)
                            (("1" (GRIND) NIL NIL)
                             ("2" (EXPAND "count" 2 2)
                              (("2" (REVEAL -1)
                                (("2" (INST -1 "cdr(lst)")
                                  (("2" (PROP)
                                    (("1" (INST -1 "equal?" "i-1" "x")
                                      (("1" (ASSERT)
                                        (("1" (PROP)
                                          (("1" (EXPAND "nth" -2)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "count" 2 1)
                (("2" (LIFT-IF)
                  (("2" (PROP)
                    (("1" (GRIND) NIL NIL)
                     ("2" (EXPAND "remove" 1)
                      (("2" (ASSERT)
                        (("2" (LIFT-IF)
                          (("2" (PROP)
                            (("1" (EXPAND "nth" 3) (("1" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (EXPAND "count" 2 2)
                              (("2" (REVEAL -1)
                                (("2" (INST -1 "cdr(lst)")
                                  (("2" (PROP)
                                    (("1" (INST? -1)
                                      (("1" (ASSERT)
                                        (("1" (PROP)
                                          (("1" (EXPAND "nth" 4)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (EXPAND "remove" 2 1)
                      (("3" (LIFT-IF)
                        (("3" (ASSERT)
                          (("3" (PROP)
                            (("3" (EXPAND "count" 2 2)
                              (("3" (REVEAL -1)
                                (("3" (INST -1 "cdr(lst)")
                                  (("3" (PROP)
                                    (("1" (INST -1 "equal?" "i-1" "x")
                                      (("1" (PROP)
                                        (("1" (EXPAND "nth" 5 1)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (GRIND) NIL NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|get_common_null| 0
  (|get_common_null-1| NIL 3808412191
   ("" (INDUCT "lst1")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "get_common" 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|get_common| DEF-DECL "list[T]" |list_theory| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|get_common_remove_nth| 0
  (|get_common_remove_nth-1| NIL 3808412255
   ("" (INDUCT "lst2")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (EXPAND "get_common" 2 1)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (EXPAND "get_common" 1 2)
                  (("1" (LIFT-IF)
                    (("1" (PROP)
                      (("1" (ASSERT)
                        (("1"
                          (CASE
                              "get_common(tail, remove(remove(lst1, n), pos?(hd, remove(lst1, n), equal?)`2),
                                 equal?) = get_common(tail, remove(lst1, pos?(hd, lst1, equal?)`2),
                                  equal?)")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE 2)
                            (("2" (HIDE -3 -5)
                              (("2"
                                (NAME-REPLACE "pos" "pos?(hd, lst1, equal?)`2")
                                (("2"
                                  (NAME-REPLACE "pos_rem"
                                   "pos?(hd, remove(lst1, n), equal?)`2")
                                  (("2" (REVEAL -3)
                                    (("2"
                                      (INST -1 "equal?" "remove(lst1, pos)"
                                       "_")
                                      (("2" (CASE "n > pos")
                                        (("1" (CASE "pos_rem = pos")
                                          (("1" (REPLACE -1 1)
                                            (("1" (INST -3 "n-1")
                                              (("1" (ASSERT)
                                                (("1" (PROP)
                                                  (("1"
                                                    (REWRITE
                                                     "gt_remove_remove")
                                                    NIL NIL)
                                                   ("2" (REWRITE "remove_len")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("3"
                                                    (REWRITE "gt_nth_remove2")
                                                    (("3" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -2 2 3)
                                            (("2" (EXPAND "pos" 1)
                                              (("2" (EXPAND "pos_rem")
                                                (("2"
                                                  (LEMMA "pos?_remove_ind_lt")
                                                  (("2" (INST? -1)
                                                    (("2" (ASSERT)
                                                      (("2" (EXPAND "pos" -2)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (CASE "n = pos")
                                          (("1" (HIDE -2 2)
                                            (("1" (LEMMA "pos?_cor")
                                              (("1" (INST? -1)
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "pos?" 2)
                                                    (("1" (PROP)
                                                      (("1" (REPLACE -2 1)
                                                        (("1" (EXPAND "pos" 1)
                                                          (("1"
                                                            (HIDE -2 -3 -4 -5 2
                                                             3)
                                                            (("1"
                                                              (TYPEPRED
                                                               "equal?")
                                                              (("1"
                                                                (EXPAND
                                                                 "equivalence?"
                                                                 -1)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "symmetric?"
                                                                     -2)
                                                                    (("1"
                                                                      (INST?
                                                                       -2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (CASE "n < pos")
                                            (("1" (HIDE 1 2)
                                              (("1" (CASE "pos_rem = pos -1")
                                                (("1" (REPLACE -1 1)
                                                  (("1" (INST -3 "n")
                                                    (("1" (ASSERT)
                                                      (("1" (PROP)
                                                        (("1"
                                                          (REWRITE
                                                           "gt_remove_remove"
                                                           :DIR RL)
                                                          (("1"
                                                            (EXPAND "pos" 1)
                                                            (("1"
                                                              (REWRITE
                                                               "pos?_len")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (REWRITE
                                                           "remove_len")
                                                          (("1"
                                                            (CASE
                                                                "pos < length(lst1)")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "pos" 1)
                                                              (("2"
                                                                (REWRITE
                                                                 "pos?_len")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "pos" 1)
                                                            (("2"
                                                              (REWRITE
                                                               "pos?_len")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3"
                                                          (REWRITE
                                                           "gt_nth_remove")
                                                          (("1" (HIDE 1)
                                                            (("1" (GRIND) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "pos" 1)
                                                            (("2"
                                                              (REWRITE
                                                               "pos?_len")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE -2 2 3)
                                                  (("2"
                                                    (LEMMA
                                                     "pos?_remove_ind_gt")
                                                    (("2" (EXPAND "pos")
                                                      (("2" (EXPAND "pos_rem")
                                                        (("2" (INST? -1)
                                                          (("2" (ASSERT)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -2 2 3)
                        (("2" (LEMMA "pos?_remove")
                          (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "get_common" 2 2)
                  (("2" (LIFT-IF)
                    (("2" (PROP)
                      (("1" (LEMMA "pos?_remove_nth")
                        (("1" (INST? -1)
                          (("1" (ASSERT)
                            (("1" (HIDE -3)
                              (("1" (HIDE 1 2)
                                (("1" (EXPAND "pos?" 1)
                                  (("1" (PROP)
                                    (("1" (HIDE -2 -3 2)
                                      (("1" (TYPEPRED "equal?")
                                        (("1" (EXPAND "equivalence?" -1)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "symmetric?" -2)
                                              (("1" (INST? -2)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (INST? -1)
                        (("2" (ASSERT)
                          (("2" (EXPAND "pos?" 4) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pos?_remove_nth| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_cor| FORMULA-DECL NIL |list_theory| NIL)
    (|symmetric?| CONST-DECL "bool" |relations| NIL)
    (|pos?_remove_ind_gt| FORMULA-DECL NIL |list_theory| NIL)
    (|gt_nth_remove| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_len| FORMULA-DECL NIL |list_theory| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gt_remove_remove| FORMULA-DECL NIL |list_theory| NIL)
    (|remove_len| FORMULA-DECL NIL |list_theory| NIL)
    (|gt_nth_remove2| FORMULA-DECL NIL |list_theory| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pos?_remove_ind_lt| FORMULA-DECL NIL |list_theory| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pos?_remove| FORMULA-DECL NIL |list_theory| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (|get_common| DEF-DECL "list[T]" |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|get_common_bool| 0
  (|get_common_bool-1| NIL 3808492684
   ("" (INDUCT "lst1")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKOLEM 1 ("hd" "tail"))
      (("3" (PROP)
        (("3" (SKEEP)
          (("3" (NAME-REPLACE "bool2" "pos?(x, lst2, equal?)`1")
            (("3" (NAME-REPLACE "bool1" "pos?(x, cons(hd, tail), equal?)`1")
              (("3"
                (NAME-REPLACE "bool12"
                 "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`1")
                (("3" (EXPAND "bool1")
                  (("3" (EXPAND "pos?" 1)
                    (("3" (LIFT-IF)
                      (("3" (SPLIT)
                        (("1" (FLATTEN)
                          (("1" (EXPAND "bool2")
                            (("1" (EXPAND "bool12")
                              (("1" (EXPAND "get_common" 1)
                                (("1" (LIFT-IF)
                                  (("1" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1" (LEMMA "pos?_equal")
                                        (("1"
                                          (INST -1 "equal?" "lst2" "hd" "x")
                                          (("1" (ASSERT)
                                            (("1" (PROP)
                                              (("1" (EXPAND "pos?" 1)
                                                (("1" (PROPAX) NIL NIL)) NIL)
                                               ("2" (HIDE -4 1)
                                                (("2" (TYPEPRED "equal?")
                                                  (("2"
                                                    (EXPAND "equivalence?" -1)
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (EXPAND "symmetric?"
                                                                -2)
                                                        (("2" (INST? -2)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (TYPEPRED "equal?")
                                                (("3"
                                                  (EXPAND "equivalence?" -1)
                                                  (("3" (FLATTEN)
                                                    (("3" (HIDE -4 -5 -7)
                                                      (("3"
                                                        (EXPAND "symmetric?"
                                                                -2)
                                                        (("3" (INST? -2)
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (LEMMA "pos?_equal")
                                        (("2" (INST? -1)
                                          (("2" (INST -1 "x")
                                            (("2" (ASSERT)
                                              (("2" (INST? -3)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (EXPAND "bool2")
                            (("2" (EXPAND "bool12")
                              (("2" (EXPAND "get_common" 2 1)
                                (("2" (LIFT-IF)
                                  (("2" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1" (EXPAND "pos?" 1 3)
                                        (("1" (LIFT-IF)
                                          (("1" (ASSERT)
                                            (("1" (PROP)
                                              (("1"
                                                (INST -4 "equal?" "lst2" "x")
                                                (("1" (ASSERT)
                                                  (("1" (REVEAL -1)
                                                    (("1"
                                                      (INST -1 "equal?"
                                                       "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                       "x")
                                                      (("1" (ASSERT)
                                                        (("1" (HIDE 2)
                                                          (("1"
                                                            (LEMMA
                                                             "pos?_remove_nth")
                                                            (("1" (INST? -1)
                                                              (("1" (PROP)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "pos?_cor")
                                                                    (("1"
                                                                      (INST?
                                                                       -1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (HIDE
                                                                           -3
                                                                           -6)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "equal?")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "equivalence?"
                                                                               -1)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "symmetric?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -2
                                                                                     "hd"
                                                                                     "_")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -2
                                                                                       "nth(lst2, pos?(hd, lst2, equal?)`2)")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "transitive?"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (INST
                                                                                             -3
                                                                                             "x"
                                                                                             "nth(lst2, pos?(hd, lst2, equal?)`2)"
                                                                                             "hd")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (REWRITE
                                                                   "pos?_len")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (INST -3 "equal?"
                                                 "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                 "x")
                                                (("2" (ASSERT) NIL NIL)) NIL)
                                               ("3"
                                                (INST -3 "equal?"
                                                 "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                 "x")
                                                (("3" (ASSERT)
                                                  (("3" (FLATTEN)
                                                    (("3" (HIDE -3 -1)
                                                      (("3"
                                                        (LEMMA "pos?_remove")
                                                        (("3"
                                                          (INST -1 "equal?"
                                                           "lst2"
                                                           "pos?(hd, lst2, equal?)`2"
                                                           "x")
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (INST -1 "equal?" "lst2" "x") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|get_common| DEF-DECL "list[T]" |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pos?_equal| FORMULA-DECL NIL |list_theory| NIL)
    (|symmetric?| CONST-DECL "bool" |relations| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|pos?_remove| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_remove_nth| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_cor| FORMULA-DECL NIL |list_theory| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|pos?_len| FORMULA-DECL NIL |list_theory| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL))
   SHOSTAK))
 (|get_common_remove| 0
  (|get_common_remove-1| NIL 3808504191
   ("" (INDUCT "lst1")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKOLEM 1 ("hd" "tail"))
      (("3" (PROP)
        (("3" (SKEEP)
          (("3"
            (NAME-REPLACE "ind12"
             "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`2")
            (("3" (NAME-REPLACE "ind1" "pos?(x, cons(hd, tail), equal?)`2")
              (("3" (NAME-REPLACE "ind2" "pos?(x, lst2, equal?)`2")
                (("3"
                  (NAME-REPLACE "bool12"
                   "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`1")
                  (("3" (EXPAND "get_common" 1 1)
                    (("3" (LIFT-IF)
                      (("3" (PROP)
                        (("1" (EXPAND "remove" 1 1)
                          (("1" (LIFT-IF)
                            (("1" (PROP)
                              (("1" (EXPAND "ind12")
                                (("1" (EXPAND "pos?" -1)
                                  (("1" (LIFT-IF)
                                    (("1" (ASSERT)
                                      (("1" (PROP)
                                        (("1" (EXPAND "bool12")
                                          (("1" (HIDE -2 -3 1)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (HIDE 1)
                                          (("2" (EXPAND "get_common" -1)
                                            (("2" (CASE "ind1 = 0")
                                              (("1" (EXPAND "remove" 1 2)
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "ind2")
                                                    (("1" (LEMMA "pos?_equal2")
                                                      (("1"
                                                        (INST -1 "equal?"
                                                         "lst2" "x" "hd")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "ind1")
                                                (("2" (EXPAND "pos?" 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "remove" 2 3)
                                (("2" (LIFT-IF)
                                  (("2" (PROP)
                                    (("1" (HIDE 1)
                                      (("1" (EXPAND "ind1" -1)
                                        (("1" (EXPAND "pos?" -1)
                                          (("1" (ASSERT)
                                            (("1" (LIFT-IF)
                                              (("1" (PROP)
                                                (("1" (EXPAND "ind12")
                                                  (("1" (EXPAND "get_common" 1)
                                                    (("1" (EXPAND "pos?" 1)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "get_common" 2 2)
                                      (("2" (LIFT-IF)
                                        (("2" (SPLIT)
                                          (("1" (FLATTEN)
                                            (("1"
                                              (CASE
                                                  "remove(get_common(tail, remove(lst2, pos?(hd, lst2, equal?)`2), equal?), ind12 - 1) = get_common(remove(tail, ind1 - 1), remove(remove(lst2, ind2), pos?(hd, remove(lst2, ind2), equal?)`2), equal?)")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE 2)
                                                (("2"
                                                  (NAME-REPLACE "ind_hd_lst2"
                                                   "pos?(hd, lst2, equal?)`2")
                                                  (("2"
                                                    (NAME-REPLACE
                                                     "ind_hd_remlst2"
                                                     "pos?(hd, remove(lst2, ind2), equal?)`2")
                                                    (("2"
                                                      (INST -3 "equal?"
                                                       "remove(lst2, ind_hd_lst2)"
                                                       "x")
                                                      (("2" (PROP)
                                                        (("1"
                                                          (CASE
                                                              "pos?(x, get_common(tail, remove(lst2, ind_hd_lst2), equal?), equal?)`2 = ind12 -1")
                                                          (("1" (REPLACE -1 -2)
                                                            (("1"
                                                              (CASE
                                                                  "pos?(x, tail, equal?)`2  = ind1 -1")
                                                              (("1"
                                                                (REPLACE -1 -3)
                                                                (("1"
                                                                  (CASE
                                                                      "remove(remove(lst2, ind_hd_lst2), pos?(x, remove(lst2, ind_hd_lst2), equal?)`2) = remove(remove(lst2, ind2), ind_hd_remlst2)")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (HIDE -1
                                                                       -2 -3)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "ind_hd_remlst2")
                                                                        (("2"
                                                                          (CASE
                                                                              "ind_hd_lst2 < ind2")
                                                                          (("1"
                                                                            (LEMMA
                                                                             "pos?_remove_ind_lt")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "equal?"
                                                                               "lst2"
                                                                               "ind2"
                                                                               "hd")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (PROP)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (REVEAL
                                                                                         -7)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "pos?_remove_ind_gt")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "equal?"
                                                                                               "lst2"
                                                                                               "ind_hd_lst2"
                                                                                               "x")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (PROP)
                                                                                                  (("1"
                                                                                                    (REVEAL
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -2
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (REWRITE
                                                                                                           "gt_remove_remove")
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "ind2"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (REWRITE
                                                                                                               "pos?_len")
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "bool12")
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "get_common_bool")
                                                                                                                  (("1"
                                                                                                                    (INST?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (EXPAND
                                                                                                     "bool12")
                                                                                                    (("2"
                                                                                                      (HIDE
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "get_common_bool")
                                                                                                        (("2"
                                                                                                          (INST?
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("3"
                                                                                                    (EXPAND
                                                                                                     "ind2")
                                                                                                    (("3"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (EXPAND
                                                                                       "ind_hd_lst2"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (CASE
                                                                                "ind_hd_lst2 = ind2")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (CASE
                                                                                    "pos?(x, remove(lst2, ind_hd_lst2), equal?)`2 = pos?(hd, remove(lst2, ind2), equal?)`2")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   3
                                                                                   2)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "ind_hd_lst2"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "ind2"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "pos?_cor2")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "equal?"
                                                                                             "lst2"
                                                                                             "x"
                                                                                             "hd")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (PROP)
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "pos?_equal2")
                                                                                                  (("1"
                                                                                                    (INST?
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (EXPAND
                                                                                                   "bool12")
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "get_common_bool")
                                                                                                    (("2"
                                                                                                      (INST?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (CASE
                                                                                  "ind_hd_lst2 > ind2")
                                                                              (("1"
                                                                                (HIDE
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "pos?_remove_ind_gt")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "equal?"
                                                                                     "lst2"
                                                                                     "ind2"
                                                                                     "hd")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (REVEAL
                                                                                           -7)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             -2)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -2
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "gt_remove_remove")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "ind_hd_lst2"
                                                                                                     "lst2"
                                                                                                     "ind2")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (PROP)
                                                                                                        (("1"
                                                                                                          (REPLACE
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "pos?(x, remove(lst2, ind_hd_lst2), equal?)`2 = ind2")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (HIDE
                                                                                                               2
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "ind2")
                                                                                                                (("2"
                                                                                                                  (LEMMA
                                                                                                                   "pos?_remove_ind_lt")
                                                                                                                  (("2"
                                                                                                                    (INST?
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (ASSERT)
                                                                                                                      (("2"
                                                                                                                        (ASSERT)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "bool12")
                                                                                                                          (("2"
                                                                                                                            (LEMMA
                                                                                                                             "get_common_bool")
                                                                                                                            (("2"
                                                                                                                              (INST?
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (EXPAND
                                                                                                           "ind_hd_lst2")
                                                                                                          (("2"
                                                                                                            (REWRITE
                                                                                                             "pos?_len")
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (HIDE -2 2)
                                                                (("2"
                                                                  (EXPAND
                                                                   "ind1" 1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "pos?" 1
                                                                     2)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "ind1"
                                                                       2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "pos?"
                                                                         2 1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (LIFT-IF)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (PROP)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "ind12" 1)
                                                            (("2"
                                                              (EXPAND
                                                               "get_common" 1
                                                               2)
                                                              (("2" (LIFT-IF)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (HIDE -1 2)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "pos?" 1
                                                                       2)
                                                                      (("2"
                                                                        (LIFT-IF)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "ind12"
                                                                           3)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "get_common"
                                                                             3)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "pos?"
                                                                               3
                                                                               1)
                                                                              (("2"
                                                                                (LIFT-IF)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (PROP)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "ind_hd_lst2")
                                                                                      (("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (EXPAND "bool12" -3)
                                                          (("2"
                                                            (EXPAND
                                                             "get_common" -3)
                                                            (("2" (LIFT-IF)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "pos?" -3 1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "ind12" 4)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "get_common"
                                                                       4)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "pos?"
                                                                         4 1)
                                                                        (("2"
                                                                          (LIFT-IF)
                                                                          (("2"
                                                                            (PROP)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "ind_hd_lst2"
                                                                               4)
                                                                              (("2"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (ASSERT) NIL NIL)
                                               ("4" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (HIDE -2 2)
                                              (("2" (LEMMA "pos?_remove_nth")
                                                (("2" (INST? -1)
                                                  (("2" (PROP)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "ind2")
                                                        (("1"
                                                          (LEMMA "pos?_cor")
                                                          (("1" (INST? -1)
                                                            (("1" (PROP)
                                                              (("1"
                                                                (EXPAND "ind1"
                                                                        2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "pos?" 2)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (LIFT-IF)
                                                                      (("1"
                                                                        (PROP)
                                                                        (("1"
                                                                          (HIDE
                                                                           2)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "equal?")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "equivalence?"
                                                                               -1)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "symmetric?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -2
                                                                                     "hd"
                                                                                     "nth(lst2, pos?(x, lst2, equal?)`2)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "transitive?"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -3
                                                                                           "x"
                                                                                           "nth(lst2, pos?(x, lst2, equal?)`2)"
                                                                                           "hd")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (EXPAND
                                                                 "bool12")
                                                                (("2"
                                                                  (LEMMA
                                                                   "get_common_bool")
                                                                  (("2"
                                                                    (INST? -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (LEMMA "pos?_len")
                                                      (("2" (EXPAND "ind2")
                                                        (("2" (INST? -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "bool12")
                                                              (("2"
                                                                (LEMMA
                                                                 "get_common_bool")
                                                                (("2"
                                                                  (INST? -1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "remove" 2 2)
                          (("2" (LIFT-IF)
                            (("2" (PROP)
                              (("1" (EXPAND "ind1")
                                (("1" (EXPAND "pos?" -1)
                                  (("1" (ASSERT)
                                    (("1" (LIFT-IF)
                                      (("1" (PROP)
                                        (("1" (EXPAND "bool12")
                                          (("1" (HIDE -2 1)
                                            (("1" (LEMMA "get_common_bool")
                                              (("1" (INST? -1)
                                                (("1" (ASSERT)
                                                  (("1" (ASSERT)
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (LEMMA "pos?_equal")
                                                        (("1"
                                                          (INST -1 "equal?"
                                                           "lst2" "x" "hd")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "get_common" 2 2)
                                (("2" (LIFT-IF)
                                  (("2" (PROP)
                                    (("1" (LEMMA "pos?_remove")
                                      (("1" (INST? -1) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (INST -1 "equal?" "lst2" "x")
                                      (("2" (PROP)
                                        (("1"
                                          (CASE
                                              "pos?(x, get_common(tail, lst2, equal?), equal?)`2 = ind12")
                                          (("1" (REPLACE -1 -2)
                                            (("1"
                                              (CASE
                                                  "pos?(x, tail, equal?)`2 = ind1 - 1")
                                              (("1" (REPLACE -1 -3)
                                                (("1" (EXPAND "ind2" 2)
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "ind1" 1)
                                                (("2" (EXPAND "pos?" 1 2)
                                                  (("2" (LIFT-IF)
                                                    (("2" (EXPAND "ind1" 4)
                                                      (("2" (EXPAND "pos?" 4)
                                                        (("2" (ASSERT)
                                                          (("2" (LIFT-IF)
                                                            (("2" (ASSERT)
                                                              (("2" (PROP) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "ind12" 1)
                                            (("2" (EXPAND "get_common" 1 2)
                                              (("2" (LIFT-IF)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "bool12")
                                          (("2" (EXPAND "get_common" -1)
                                            (("2" (LIFT-IF)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|remove| DEF-DECL "list[T]" |list_theory| NIL)
    (|get_common| DEF-DECL "list[T]" |list_theory| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pos?_remove_nth| FORMULA-DECL NIL |list_theory| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|symmetric?| CONST-DECL "bool" |relations| NIL)
    (|pos?_cor| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_cor2| FORMULA-DECL NIL |list_theory| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|pos?_remove_ind_lt| FORMULA-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pos?_remove_ind_gt| FORMULA-DECL NIL |list_theory| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|get_common_bool| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_len| FORMULA-DECL NIL |list_theory| NIL)
    (|gt_remove_remove| FORMULA-DECL NIL |list_theory| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pos?_equal2| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_remove| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_equal| FORMULA-DECL NIL |list_theory| NIL))
   SHOSTAK))
 (|same_count?_get_lst_mul| 0
  (|same_count?_get_lst_mul-1| NIL 3808601717
   ("" (INDUCT "lst2")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKOLEM 1 ("hd" "tail"))
      (("3" (PROP)
        (("3" (SKEEP)
          (("3" (EXPAND "same_count?" 1)
            (("3" (SKEEP)
              (("3" (EXPAND "count_elem" 1 1)
                (("3" (LIFT-IF)
                  (("3" (PROP)
                    (("1" (HIDE -2)
                      (("1" (EXPAND "count_elem" 1 2)
                        (("1" (ASSERT)
                          (("1"
                            (NAME-REPLACE "ind_hd" "pos?(hd, lst1, equal?)`2")
                            (("1" (REVEAL -2)
                              (("1"
                                (INST -1 "increment(coef, ind_hd, 1)" "equal?"
                                 "lst1")
                                (("1" (PROP)
                                  (("1" (EXPAND "same_count?" -1)
                                    (("1" (INST -1 "x")
                                      (("1" (REPLACE -1 1 RL)
                                        (("1" (HIDE -1)
                                          (("1" (REWRITE "count_append")
                                            (("1" (REWRITE "count_append")
                                              (("1" (EXPAND "count" 1 1)
                                                (("1" (LIFT-IF)
                                                  (("1" (PROP)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "get_lst_mult_count_increment")
                                                        (("1"
                                                          (INST -1 "coef"
                                                           "equal?" "ind_hd"
                                                           "1" "lst1" "x")
                                                          (("1" (PROP)
                                                            (("1"
                                                              (REPLACE -2 1)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (HIDE -1 2)
                                                              (("2"
                                                                (EXPAND
                                                                 "ind_hd")
                                                                (("2"
                                                                  (LEMMA
                                                                   "pos?_cor")
                                                                  (("2"
                                                                    (INST? -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "equal?")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "equivalence?"
                                                                           -1)
                                                                          (("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (HIDE
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "transitive?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "x"
                                                                                   "hd"
                                                                                   "nth(lst1, pos?(hd, lst1, equal?)`2)")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3"
                                                              (EXPAND "ind_hd"
                                                                      1)
                                                              (("3"
                                                                (LEMMA
                                                                 "pos?_len")
                                                                (("3"
                                                                  (INST? -1)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("4"
                                                              (EXPAND "ind_hd"
                                                                      1)
                                                              (("4"
                                                                (LEMMA
                                                                 "pos?_len")
                                                                (("4"
                                                                  (INST? -1)
                                                                  (("4"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (LEMMA
                                                       "get_lst_mult_count_increment")
                                                      (("2"
                                                        (INST -1 "coef"
                                                         "equal?" "ind_hd" "1"
                                                         "lst1" "x")
                                                        (("2" (PROP)
                                                          (("1" (HIDE -2)
                                                            (("1" (HIDE 2)
                                                              (("1"
                                                                (LEMMA
                                                                 "pos?_cor")
                                                                (("1"
                                                                  (INST? -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (TYPEPRED
                                                                       "equal?")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "equivalence?"
                                                                         -1)
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "symmetric?"
                                                                             -2)
                                                                            (("1"
                                                                              (REVEAL
                                                                               -6)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1
                                                                                 -5)
                                                                                (("1"
                                                                                  (INST
                                                                                   -3
                                                                                   "hd"
                                                                                   "nth(lst1, ind_hd)")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "transitive?"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -4
                                                                                         "x"
                                                                                         "nth(lst1, ind_hd)"
                                                                                         "hd")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (REPLACE -1 3)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("3"
                                                            (EXPAND "ind_hd")
                                                            (("3"
                                                              (LEMMA
                                                               "pos?_len")
                                                              (("3" (INST? -1)
                                                                (("3" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("4"
                                                            (EXPAND "ind_hd" 1)
                                                            (("4"
                                                              (LEMMA
                                                               "pos?_len")
                                                              (("4" (INST? -1)
                                                                (("4" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REWRITE "increment_len") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "count_elem" 2 2)
                      (("2" (ASSERT)
                        (("2"
                          (INST -1 "append(coef, cons[nat](1, null))" "equal?"
                           "append(lst1, cons(hd, null))")
                          (("2" (PROP)
                            (("1" (EXPAND "same_count?" -1)
                              (("1" (INST -1 "x")
                                (("1" (REPLACE -1 2 RL)
                                  (("1" (HIDE -1)
                                    (("1" (REWRITE "count_append")
                                      (("1" (REWRITE "count_append")
                                        (("1" (EXPAND "count" 2 1)
                                          (("1" (LIFT-IF)
                                            (("1" (PROP)
                                              (("1" (ASSERT)
                                                (("1"
                                                  (LEMMA
                                                   "get_lst_mult_count_append")
                                                  (("1" (INST? -1)
                                                    (("1" (ASSERT)
                                                      (("1" (REPLACE -1 1)
                                                        (("1" (HIDE -1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND
                                                               "get_lst_mult"
                                                               1)
                                                              (("1"
                                                                (REWRITE
                                                                 "count_append")
                                                                (("1"
                                                                  (EXPAND
                                                                   "get_lst_mult"
                                                                   1 1)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "count" 1
                                                                     2)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "get_repeat_lst_count")
                                                                      (("1"
                                                                        (INST?
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA
                                                 "get_lst_mult_count_append")
                                                (("2" (INST? -1)
                                                  (("2" (ASSERT)
                                                    (("2" (REPLACE -1 2)
                                                      (("2" (HIDE -1)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND
                                                             "get_lst_mult" 2)
                                                            (("2"
                                                              (REWRITE
                                                               "count_append")
                                                              (("2"
                                                                (LEMMA
                                                                 "get_repeat_lst_count")
                                                                (("2"
                                                                  (INST? -1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 3)
                              (("2" (REWRITE "length_append")
                                (("2" (REWRITE "length_append")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|equivalence?| CONST-DECL "bool" |relations| NIL)
    (|equiv| TYPE-EQ-DECL NIL |list_theory| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|same_count?| CONST-DECL "bool" |list_theory| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|get_lst_mult| DEF-DECL "list[T]" |list_theory| NIL)
    (|count_elem| DEF-DECL "[list[T], list[nat]]" |list_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |list_theory| NIL)
    (|pos?| DEF-DECL "[bool, nat]" |list_theory| NIL)
    (|increment| DEF-DECL "list[nat]" |list_theory| NIL)
    (|increment_len| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|count_append| FORMULA-DECL NIL |list_theory| NIL)
    (|count| DEF-DECL "nat" |list_theory| NIL)
    (|get_lst_mult_count_increment| FORMULA-DECL NIL |list_theory| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ind_hd| SKOLEM-CONST-DECL "nat" |list_theory| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|pos?_cor| FORMULA-DECL NIL |list_theory| NIL)
    (|pos?_len| FORMULA-DECL NIL |list_theory| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|symmetric?| CONST-DECL "bool" |relations| NIL)
    (|get_repeat_lst| DEF-DECL "list[T]" |list_theory| NIL)
    (|get_repeat_lst_count| FORMULA-DECL NIL |list_theory| NIL)
    (|get_lst_mult_count_append| FORMULA-DECL NIL |list_theory| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL))
   SHOSTAK)))
(|map_theory|
 (|map_append| 0
  (|map_append-1| NIL 3807643644
   ("" (INDUCT "l1")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("hd" "tail"))
      (("2" (PROP)
        (("2" (SKEEP)
          (("2" (ASSERT)
            (("2" (EXPAND "append" 1 1)
              (("2" (EXPAND "map" 1 1)
                (("2" (EXPAND "map" 1 2)
                  (("2" (EXPAND "append" 1 2)
                    (("2" (INST -1 "f" "l2") (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((T1 FORMAL-TYPE-DECL NIL |map_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (T2 FORMAL-TYPE-DECL NIL |map_theory| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|map_append2| 0
  (|map_append2-1| NIL 3807736141
   ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
   ((T1 FORMAL-TYPE-DECL NIL |map_theory| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (T2 FORMAL-TYPE-DECL NIL |map_theory| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK)))

