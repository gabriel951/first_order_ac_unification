(unification
 (member_TCC1 0
  (member_TCC1-1 nil 3827268617 ("" (subtype-tcc) nil nil) nil nil
   (member subtype "unification.unif_prb"
     "(list_adt[unif_pair].cons?)")))
 (member_TCC2 0
  (member_TCC2-1 nil 3827268617 ("" (termination-tcc) nil nil) nil nil
   (member termination
           "unification.member(unification.t, list_adt[unif_pair].cdr(unification.unif_prb))"
     "nil")))
 (member_TCC3 0
  (member_TCC3-1 nil 3827268617 ("" (subtype-tcc) nil nil) nil nil
   (member subtype "unification.unif_prb"
     "(list_adt[unif_pair].cons?)")))
 (member_TCC4 0
  (member_TCC4-1 nil 3827268617 ("" (subtype-tcc) nil nil) nil nil
   (member subtype "unification.lst_unif_prb"
     "(list_adt[unification.unif_prb].cons?)")))
 (member_TCC5 0
  (member_TCC5-1 nil 3827268617 ("" (termination-tcc) nil nil) nil nil
   (member termination
           "unification.member(unification.t, list_adt[unification.unif_prb].cdr(unification.lst_unif_prb))"
     "nil")))
 (member_TCC6 0
  (member_TCC6-1 nil 3827268617 ("" (subtype-tcc) nil nil) nil nil
   (member subtype "unification.lst_unif_prb"
     "(list_adt[unification.unif_prb].cons?)")))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3823281024 ("" (termination-tcc) nil nil) nil nil
   (vars termination
    "unification.vars(list_adt[unif_pair].cdr(unification.unif_prb))"
    "nil")))
 (subterms_TCC1 0
  (subterms_TCC2-1 nil 3825711568 ("" (termination-tcc) nil nil) nil
   nil
   (subterms termination
    "unification.subterms(list_adt[unification.unif_prb].cdr(unification.lst_unif_prb))"
    "nil")))
 (vars_unif_prb 0
  (vars_unif_prb-1 nil 3827693007
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars" -1)
              (("1" (expand "union" -1)
                (("1" (expand "member" -1 1)
                  (("1" (prop)
                    (("1" (expand "vars" -1)
                      (("1" (expand "member" -1)
                        (("1" (expand "union" -1)
                          (("1" (prop)
                            (("1" (inst 1 "hd`1")
                              (("1" (grind) nil nil)) nil)
                             ("2" (inst 1 "hd`2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "t") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (inst -3 "X")
                    (("3" (assert)
                      (("3" (flatten)
                        (("3" (hide -3)
                          (("3" (prop)
                            (("1" (expand "member" 3)
                              (("1"
                                (expand "vars" 3)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (inst 1 "t") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_unif_prb_equiv 0
  (member_unif_prb_equiv-1 nil 3827331147
   ("" (induct "unif_prb")
    (("1" (skeep)
      (("1" (prop)
        (("1" (hide 1) (("1" (grind) nil nil)) nil)
         ("2" (skolem -1 "unif_pair1")
          (("2" (hide 1)
            (("2" (flatten)
              (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (split)
                (("1" (hide -2)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst -2 "t")
                    (("2" (assert)
                      (("2" (skolem -2 "unif_pair1")
                        (("2" (inst 3 "unif_pair1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "unif_pair1")
              (("2" (flatten)
                (("2" (expand "member" -2)
                  (("2" (split -2)
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)
                     ("2" (inst -3 "t")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (split -3)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "unif_pair1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (member_unif_prb_append 0
  (member_unif_prb_append-1 nil 3828518065
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_lst_unif_prb_equiv 0
  (member_lst_unif_prb_equiv-1 nil 3827436365
   ("" (induct "lst_unif_prb")
    (("1" (skeep)
      (("1" (prop)
        (("1" (hide 1) (("1" (grind) nil nil)) nil)
         ("2" (skolem -1 "unif_prb1")
          (("2" (flatten)
            (("2" (hide-all-but -2) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (prop)
                (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                 ("2" (inst -2 "t")
                  (("2" (assert)
                    (("2" (skolem -2 "unif_prb1")
                      (("2" (inst 1 "unif_prb1")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "unif_prb1")
              (("2" (prop)
                (("2" (expand "member" -2)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "t")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "unif_prb1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (size_app_unif_prb 0
  (size_app_unif_prb-1 nil 3824128807
   ("" (induct "unif_prb1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (size def-decl "nat" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subterms_mem 0
  (subterms_mem-1 nil 3823963076
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "subterms" 1 1)
            (("2" (expand "member" 1 1)
              (("2" (expand "union" 1 1)
                (("2" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "t")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "unif_pair!1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skolem -1 "unif_pair1")
                    (("3" (flatten)
                      (("3" (expand "member" -2)
                        (("3" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst -3 "t")
                            (("2" (assert)
                              (("2"
                                (inst 3 "unif_pair1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (member def-decl "bool" list_props nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subterms_mem_unif_prb 0
  (subterms_mem_unif_prb-1 nil 3830009261
   ("" (skolem 1 ("s" "unif_prb1"))
    (("" (lemma "subterms_mem")
      (("" (prop)
        (("1" (inst -2 "s" "unif_prb1")
          (("1" (assert)
            (("1" (skolem -2 "unif_pair1")
              (("1" (prop)
                (("1" (expand "subterms" -2)
                  (("1" (expand "member" -2)
                    (("1" (expand "union" -2)
                      (("1" (prop)
                        (("1" (inst 1 "unif_pair1`1")
                          (("1" (prop)
                            (("1" (lemma "member_unif_prb_equiv")
                              (("1"
                                (inst -1 "unif_pair1`1" "unif_prb1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst 1 "unif_pair1`2")
                          (("2" (prop)
                            (("2" (lemma "member_unif_prb_equiv")
                              (("2"
                                (inst -1 "unif_pair1`2" "unif_prb1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem -1 "t")
          (("2" (prop)
            (("2" (inst -3 "s" "unif_prb1")
              (("2" (assert)
                (("2" (hide 1)
                  (("2" (lemma "member_unif_prb_equiv")
                    (("2" (inst? -1)
                      (("2" (assert)
                        (("2" (skeep) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterms_mem formula-decl nil unification nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (subterms const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     unification nil)
    (union const-decl "set" sets nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (member const-decl "bool" sets nil))
   shostak))
 (unifies?_append 0
  (unifies?_append-1 nil 3805641015
   ("" (measure-induct "length(unif_prb1)" "unif_prb1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "unifies?" 1 2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (lemma "list_cons_eta[unif_pair]")
                    (("2" (inst? -1)
                      (("1" (expand "append" 2 1)
                        (("1" (assert)
                          (("1" (expand "unifies?" 2 1)
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "cdr(lst1)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "sigma" "unif_prb2")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unifies? def-decl "bool" unification nil)
    (append def-decl "list[T]" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   SHOSTAK))
 (unifies?_pareate 0
  (unifies?_pareate-1 nil 3807735593
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "pareate" -2)
        (("1" (case "args2 = null")
          (("1" (grind) nil nil)
           ("2" (hide 2 -2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
                 ("2" (expand "unifies?" -1)
                  (("2" (flatten)
                    (("2" (expand "length" -4 2)
                      (("2" (assert)
                        (("2" (expand "subs" 2 2)
                          (("2" (expand "subs" 2 1)
                            (("2" (expand "equal?" 2)
                              (("2"
                                (expand "length" -4 1)
                                (("2"
                                  (inst? -3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unifies? const-decl "bool" unification nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (subs def-decl "args" substitution nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (unifies? def-decl "bool" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (apply_sub_mem 0
  (apply_sub_mem-1 nil 3827693738
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "apply_sub" -1)
              (("1" (expand "member" -1)
                (("1" (prop)
                  (("1" (expand "apply_sub" -1)
                    (("1" (inst 1 "hd`1") (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (expand "apply_sub" -1)
                    (("2" (inst 1 "hd`2") (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (inst -2 "sigma" "t")
                    (("3" (assert)
                      (("3" (skeep)
                        (("3" (inst 3 "s") (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (expand "apply_sub" 1)
                    (("1" (expand "member" 1)
                      (("1" (prop)
                        (("1" (expand "apply_sub" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "apply_sub" 1)
                    (("2" (expand "member" 1)
                      (("2" (prop)
                        (("2" (expand "apply_sub" 2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst -3 "sigma" "t")
                    (("3" (assert)
                      (("3" (flatten)
                        (("3" (hide -3)
                          (("3" (prop)
                            (("1" (expand "apply_sub" 3)
                              (("1"
                                (expand "member" 3)
                                (("1" (prop) nil nil))
                                nil))
                              nil)
                             ("2" (inst 1 "s") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_null 0
  (apply_sub_null-1 nil 3828517939
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "apply_sub" 1)
        (("2" (replace -1)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "subs" 1)
              (("2" (assert)
                (("2" (grind)
                  (("2" (case "cons1_var = (cons1_var`1, cons1_var`2)")
                    (("1" (replace -1 :dir rl) (("1" (propax) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_sub_append 0
  (apply_sub_sub_append-1 nil 3828518211
   ("" (measure-induct "length(unif_prb)" "unif_prb")
    (("" (skolem 1 "unif_prb1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "apply_sub" 1 2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "apply_sub" 2 1)
                  (("2" (expand "apply_sub" 2 5)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2"
                          (case "apply_sub(sigma, apply_sub(sigma1, car(unif_prb1))) = apply_sub(append(sigma, sigma1), car(unif_prb1))")
                          (("1" (inst -2 "cdr(unif_prb1)")
                            (("1" (prop)
                              (("1"
                                (inst? -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3)
                            (("2" (expand "apply_sub" 1 2)
                              (("2"
                                (expand "apply_sub" 1 1)
                                (("2"
                                  (expand "apply_sub" 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (rewrite "subs_append2")
                                      nil
                                      nil)
                                     ("2"
                                      (rewrite "subs_append2")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (subs_append2 formula-decl nil substitution nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (apply_sub_len 0
  (apply_sub_len-1 nil 3825711568
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "length" 1) (("2" (inst -1 "sigma") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_first_proj 0
  (apply_sub_first_proj-1 nil 3825711776
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" 1)
            (("2" (expand "first_proj" 1)
              (("2" (expand "subs" 1)
                (("2" (inst? -1)
                  (("2" (assert)
                    (("2" (replace -1 1)
                      (("2" (expand "apply_sub" 1 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (subs def-decl "args" substitution nil)
    (args type-eq-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_sec_proj 0
  (apply_sub_sec_proj-1 nil 3825712010
   ("" (induct "unif_prb")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst? -1)
            (("2" (expand "sec_proj" 1 1)
              (("2" (expand "subs" 1)
                (("2" (expand "apply_sub" 1)
                  (("2" (expand "sec_proj" 1 2)
                    (("2" (replace -1 1)
                      (("2" (expand "apply_sub" 1 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub const-decl "unif_pair" unification nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (subs def-decl "args" substitution nil)
    (args type-eq-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (list type-decl nil list_adt nil))
   shostak))
 (apply_sub_elim_var_unif_pair 0
  (apply_sub_elim_var_unif_pair-1 nil 3823281928
   ("" (skeep)
    (("" (expand "apply_sub" -2)
      (("" (expand "vars" -2)
        (("" (expand "member" -2)
          (("" (expand "union" -2)
            (("" (prop)
              (("1" (rewrite "apply_sub_elim_var_t") nil nil)
               ("2" (rewrite "apply_sub_elim_var_t") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars const-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (list type-decl nil list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (member const-decl "bool" sets nil)
    (apply_sub const-decl "unif_pair" unification nil))
   shostak))
 (apply_sub_elim_var 0
  (apply_sub_elim_var-1 nil 3823281548
   ("" (induct "unif_prb")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "apply_sub" -3)
            (("2" (expand "vars" -3)
              (("2" (expand "member" -3)
                (("2" (expand "union" -3)
                  (("2" (prop)
                    (("1" (hide -2)
                      (("1" (lemma "apply_sub_elim_var_unif_pair")
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X" "sigma")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (img const-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (vars def-decl "finite_set[variable]" unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (apply_sub_elim_var_unif_pair formula-decl nil unification nil)
    (union const-decl "set" sets nil))
   shostak)))

