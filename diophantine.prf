(diophantine
 (lcm_TCC1 0
  (lcm_TCC1-1 nil 3803482194
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?" -1)
        (("" (inst -1 "a1 * a2")
          (("" (expand "member")
            (("" (typepred "a1")
              (("" (typepred "a2")
                (("" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "divides" 1)
                    (("2" (inst 1 "a1") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (divides const-decl "bool" divides nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   SHOSTAK
   (lcm subtype
        "{k: integers.posnat | booleans.AND(divides.divides(diophantine.a1, k), divides.divides(diophantine.a2, k))}"
        "(sets[posnat].nonempty?)")))
 (get_new_value_lst_TCC1 0
  (get_new_value_lst_TCC1-1 nil 3803892545 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (get_new_value_lst subtype "diophantine.y" "nat")))
 (get_new_value_lst_TCC2 0
  (get_new_value_lst_TCC2-1 nil 3803892545 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get_new_value_lst subtype "diophantine.value_lst"
    "(list_adt[nat].cons?)")))
 (get_new_value_lst_TCC3 0
  (get_new_value_lst_TCC3-1 nil 3803927799 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get_new_value_lst termination
    "diophantine.get_new_value_lst(diophantine.k, diophantine.a1, list_adt[nat].cdr(diophantine.value_lst))"
    "nil")))
 (get_new_value_lst_TCC4 0
  (get_new_value_lst_TCC4-1 nil 3803927799 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get_new_value_lst subtype "diophantine.value_lst"
    "(list_adt[nat].cons?)")))
 (get_new_value_lst_TCC5 0
  (get_new_value_lst_TCC5-1 nil 3803927799 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get_new_value_lst termination
    "diophantine.get_new_value_lst(diophantine.k, diophantine.a1, list_adt[nat].cdr(diophantine.value_lst))"
    "nil")))
 (get_new_value_lst_TCC6 0
  (get_new_value_lst_TCC6-1 nil 3803927799 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (get_new_value_lst subtype "diophantine.value_lst"
    "(list_adt[nat].cons?)")))
 (get_lst_dio_matrix_TCC1 0
  (get_lst_dio_matrix_TCC1-1 nil 3803893135 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_lst_dio_matrix subtype "diophantine.lst_dio_matrix"
    "(list_adt[dio_matrix].cons?)")))
 (get_lst_dio_matrix_TCC2 0
  (get_lst_dio_matrix_TCC2-1 nil 3803920303 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_lst_dio_matrix termination
    "diophantine.get_lst_dio_matrix(list_adt[nat].cdr(diophantine.value_lst), list_adt[dio_matrix].cdr(diophantine.lst_dio_matrix))"
    "nil")))
 (find_vectors_TCC1 0
  (find_vectors_TCC1-1 nil 3803482194 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (divides const-decl "bool" divides nil)
    (every adt-def-decl "boolean" list_adt nil))
   SHOSTAK (find_vectors subtype "diophantine.line1" "list[nat]")))
 (find_vectors_TCC2 0
  (find_vectors_TCC2-1 nil 3803482194 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK
   (find_vectors subtype "diophantine.mult_t"
    "(list_adt[posnat].cons?)")))
 (find_vectors_TCC3 0
  (find_vectors_TCC3-1 nil 3803482194
   ("" (skeep) (("" (skeep) (("" (grind) nil nil)) nil)) nil) nil
   SHOSTAK
   (find_vectors subtype "diophantine.mult_t"
    "(list_adt[posnat].cons?)")))
 (find_vectors_TCC4 0
  (find_vectors_TCC4-1 nil 3803482194
   ("" (skeep) (("" (skeep) (("" (grind) nil nil)) nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (length def-decl "nat" list_props nil))
   SHOSTAK
   (find_vectors termination
    "diophantine.find_vectors(list_adt[posnat].cdr(diophantine.mult_t))"
    "nil")))
 (find_vectors_TCC5 0
  (find_vectors_TCC5-1 nil 3803482194 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK
   (find_vectors subtype "diophantine.mult_t"
    "(list_adt[posnat].cons?)")))
 (dio_solver_TCC1 0
  (dio_solver_TCC1-1 nil 3803482194 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (dio_solver subtype "(number_fields.-)(diophantine.bound, 1)"
    "nat")))
 (dio_solver_TCC2 0
  (dio_solver_TCC2-1 nil 3803482194 ("" (tcc) nil nil) nil nil
   (dio_solver termination
    "diophantine.dio_solver(diophantine.mult_t1, diophantine.mult_t2, (number_fields.-)(diophantine.bound, 1))"
    "nil")))
 (prod_TCC1 0
  (prod_TCC1-1 nil 3807737143 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (prod subtype "diophantine.mult_t" "(list_adt[posnat].cons?)")))
 (prod_TCC2 0
  (prod_TCC2-1 nil 3807737143 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (prod termination
    "diophantine.prod(list_adt[posnat].cdr(diophantine.mult_t))(list_adt[nat].cdr(diophantine.value_lst))"
    "nil")))
 (dio_matrix_correct?_TCC1 0
  (dio_matrix_correct?_TCC1-1 nil 3807737143 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (row_cor? const-decl "bool" diophantine nil))
   nil
   (dio_matrix_correct? subtype "diophantine.dio_matrix"
    "(list_adt[list[nat]].cons?)")))
 (dio_matrix_correct?_TCC2 0
  (dio_matrix_correct?_TCC2-1 nil 3807737143
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (row_cor? const-decl "bool" diophantine nil))
   nil
   (dio_matrix_correct? termination
    "diophantine.dio_matrix_correct?(list_adt[list[nat]].cdr(diophantine.dio_matrix), diophantine.mult_t1, diophantine.mult_t2)"
    "nil")))
 (dio_matrix_correct?_TCC3 0
  (dio_matrix_correct?_TCC3-1 nil 3807737143 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil))
   nil
   (dio_matrix_correct? subtype "diophantine.dio_matrix"
    "(list_adt[list[nat]].cons?)")))
 (prod_get_repeat_lst0 0
  (prod_get_repeat_lst0-1 nil 3807738288
   ("" (induct "mult_t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("a1" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "prod" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("2" (expand "get_repeat_lst" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "get_repeat_lst" 2)
                        (("2" (assert) (("2" (inst? -1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (prod def-decl "nat" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (prod_equiv_dot_product 0
  (prod_equiv_dot_product-1 nil 3809283947
   ("" (induct "mult_t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "prod" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "dot_product" 2)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (prod def-decl "nat" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_new_value_lst_len 0
  (get_new_value_lst_len-1 nil 3808162744
   ("" (induct "value_lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_new_value_lst_nth_TCC1 0
  (get_new_value_lst_nth_TCC1-1 nil 3808155006
   ("" (skeep) (("" (rewrite "get_new_value_lst_len") nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (get_new_value_lst_len formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (get_new_value_lst_nth subtype "diophantine.n"
    "below[length[nat](get_new_value_lst(k, a1, value_lst))]")))
 (get_new_value_lst_nth 0
  (get_new_value_lst_nth-1 nil 3808162683
   ("" (induct "value_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "get_new_value_lst" 1)
                  (("1" (expand "nth" -4)
                    (("1" (assert)
                      (("1" (expand "nth" 1) (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 2)
                  (("2" (assert)
                    (("2" (inst -1 "a1" "k" "n-1")
                      (("2" (expand "nth" -3) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "get_new_value_lst_len") nil nil))
        nil))
      nil))
    nil)
   ((get_new_value_lst_len formula-decl nil diophantine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   SHOSTAK))
 (put_in_head_matrix? 0
  (put_in_head_matrix?-1 nil 3808145448
   ("" (induct "dio")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("row" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" 1)
            (("2" (expand "matrix?" 1)
              (("2" (expand "matrix?" -2)
                (("2" (assert)
                  (("2" (split -2)
                    (("1" (flatten)
                      (("1" (expand "length" 1 1)
                        (("1" (assert)
                          (("1" (inst? -3) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil))
   SHOSTAK))
 (put_in_head_mem 0
  (put_in_head_mem-1 nil 3808149956
   ("" (induct "dio")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("row" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" -2)
            (("2" (expand "member" -2)
              (("2" (split -2)
                (("1" (grind) nil nil)
                 ("2" (inst? -2)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   SHOSTAK))
 (get_lst_dio_matrix_matrix? 0
  (get_lst_dio_matrix_matrix?-1 nil 3808144710
   ("" (induct "value_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_dio_matrix" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (hide 1)
                  (("2" (expand "flatten" 1)
                    (("2" (rewrite "matrix_append")
                      (("2" (prop)
                        (("1" (lemma "put_in_head_matrix?")
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (reveal 3)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "cdr(lst_dio_matrix)" "n")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst -2 "dio")
                                (("2"
                                  (assert)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (hide 1 2)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (reveal 3)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (matrix_append formula-decl nil list_theory nil)
    (put_in_head_matrix? formula-decl nil diophantine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (flatten def-decl "list[T]" list_theory nil)
    (matrix? def-decl "bool" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_lst_dio_matrix_len 0
  (get_lst_dio_matrix_len-1 nil 3808149827
   ("" (induct "value_lst" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_dio_matrix" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "length" 2 1)
                  (("2" (expand "length" 2 2)
                    (("2" (expand "length" 2 3)
                      (("2" (assert) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_lst_dio_matrix_mem_nth_TCC1 0
  (get_lst_dio_matrix_mem_nth_TCC1-1 nil 3808149048
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_lst_dio_matrix_mem_nth subtype "diophantine.row"
    "(list_adt[nat].cons?)")))
 (get_lst_dio_matrix_mem_nth_TCC2 0
  (get_lst_dio_matrix_mem_nth_TCC2-1 nil 3808149048
   ("" (skeep)
    (("" (rewrite "get_lst_dio_matrix_len") (("" (assert) nil nil))
      nil))
    nil)
   ((get_lst_dio_matrix_len formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get_lst_dio_matrix_mem_nth subtype "diophantine.n"
    "below[length[nat](value_lst)]")))
 (get_lst_dio_matrix_mem_nth_TCC3 0
  (get_lst_dio_matrix_mem_nth_TCC3-1 nil 3808153060
   ("" (skeep)
    (("" (rewrite "get_lst_dio_matrix_len") (("" (assert) nil nil))
      nil))
    nil)
   ((get_lst_dio_matrix_len formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get_lst_dio_matrix_mem_nth subtype "diophantine.n"
    "below[length[dio_matrix](lst_dio_matrix)]")))
 (get_lst_dio_matrix_mem_nth 0
  (get_lst_dio_matrix_mem_nth-1 nil 3808149147
   ("" (measure-induct "length(lst_dio_matrix)" "lst_dio_matrix")
    (("1" (skolem 1 "lst_dio_matrix")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "get_lst_dio_matrix" -2)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "nth" -1)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (lemma "put_in_head_mem")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 4)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (reveal -1)
                              (("2"
                                (inst -1 "cdr(lst_dio_matrix)")
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "nth" 4)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (reveal -2)
                                          (("1"
                                            (inst
                                             -1
                                             "cdr(lst_dio_matrix)")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (inst
                                                 -1
                                                 "n-1"
                                                 "row"
                                                 "cdr(value_lst)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 5)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           "get_lst_dio_matrix_len")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "get_lst_dio_matrix_len")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (hide -2 -3 1)
          (("2" (lemma "get_lst_dio_matrix_len")
            (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (hide -1 -2 -3) (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "get_lst_dio_matrix_len")
          (("4" (hide -3 1)
            (("4" (inst? -1) (("4" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep) (("5" (hide -1 -2) (("5" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (get_lst_dio_matrix_len formula-decl nil diophantine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (put_in_head_mem formula-decl nil diophantine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   SHOSTAK))
 (find_vectors_matrix 0
  (find_vectors_matrix-1 nil 3808143025
   ("" (induct "mult_t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("a1" "X"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" 1)
            (("2" (expand "find_vectors" 1)
              (("2" (lift-if)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2"
                      (name-replace "X1_values"
                       "from_min2max[nat](0, floor(n/a1))")
                      (("2"
                        (name-replace "new_k_lst"
                         "get_new_value_lst(n, a1, X1_values)")
                        (("2"
                          (name-replace "lst_smaller_dio"
                           "map(find_vectors(X))(new_k_lst)")
                          (("2"
                            (name-replace "lst_dio"
                             "get_lst_dio_matrix(X1_values, lst_smaller_dio)")
                            (("2" (expand "lst_dio" 2)
                              (("2"
                                (lemma "get_lst_dio_matrix_matrix?")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2 3)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "lst_smaller_dio")
                                          (("2"
                                            (lemma
                                             "member_nth2[dio_matrix]")
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (replace -1 -2)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (skolem -1 "i")
                                                    (("2"
                                                      (rewrite
                                                       "map_nth_rw")
                                                      (("1"
                                                        (inst? -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (rewrite
                                                           "map_length")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (map_length formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member_nth2 formula-decl nil list_theory nil)
    (get_lst_dio_matrix_matrix? formula-decl nil diophantine nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (find_vectors_len 0
  (find_vectors_len-1 nil 3807901159
   ("" (skeep)
    (("" (lemma "find_vectors_matrix")
      (("" (inst? -1)
        (("" (lemma "matrix_mem[nat]")
          (("" (inst? -1)
            (("" (inst -1 "find_vectors(mult_t)(n)")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((find_vectors_matrix formula-decl nil diophantine nil)
    (matrix_mem formula-decl nil list_theory nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (find_vectors_cor 0
  (find_vectors_cor-1 nil 3808146734
   ("" (induct "mult_t")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("a1" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "prod" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -2 1)
                  (("1" (lemma "find_vectors_len")
                    (("1" (inst? -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "find_vectors" -2)
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide -1 -4) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 1 2)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (name-replace "X1_values"
                           "from_min2max[nat](0, floor(n/a1))")
                          (("2"
                            (name-replace "new_k_lst"
                             "get_new_value_lst(n, a1, X1_values)")
                            (("2"
                              (name-replace "lst_smaller_dio"
                               "map(find_vectors(tail))(new_k_lst)")
                              (("2"
                                (name-replace
                                 "lst_dio"
                                 "get_lst_dio_matrix(X1_values, lst_smaller_dio)")
                                (("2"
                                  (expand "lst_dio")
                                  (("2"
                                    (lemma "flatten_mem[list[nat]]")
                                    (("2"
                                      (inst? -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skolem -1 "j")
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (lemma
                                               "get_lst_dio_matrix_mem_nth")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand
                                                       "lst_smaller_dio")
                                                      (("2"
                                                        (rewrite
                                                         "map_nth_rw")
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "nth(new_k_lst, j)"
                                                           "cdr(value_lst)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     3)
                                                                    (("1"
                                                                      (expand
                                                                       "X1_values")
                                                                      (("1"
                                                                        (rewrite
                                                                         "nth_from_min2max")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           3)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "new_k_lst")
                                                                              (("1"
                                                                                (lemma
                                                                                 "get_new_value_lst_nth")
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         3)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "X1_values")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "nth_from_min2max")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "j")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "get_lst_dio_matrix_len")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "X1_values")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "j")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "get_lst_dio_matrix_len")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "X1_values")
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "nth_from_min2max")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "j")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "get_lst_dio_matrix_len")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "X1_values")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "from_min2max_len")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2
                                                                                                     3
                                                                                                     4)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "j <= floor(n/a1)")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "floor_def")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     " j <= n/a1")
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -2
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "j = n/a1")
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "j < n/a1")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -2
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "div_mult_pos_lt2")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "j")
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3
                                                                                               4
                                                                                               5)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "get_lst_dio_matrix_len")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "X1_values")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (hide
                                                                             -2
                                                                             -3
                                                                             2
                                                                             4)
                                                                            (("2"
                                                                              (lemma
                                                                               "get_lst_dio_matrix_len")
                                                                              (("2"
                                                                                (inst?
                                                                                 -1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   -2
                                                                                   nil
                                                                                   t)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "X1_values")
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "j")
                                                          (("2"
                                                            (lemma
                                                             "get_lst_dio_matrix_len")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "lst_smaller_dio"
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (get_lst_dio_matrix_mem_nth formula-decl nil diophantine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_length formula-decl nil more_map_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (get_lst_dio_matrix_len formula-decl nil diophantine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (from_min2max_len formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (floor_def formula-decl nil floor_ceil nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (get_new_value_lst_nth formula-decl nil diophantine nil)
    (nth_from_min2max formula-decl nil list_theory nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (flatten_mem formula-decl nil list_theory nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (find_vectors_len formula-decl nil diophantine nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (prod def-decl "nat" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (dio_solver_n_member_find_vector 0
  (dio_solver_n_member_find_vector-1 nil 3807866193
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "dio" "dio_solver_n(mult_t1, mult_t2, n)")
        (("" (prop)
          (("1" (expand "dio")
            (("1" (expand "dio_solver_n" -1)
              (("1" (lemma "member_nth2[list[nat]]")
                (("1" (inst? -1)
                  (("1" (replace -1 -2)
                    (("1" (hide -1)
                      (("1" (skeep)
                        (("1" (rewrite "split_matrix_nth")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (lemma "split_append_pair[nat]")
                              (("1"
                                (inst -1 "length(mult_t1)" "_")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (replace -1 -2)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (name-replace
                                             "cart_prod"
                                             "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                                            (("1"
                                              (lemma
                                               "member_nth[[list[nat], list[nat]]]")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "cart_prod_mem[list[nat]]")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "find_vectors(mult_t2)(n)"
                                                         "nth(cart_prod, n_1)`2")
                                                        (("1"
                                                          (replace
                                                           -3
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (reveal
                                                               -4)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -3
                                                                     2)
                                                                    (("1"
                                                                      (grind)
                                                                      (("1"
                                                                        (case
                                                                         "nth(cart_prod, n_1) = (nth(cart_prod, n_1)`1, nth(cart_prod, n_1)`2)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "n_1")
                                                    (("2"
                                                      (lemma
                                                       "split_matrix_len[nat]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length")
                                                                  (("2"
                                                                    (expand
                                                                     "cart_prod"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (name-replace
                                         "cart_prod"
                                         "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                                        (("2"
                                          (lemma
                                           "member_nth[[list[nat], list[nat]]]")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "cart_prod")
                                                (("1"
                                                  (name-replace
                                                   "x1"
                                                   "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n)), n_1)")
                                                  (("1"
                                                    (lemma
                                                     "cart_prod_mem[list[nat]]")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "x1`1"
                                                         "x1`2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "member(x1`1, find_vectors(mult_t1)(n))")
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3)
                                                              (("1"
                                                                (lemma
                                                                 "find_vectors_len")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (grind)
                                                                (("2"
                                                                  (hide
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "x1 = (x1`1, x1`2)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "n_1")
                                                  (("2"
                                                    (reveal -2)
                                                    (("2"
                                                      (replace -1 -2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           "split_matrix_len[nat]")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -3)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_length")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (typepred "n_1")
                                (("2"
                                  (lemma "split_matrix_len[nat]")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (replace -1 -3)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (rewrite "map_length")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2" (typepred "n_1")
                              (("2"
                                (lemma "split_matrix_len[nat]")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (replace -1 -3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "dio" -1)
            (("2" (expand "dio_solver_n" -1)
              (("2"
                (name-replace "cart_prod"
                 "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                (("2" (lemma "member_nth2[list[nat]]")
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (hide -2)
                            (("2" (lemma "split_matrix_nth2[nat]")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite "map_nth_rw")
                                        (("1"
                                          (lemma
                                           "split_append_pair[nat]")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (replace -2 -3)
                                                (("1"
                                                  (hide -1 -2)
                                                  (("1"
                                                    (lemma
                                                     "member_nth[[list[nat], list[nat]]]")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "cart_prod_mem[list[nat]]")
                                                          (("1"
                                                            (expand
                                                             "cart_prod")
                                                            (("1"
                                                              (name-replace
                                                               "x2"
                                                               "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n)), n!1)")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "find_vectors(mult_t1)(n)"
                                                                 "find_vectors(mult_t2)(n)"
                                                                 "x2`1"
                                                                 "x2`2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     2)
                                                                    (("1"
                                                                      (grind)
                                                                      (("1"
                                                                        (case
                                                                         "x2 = (x2`1, x2`2)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (typepred
                                                             "n!1")
                                                            (("2"
                                                              (lemma
                                                               "split_matrix_len[nat]")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "cart_prod"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         -3)
                                                                        (("2"
                                                                          (rewrite
                                                                           "map_length")
                                                                          (("2"
                                                                            (expand
                                                                             "cart_prod")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (lemma
                                                   "member_nth[nat]")
                                                  (("2"
                                                    (lemma
                                                     "member_nth[[list[nat], list[nat]]]")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "cart_prod"
                                                             -1
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "cart_prod_mem[nat]")
                                                              (("1"
                                                                (lemma
                                                                 "cart_prod_mem[list[nat]]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "nth(cart_prod, n!1)`1"
                                                                       "nth(cart_prod, n!1)`2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "(nth(cart_prod, n!1)`1, nth(cart_prod, n!1)`2) = nth(cart_prod, n!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -3
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "find_vectors_len")
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "cart_prod"
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "n!1")
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "split_matrix_len[nat]")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           -3)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "map_length")
                                                                              (("2"
                                                                                (expand
                                                                                 "cart_prod"
                                                                                 -1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (typepred "n!1")
                                            (("2"
                                              (lemma
                                               "split_matrix_len[nat]")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (replace -1 -2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (rewrite
                                                           "map_length")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (typepred "n!1")
                                      (("2"
                                        (lemma "split_matrix_len[nat]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (replace -1 -2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (split_matrix_nth2 formula-decl nil list_theory nil)
    (member_nth2 formula-decl nil list_theory nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (split_matrix_len formula-decl nil list_theory nil)
    (cart_prod_mem formula-decl nil list_theory nil)
    (member_nth formula-decl nil list_theory nil)
    (member def-decl "bool" list_props nil)
    (find_vectors_len formula-decl nil diophantine nil)
    (nth def-decl "T" list_props nil)
    (split_append_pair formula-decl nil list_theory nil)
    (split_matrix_nth formula-decl nil list_theory nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (append_pair const-decl "list[T]" list_theory nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil))
   SHOSTAK))
 (dio_solver_n_member_cor 0
  (dio_solver_n_member_cor-1 nil 3807905860
   ("" (skeep)
    (("" (assert)
      (("" (lemma "dio_solver_n_member_find_vector")
        (("" (inst? -1)
          (("" (inst -1 "row")
            (("" (assert)
              (("" (flatten)
                (("" (prop)
                  (("1" (rewrite "find_vectors_cor") nil nil)
                   ("2" (rewrite "find_vectors_cor") nil nil)
                   ("3" (rewrite "find_vectors_cor") nil nil)
                   ("4" (rewrite "find_vectors_cor") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (find_vectors_cor formula-decl nil diophantine nil)
    (dio_solver_n_member_find_vector formula-decl nil diophantine nil))
   SHOSTAK))
 (dio_solver_n_split_matrix 0
  (dio_solver_n_split_matrix-1 nil 3807802920
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("1" (rewrite "equal_lst_nth")
          (("1" (hide 2)
            (("1" (rewrite "map_length")
              (("1" (rewrite "get_repeat_lst_len")
                (("1" (lemma "split_matrix_len[nat]")
                  (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skolem 1 "i")
              (("2" (rewrite "map_nth_rw")
                (("1" (lemma "dio_solver_n_member_cor")
                  (("1" (inst? -1)
                    (("1" (inst -1 "mult_t2")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (lemma "member_nth[list[nat]]")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "i")
                                        (("1"
                                          (rewrite "map_length")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "get_repeat_lst_nth[nat]")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2 -2)
                                                    (("1"
                                                      (lemma
                                                       "split_matrix_len[nat]")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (rewrite "map_length") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "equal_lst_nth")
          (("1" (hide 2)
            (("1" (rewrite "map_length")
              (("1" (rewrite "get_repeat_lst_len")
                (("1" (lemma "split_matrix_len[nat]")
                  (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skolem 1 "i")
              (("2" (rewrite "map_nth_rw")
                (("1" (rewrite "get_repeat_lst_nth")
                  (("1" (lemma "dio_solver_n_member_cor")
                    (("1" (inst -1 "mult_t1" "mult_t2" "n" "_")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (hide -1)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (lemma "member_nth[list[nat]]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (typepred "i")
                                            (("1"
                                              (rewrite "map_length")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (rewrite "map_length")
                      (("2" (hide 2)
                        (("2" (lemma "split_matrix_len[nat]")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "i")
                    (("2" (rewrite "map_length") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_lst_nth formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (prod def-decl "nat" diophantine nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (length def-decl "nat" list_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map_length formula-decl nil more_map_props nil)
    (split_matrix_len formula-decl nil list_theory nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (dio_solver_n_member_cor formula-decl nil diophantine nil)
    (member_nth formula-decl nil list_theory nil)
    (get_repeat_lst_nth formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (map_nth_rw formula-decl nil more_map_props nil))
   SHOSTAK))
 (dio_matrix_correct?_append 0
  (dio_matrix_correct?_append-1 nil 3807743211
   ("" (induct "dio_matrix1")
    (("1" (skeep)
      (("1" (expand "append" 1)
        (("1" (expand "dio_matrix_correct?" 1 2)
          (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "dio_matrix_correct?" 1 1)
              (("2" (expand "dio_matrix_correct?" 1 2)
                (("2" (assert)
                  (("2" (inst? -1) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (dio_matrix_correct? def-decl "bool" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil))
   SHOSTAK))
 (dio_matrix_correct?_split 0
  (dio_matrix_correct?_split-1 nil 3807800229
   ("" (measure-induct "length(dio_matrix)" "dio_matrix")
    (("" (skolem 1 "dio")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "dio_matrix_correct?" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "split_matrix" 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (expand "map" 2)
                            (("2" (expand "row_cor?" 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "cdr(dio)")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (inst -1 "mult_t1" "mult_t2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (decompose-equality)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 1)
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((row_cor? const-decl "bool" diophantine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (prod def-decl "nat" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dio_matrix_correct? def-decl "bool" diophantine nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil))
   SHOSTAK))
 (dio_solver_n_cor 0
  (dio_solver_n_cor-1 nil 3807777173
   ("" (skeep)
    (("" (lemma "dio_matrix_correct?_split")
      (("" (inst? -1)
        (("" (assert)
          (("" (prop)
            (("" (hide 2 3)
              (("" (lemma "dio_solver_n_split_matrix")
                (("" (inst? -1)
                  (("" (assert)
                    (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dio_matrix_correct?_split formula-decl nil diophantine nil)
    (dio_solver_n_split_matrix formula-decl nil diophantine nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (dio_solver_cor 0
  (dio_solver_cor-1 nil 3807737143
   ("" (induct "bound")
    (("1" (skeep)
      (("1" (expand "dio_solver" 1)
        (("1" (expand "dio_matrix_correct?" 1)
          (("1" (prop)
            (("1" (expand "row_cor?" 1)
              (("1" (lemma "split_append[nat]")
                (("1" (lemma "get_repeat_lst_append[nat]")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1)
                        (("1" (inst? -1)
                          (("1" (rewrite "get_repeat_lst_len")
                            (("1" (replace -1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "prod_get_repeat_lst0")
                                    (("1"
                                      (rewrite "prod_get_repeat_lst0")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "n")
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "dio_solver" 1)
            (("2" (rewrite "dio_matrix_correct?_append")
              (("2" (inst? -1)
                (("2" (assert)
                  (("2" (hide -1)
                    (("2" (lemma "dio_solver_n_cor")
                      (("2" (inst? -1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (dio_matrix_correct?_append formula-decl nil diophantine nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dio_solver_n_cor formula-decl nil diophantine nil)
    (row_cor? const-decl "bool" diophantine nil)
    (get_repeat_lst_append formula-decl nil list_theory nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (prod_get_repeat_lst0 formula-decl nil diophantine nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (length def-decl "nat" list_props nil)
    (split_append formula-decl nil list_theory nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix_correct? def-decl "bool" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (dio_solver_not_null 0
  (dio_solver_not_null-1 nil 3834509340
   ("" (measure-induct "bound" "bound")
    (("" (skolem 1 "bound")
      (("" (prop)
        (("" (skeep)
          (("" (expand "dio_solver" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (rewrite "null_append")
                    (("2" (prop)
                      (("2" (inst -3 "bound - 1")
                        (("1" (grind) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null_append formula-decl nil list_theory nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

